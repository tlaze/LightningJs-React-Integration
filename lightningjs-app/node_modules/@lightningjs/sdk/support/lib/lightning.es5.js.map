{"version":3,"file":"lightning.es5.js","sources":["../src/tree/StageUtils.mjs","../src/tree/Utils.mjs","../src/tree/Base.mjs","../src/flex/layout/SpacingCalculator.mjs","../src/flex/layout/ContentAligner.mjs","../src/flex/FlexUtils.mjs","../src/flex/layout/line/SizeShrinker.mjs","../src/flex/layout/line/SizeGrower.mjs","../src/flex/layout/line/ItemPositioner.mjs","../src/flex/layout/line/ItemAligner.mjs","../src/flex/layout/line/LineLayout.mjs","../src/flex/layout/LineLayouter.mjs","../src/flex/layout/ItemCoordinatesUpdater.mjs","../src/flex/layout/FlexLayout.mjs","../src/flex/FlexContainer.mjs","../src/flex/FlexItem.mjs","../src/flex/FlexTarget.mjs","../src/tree/TextureSource.mjs","../src/tree/core/ElementTexturizer.mjs","../src/tree/core/ElementCore.mjs","../src/EventEmitter.mjs","../src/tree/Shader.mjs","../src/tree/Texture.mjs","../src/textures/ImageTexture.mjs","../src/textures/TextTextureRendererUtils.mts","../src/textures/TextTextureRenderer.mjs","../src/textures/TextTextureRendererAdvanced.mjs","../src/textures/TextTexture.mjs","../src/textures/SourceTexture.mjs","../src/animation/Transition.mjs","../src/tree/ObjectList.mjs","../src/tree/ElementChildList.mjs","../src/tree/Element.mjs","../src/application/StateMachine.mjs","../src/application/Component.mjs","../src/tree/core/CoreQuadList.mjs","../src/renderer/webgl/WebGLCoreQuadList.mjs","../src/tree/core/CoreQuadOperation.mjs","../src/renderer/webgl/WebGLCoreQuadOperation.mjs","../src/tree/core/CoreRenderExecutor.mjs","../src/renderer/webgl/WebGLCoreRenderExecutor.mjs","../src/tree/core/CoreRenderState.mjs","../src/renderer/webgl/WebGLShaderProgram.mjs","../src/renderer/webgl/WebGLShader.mjs","../src/renderer/webgl/shaders/DefaultShader.mjs","../src/renderer/Renderer.mjs","../src/renderer/webgl/WebGLRenderer.mjs","../src/renderer/c2d/C2dCoreQuadList.mjs","../src/renderer/c2d/C2dCoreQuadOperation.mjs","../src/renderer/c2d/C2dCoreRenderExecutor.mjs","../src/renderer/c2d/C2dShader.mjs","../src/renderer/c2d/shaders/DefaultShader.mjs","../src/renderer/c2d/C2dTextureTintManager.mjs","../src/renderer/c2d/C2dRenderer.mjs","../src/renderer/spark/shaders/SparkShader.mjs","../src/renderer/spark/SparkRenderer.mjs","../src/platforms/browser/ImageWorker.mjs","../src/platforms/browser/WebPlatform.mjs","../src/platforms/PlatformLoader.mjs","../src/tools/WebGLStateManager.mjs","../src/tree/TextureManager.mjs","../src/tree/TextureThrottler.mjs","../src/tree/core/CoreContext.mjs","../src/animation/TransitionSettings.mjs","../src/animation/TransitionManager.mjs","../src/tools/MultiSpline.mjs","../src/animation/AnimationActionSettings.mjs","../src/animation/AnimationSettings.mjs","../src/animation/Animation.mjs","../src/animation/AnimationManager.mjs","../src/textures/RectangleTexture.mjs","../src/tree/Stage.mjs","../src/application/Application.mjs","../src/textures/StaticCanvasTexture.mjs","../src/tools/Tools.mjs","../src/tools/ObjMerger.mjs","../src/tools/ObjectListProxy.mjs","../src/tools/ObjectListWrapper.mjs","../src/textures/NoiseTexture.mjs","../src/textures/HtmlTexture.mjs","../src/textures/StaticTexture.mjs","../src/components/ListComponent.mjs","../src/renderer/webgl/shaders/LinearBlurShader.mjs","../src/renderer/webgl/shaders/BoxBlurShader.mjs","../src/renderer/c2d/shaders/BlurShader.mjs","../src/components/FastBlurComponent.mjs","../src/components/BloomComponent.mjs","../src/components/SmoothScaleComponent.mjs","../src/components/BorderComponent.mjs","../src/renderer/common/shaders/GrayscaleShader.mjs","../src/renderer/webgl/shaders/DitheringShader.mjs","../src/renderer/webgl/shaders/CircularPushShader.mjs","../src/renderer/webgl/shaders/InversionShader.mjs","../src/renderer/webgl/shaders/OutlineShader.mjs","../src/renderer/webgl/shaders/PixelateShader.mjs","../src/renderer/webgl/shaders/RadialFilterShader.mjs","../src/renderer/webgl/shaders/RoundedRectangleShader.mjs","../src/renderer/webgl/shaders/FadeOutShader.mjs","../src/renderer/webgl/shaders/VignetteShader.mjs","../src/renderer/webgl/shaders/SpinnerShader.mjs","../src/renderer/webgl/shaders/HoleShader.mjs","../src/renderer/webgl/shaders/RadialGradientShader.mjs","../src/renderer/webgl/shaders/Light3dShader.mjs","../src/renderer/webgl/shaders/PerspectiveShader.mjs","../src/renderer/webgl/shaders/MagnifierShader.mjs","../src/renderer/webgl/shaders/SpinnerShader2.mjs","../src/lightning.mjs"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class StageUtils {\n\n    static mergeNumbers(v1, v2, p) {\n        return v1 * p + v2 * (1 - p);\n    };\n\n    static rgb(r, g, b) {\n        return (r << 16) + (g << 8) + b + (255 * 16777216);\n    };\n\n    static rgba(r, g, b, a) {\n        return (r << 16) + (g << 8) + b + (((a * 255) | 0) * 16777216);\n    };\n\n    static getRgbString(color) {\n        let r = ((color / 65536) | 0) % 256;\n        let g = ((color / 256) | 0) % 256;\n        let b = color % 256;\n        return 'rgb(' + r + ',' + g + ',' + b + ')';\n    };\n\n    static getRgbaString(color) {\n        let r = ((color / 65536) | 0) % 256;\n        let g = ((color / 256) | 0) % 256;\n        let b = color % 256;\n        let a = ((color / 16777216) | 0) / 255;\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a.toFixed(4) + ')';\n    };\n\n    static getRgbaStringFromArray(color) {\n        let r = Math.floor(color[0] * 255);\n        let g = Math.floor(color[1] * 255);\n        let b = Math.floor(color[2] * 255);\n        let a = Math.floor(color[3] * 255) / 255;\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a.toFixed(4) + ')';\n    };\n\n    static getRgbaComponentsNormalized(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        let a = ((argb / 16777216) | 0);\n        return [r / 255, g / 255, b / 255, a / 255];\n    };\n\n    static getRgbComponentsNormalized(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        return [r / 255, g / 255, b / 255];\n    };\n\n    static getRgbaComponents(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        let a = ((argb / 16777216) | 0);\n        return [r, g, b, a];\n    };\n\n    static getArgbNumber(rgba) {\n        rgba[0] = Math.max(0, Math.min(255, rgba[0]));\n        rgba[1] = Math.max(0, Math.min(255, rgba[1]));\n        rgba[2] = Math.max(0, Math.min(255, rgba[2]));\n        rgba[3] = Math.max(0, Math.min(255, rgba[3]));\n        let v = ((rgba[3] | 0) << 24) + ((rgba[0] | 0) << 16) + ((rgba[1] | 0) << 8) + (rgba[2] | 0);\n        if (v < 0) {\n            v = 0xFFFFFFFF + v + 1;\n        }\n        return v;\n    };\n\n    static mergeColors(c1, c2, p) {\n        let r1 = ((c1 / 65536) | 0) % 256;\n        let g1 = ((c1 / 256) | 0) % 256;\n        let b1 = c1 % 256;\n        let a1 = ((c1 / 16777216) | 0);\n\n        let r2 = ((c2 / 65536) | 0) % 256;\n        let g2 = ((c2 / 256) | 0) % 256;\n        let b2 = c2 % 256;\n        let a2 = ((c2 / 16777216) | 0);\n\n        let r = r1 * p + r2 * (1 - p);\n        let g = g1 * p + g2 * (1 - p);\n        let b = b1 * p + b2 * (1 - p);\n        let a = a1 * p + a2 * (1 - p);\n\n        return Math.round(a) * 16777216 + Math.round(r) * 65536 + Math.round(g) * 256 + Math.round(b);\n    };\n\n    static mergeMultiColors(c, p) {\n        let r = 0, g = 0, b = 0, a = 0, t = 0;\n        let n = c.length;\n        for (let i = 0; i < n; i++) {\n            let r1 = ((c[i] / 65536) | 0) % 256;\n            let g1 = ((c[i] / 256) | 0) % 256;\n            let b1 = c[i] % 256;\n            let a1 = ((c[i] / 16777216) | 0);\n            r += r1 * p[i];\n            g += g1 * p[i];\n            b += b1 * p[i];\n            a += a1 * p[i];\n            t += p[i];\n        }\n\n        t = 1 / t;\n        return Math.round(a * t) * 16777216 + Math.round(r * t) * 65536 + Math.round(g * t) * 256 + Math.round(b * t);\n    };\n\n    static mergeMultiColorsEqual(c) {\n        let r = 0, g = 0, b = 0, a = 0, t = 0;\n        let n = c.length;\n        for (let i = 0; i < n; i++) {\n            let r1 = ((c[i] / 65536) | 0) % 256;\n            let g1 = ((c[i] / 256) | 0) % 256;\n            let b1 = c[i] % 256;\n            let a1 = ((c[i] / 16777216) | 0);\n            r += r1;\n            g += g1;\n            b += b1;\n            a += a1;\n            t += 1.0;\n        }\n\n        t = 1 / t;\n        return Math.round(a * t) * 16777216 + Math.round(r * t) * 65536 + Math.round(g * t) * 256 + Math.round(b * t);\n    };\n\n    static mergeColorAlpha(c, alpha) {\n        let a = ((c / 16777216 | 0) * alpha) | 0;\n        return (((((c >> 16) & 0xff) * a) / 255) & 0xff) +\n            ((((c & 0xff00) * a) / 255) & 0xff00) +\n            (((((c & 0xff) << 16) * a) / 255) & 0xff0000) +\n            (a << 24);\n    };\n\n    static rad(deg) {\n        return deg * (Math.PI / 180);\n    };\n\n    static getTimingBezier(a, b, c, d) {\n        let xc = 3.0 * a;\n        let xb = 3.0 * (c - a) - xc;\n        let xa = 1.0 - xc - xb;\n        let yc = 3.0 * b;\n        let yb = 3.0 * (d - b) - yc;\n        let ya = 1.0 - yc - yb;\n\n        return function (time) {\n            if (time >= 1.0) {\n                return 1;\n            }\n            if (time <= 0) {\n                return 0;\n            }\n\n            let t = 0.5, cbx, cbxd, dx;\n\n            for (let it = 0; it < 20; it++) {\n                cbx = t * (t * (t * xa + xb) + xc);\n                dx = time - cbx;\n                if (dx > -1e-8 && dx < 1e-8) {\n                    return t * (t * (t * ya + yb) + yc);\n                }\n\n                // Cubic bezier derivative.\n                cbxd = t * (t * (3 * xa) + 2 * xb) + xc;\n\n                if (cbxd > 1e-10 && cbxd < 1e-10) {\n                    // Problematic. Fall back to binary search method.\n                    break;\n                }\n\n                t += dx / cbxd;\n            }\n\n            // Fallback: binary search method. This is more reliable when there are near-0 slopes.\n            let minT = 0;\n            let maxT = 1;\n            for (let it = 0; it < 20; it++) {\n                t = 0.5 * (minT + maxT);\n\n                cbx = t * (t * (t * xa + xb) + xc);\n\n                dx = time - cbx;\n                if (dx > -1e-8 && dx < 1e-8) {\n                    // Solution found!\n                    return t * (t * (t * ya + yb) + yc);\n                }\n\n                if (dx < 0) {\n                    maxT = t;\n                } else {\n                    minT = t;\n                }\n            }\n\n        };\n    };\n\n    static getTimingFunction(str) {\n        switch (str) {\n            case \"linear\":\n                return function (time) {\n                    return time\n                };\n            case \"ease\":\n                return StageUtils.getTimingBezier(0.25, 0.1, 0.25, 1.0);\n            case \"ease-in\":\n                return StageUtils.getTimingBezier(0.42, 0, 1.0, 1.0);\n            case \"ease-out\":\n                return StageUtils.getTimingBezier(0, 0, 0.58, 1.0);\n            case \"ease-in-out\":\n                return StageUtils.getTimingBezier(0.42, 0, 0.58, 1.0);\n            case \"step-start\":\n                return function () {\n                    return 1\n                };\n            case \"step-end\":\n                return function (time) {\n                    return time === 1 ? 1 : 0;\n                };\n            default:\n                let s = \"cubic-bezier(\";\n                if (str && str.indexOf(s) === 0) {\n                    let parts = str.substr(s.length, str.length - s.length - 1).split(\",\");\n                    if (parts.length !== 4) {\n                        console.warn(\"[Lightning] Unknown timing function: \" + str);\n\n                        // Fallback: use linear.\n                        return function (time) {\n                            return time\n                        };\n                    }\n                    let a = parseFloat(parts[0]);\n                    let b = parseFloat(parts[1]);\n                    let c = parseFloat(parts[2]);\n                    let d = parseFloat(parts[3]);\n                    if (isNaN(a) || isNaN(b) || isNaN(c) || isNaN(d)) {\n                        console.warn(\"[Lightning] Unknown timing function: \" + str);\n                        // Fallback: use linear.\n                        return function (time) {\n                            return time\n                        };\n                    }\n\n                    return StageUtils.getTimingBezier(a, b, c, d);\n                } else {\n                    console.warn(\"[Lightning] Unknown timing function: \" + str);\n                    // Fallback: use linear.\n                    return function (time) {\n                        return time\n                    };\n                }\n        }\n    };\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Utils {\n\n    static isFunction(value) {\n        return typeof value === 'function';\n    }\n\n    static isNumber(value) {\n        return typeof value === 'number';\n    }\n\n    static isInteger(value) {\n        return (typeof value === 'number' && (value % 1) === 0);\n    }\n\n    static isBoolean(value) {\n        return value === true || value === false;\n    }\n\n    static isString(value) {\n        return typeof value === 'string';\n    }\n\n    static clone(v) {\n        if (Utils.isObjectLiteral(v) || Array.isArray(v)) {\n            return Utils.getDeepClone(v);\n        } else {\n            // Copy by value.\n            return v;\n        }\n    }\n\n    static cloneObjShallow(obj) {\n        let keys = Object.keys(obj);\n        let clone = {}\n        for (let i = 0; i < keys.length; i++) {\n            clone[keys[i]] = obj[keys[i]];\n        }\n        return clone;\n    }\n\n    static merge(obj1, obj2) {\n        let keys = Object.keys(obj2);\n        for (let i = 0; i < keys.length; i++) {\n            obj1[keys[i]] = obj2[keys[i]];\n        }\n        return obj1;\n    }\n\n    static isObject(value) {\n        let type = typeof value;\n        return !!value && (type === 'object' || type === 'function');\n    }\n\n    static isPlainObject(value) {\n        let type = typeof value;\n        return !!value && (type === 'object');\n    }\n\n    static isObjectLiteral(value){\n        return typeof value === 'object' && value && value.constructor === Object;\n    }\n\n    static getArrayIndex(index, arr) {\n        return Utils.getModuloIndex(index, arr.length);\n    }\n\n    static getModuloIndex(index, len) {\n        if (len === 0) return index;\n        while (index < 0) {\n            index += Math.ceil(-index / len) * len;\n        }\n        index = index % len;\n        return index;\n    }\n\n    static getDeepClone(obj) {\n        let i, c;\n        if (Utils.isFunction(obj)) {\n            // Copy functions by reference.\n            return obj;\n        }\n        if (Array.isArray(obj)) {\n            c = [];\n            let keys = Object.keys(obj);\n            for (i = 0; i < keys.length; i++) {\n                c[keys[i]] = Utils.getDeepClone(obj[keys[i]]);\n            }\n            return c;\n        } else if (Utils.isObject(obj)) {\n            c = {}\n            let keys = Object.keys(obj);\n            for (i = 0; i < keys.length; i++) {\n                c[keys[i]] = Utils.getDeepClone(obj[keys[i]]);\n            }\n            return c;\n        } else {\n            return obj;\n        }\n    }\n\n    static equalValues(v1, v2) {\n        if ((typeof v1) !== (typeof v2)) return false;\n        if (Utils.isObjectLiteral(v1)) {\n            return Utils.isObjectLiteral(v2) && Utils.equalObjectLiterals(v1, v2);\n        } else if (Array.isArray(v1)) {\n            return Array.isArray(v2) && Utils.equalArrays(v1, v2);\n        } else {\n            return v1 === v2;\n        }\n    }\n\n    static equalObjectLiterals(obj1, obj2) {\n        let keys1 = Object.keys(obj1);\n        let keys2 = Object.keys(obj2);\n        if (keys1.length !== keys2.length) {\n            return false;\n        }\n\n        for (let i = 0, n = keys1.length; i < n; i++) {\n            const k1 = keys1[i];\n            const k2 = keys2[i];\n            if (k1 !== k2) {\n                return false;\n            }\n\n            const v1 = obj1[k1];\n            const v2 = obj2[k2];\n\n            if (!Utils.equalValues(v1, v2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    static equalArrays(v1, v2) {\n        if (v1.length !== v2.length) {\n            return false;\n        }\n        for (let i = 0, n = v1.length; i < n; i++) {\n            if (!this.equalValues(v1[i], v2[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    static setToArray(s) {\n        let result = [];\n        s.forEach(function (value) {\n            result.push(value);\n        });\n        return result;\n    }\n\n    static iteratorToArray(iterator) {\n        let result = [];\n        let iteratorResult = iterator.next();\n        while (!iteratorResult.done) {\n            result.push(iteratorResult.value);\n            iteratorResult = iterator.next();\n        }\n        return result;\n    }\n\n    static isUcChar(charcode) {\n        return charcode >= 65 && charcode <= 90;\n    }\n\n}\n\nUtils.isWeb = (typeof window !== \"undefined\") && (typeof sparkscene === \"undefined\");\nUtils.isWPE = Utils.isWeb && (navigator.userAgent.indexOf(\"WPE\") !== -1);\nUtils.isSpark = (typeof sparkscene !== \"undefined\");\nUtils.isNode = (typeof window === \"undefined\") || Utils.isSpark;\nUtils.isPS4 = Utils.isWeb && (navigator.userAgent.indexOf(\"PlayStation 4\") !== -1);\nUtils.isZiggo = Utils.isWeb && (navigator.userAgent.indexOf(\"EOSSTB\") !== -1 || navigator.userAgent.indexOf(\"HZNSTB\") !== -1);\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Base {\n\n    static defaultSetter(obj, name, value) {\n        obj[name] = value;\n    }\n\n    static patchObject(obj, settings) {\n        if (!Utils.isObjectLiteral(settings)) {\n            console.error(\"[Lightning] Settings must be object literal\");\n        } else {\n            let names = Object.keys(settings);\n            for (let i = 0, n = names.length; i < n; i++) {\n                let name = names[i];\n\n                this.patchObjectProperty(obj, name, settings[name]);\n            }\n        }\n    }\n\n    static patchObjectProperty(obj, name, value) {\n        let setter = obj.setSetting || Base.defaultSetter;\n\n        if (name.charAt(0) === \"_\") {\n            // Disallow patching private variables.\n            if (name !== \"__create\") {\n                console.error(\"[Lightning] Patch of private property '\" + name + \"' is not allowed\");\n            }\n        } else if (name !== \"type\") {\n            // Type is a reserved keyword to specify the class type on creation.\n            if (Utils.isFunction(value) && value.__local) {\n                // Local function (Base.local(s => s.something))\n                value = value.__local(obj);\n            }\n\n            setter(obj, name, value);\n        }\n    }\n\n    static local(func) {\n        // This function can be used as an object setting, which is called with the target object.\n        func.__local = true;\n    }\n\n\n}\n\nimport Utils from \"./Utils.mjs\";\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class SpacingCalculator {\n\n    static getSpacing(mode, numberOfItems, remainingSpace) {\n        const itemGaps = (numberOfItems - 1);\n        let spacePerGap;\n\n        let spacingBefore, spacingBetween;\n\n        switch(mode) {\n            case \"flex-start\":\n                spacingBefore = 0;\n                spacingBetween = 0;\n                break;\n            case \"flex-end\":\n                spacingBefore = remainingSpace;\n                spacingBetween = 0;\n                break;\n            case \"center\":\n                spacingBefore = remainingSpace / 2;\n                spacingBetween = 0;\n                break;\n            case \"space-between\":\n                spacingBefore = 0;\n                spacingBetween = Math.max(0, remainingSpace) / itemGaps;\n                break;\n            case \"space-around\":\n                if (remainingSpace < 0) {\n                    return this.getSpacing(\"center\", numberOfItems, remainingSpace);\n                } else {\n                    spacePerGap = remainingSpace / (itemGaps + 1);\n                    spacingBefore = 0.5 * spacePerGap;\n                    spacingBetween = spacePerGap;\n                }\n                break;\n            case \"space-evenly\":\n                if (remainingSpace < 0) {\n                    return this.getSpacing(\"center\", numberOfItems, remainingSpace);\n                } else {\n                    spacePerGap = remainingSpace / (itemGaps + 2);\n                    spacingBefore = spacePerGap;\n                    spacingBetween = spacePerGap;\n                }\n                break;\n            case \"stretch\":\n                spacingBefore = 0;\n                spacingBetween = 0;\n                break;\n            default:\n                throw new Error(\"Unknown mode: \" + mode);\n        }\n\n        return {spacingBefore, spacingBetween}\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SpacingCalculator from \"./SpacingCalculator.mjs\";\n\nexport default class ContentAligner {\n\n    constructor(layout) {\n        this._layout = layout;\n        this._totalCrossAxisSize = 0;\n    }\n\n    get _lines() {\n        return this._layout._lines;\n    }\n\n    init() {\n        this._totalCrossAxisSize = this._getTotalCrossAxisSize();\n    }\n\n    align() {\n        const crossAxisSize = this._layout.crossAxisSize;\n        const remainingSpace = crossAxisSize - this._totalCrossAxisSize;\n\n        const {spacingBefore, spacingBetween} = this._getSpacing(remainingSpace);\n\n        const lines = this._lines;\n\n        const mode = this._layout._flexContainer.alignContent;\n        let growSize = 0;\n        if (mode === \"stretch\" && lines.length && (remainingSpace > 0)) {\n            growSize = remainingSpace / lines.length;\n        }\n\n        let currentPos = spacingBefore;\n        for (let i = 0, n = lines.length; i < n; i++) {\n            const crossAxisLayoutOffset = currentPos;\n            const aligner = lines[i].createItemAligner();\n\n            let finalCrossAxisLayoutSize = lines[i].crossAxisLayoutSize + growSize;\n\n            aligner.setCrossAxisLayoutSize(finalCrossAxisLayoutSize);\n            aligner.setCrossAxisLayoutOffset(crossAxisLayoutOffset);\n\n            aligner.align();\n\n            if (aligner.recursiveResizeOccured) {\n                lines[i].setItemPositions();\n            }\n\n            currentPos += finalCrossAxisLayoutSize;\n            currentPos += spacingBetween;\n        }\n    }\n\n    get totalCrossAxisSize() {\n        return this._totalCrossAxisSize;\n    }\n\n    _getTotalCrossAxisSize() {\n        const lines = this._lines;\n        let total = 0;\n        for (let i = 0, n = lines.length; i < n; i++) {\n            const line = lines[i];\n            total += line.crossAxisLayoutSize;\n        }\n        return total;\n    }\n\n    _getSpacing(remainingSpace) {\n        const mode = this._layout._flexContainer.alignContent;\n        const numberOfItems = this._lines.length;\n        return SpacingCalculator.getSpacing(mode, numberOfItems, remainingSpace);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class FlexUtils {\n\n    static getParentAxisSizeWithPadding(item, horizontal) {\n        const target = item.target;\n        const parent = target.getParent();\n        if (!parent) {\n            return 0;\n        } else {\n            const flexParent = item.flexParent;\n            if (flexParent) {\n                // Use pending layout size.\n                return this.getAxisLayoutSize(flexParent, horizontal) + this.getTotalPadding(flexParent, horizontal);\n            } else {\n                // Use 'absolute' size.\n                return horizontal ? parent.w : parent.h;\n            }\n        }\n    }\n\n    static getRelAxisSize(item, horizontal) {\n        if (horizontal) {\n            if (item.funcW) {\n                if (this._allowRelAxisSizeFunction(item, true)) {\n                    return item.funcW(this.getParentAxisSizeWithPadding(item, true));\n                } else {\n                    return 0;\n                }\n            } else {\n                return item.originalWidth;\n            }\n        } else {\n            if (item.funcH) {\n                if (this._allowRelAxisSizeFunction(item, false)) {\n                    return item.funcH(this.getParentAxisSizeWithPadding(item, false));\n                } else {\n                    return 0;\n                }\n            } else {\n                return item.originalHeight;\n            }\n        }\n    }\n\n    static _allowRelAxisSizeFunction(item, horizontal) {\n        const flexParent = item.flexParent;\n        if (flexParent && flexParent._flex._layout.isAxisFitToContents(horizontal)) {\n            // We don't allow relative width on fit-to-contents because it leads to conflicts.\n            return false;\n        }\n        return true;\n    }\n\n    static isZeroAxisSize(item, horizontal) {\n        if (horizontal) {\n            return !item.originalWidth && !item.funcW;\n        } else {\n            return !item.originalHeight && !item.funcH;\n        }\n    }\n\n    static getAxisLayoutPos(item, horizontal) {\n        return horizontal ? item.x : item.y;\n    }\n\n    static getAxisLayoutSize(item, horizontal) {\n        return horizontal ? item.w : item.h;\n    }\n\n    static setAxisLayoutPos(item, horizontal, pos) {\n        if (horizontal) {\n            item.x = pos;\n        } else {\n            item.y = pos;\n        }\n    }\n\n    static setAxisLayoutSize(item, horizontal, size) {\n        if (horizontal) {\n            item.w = size;\n        } else {\n            item.h = size;\n        }\n    }\n\n    static getAxisMinSize(item, horizontal) {\n        let minSize = this.getPlainAxisMinSize(item, horizontal);\n\n        let flexItemMinSize = 0;\n        if (item.isFlexItemEnabled()) {\n            flexItemMinSize = item._flexItem._getMinSizeSetting(horizontal);\n        }\n\n        const hasLimitedMinSize = (flexItemMinSize > 0);\n        if (hasLimitedMinSize) {\n            minSize = Math.max(minSize, flexItemMinSize);\n        }\n        return minSize;\n    }\n\n    static getPlainAxisMinSize(item, horizontal) {\n        if (item.isFlexEnabled()) {\n            return item._flex._layout.getAxisMinSize(horizontal);\n        } else {\n            const isShrinkable = (item.flexItem.shrink !== 0);\n            if (isShrinkable) {\n                return 0;\n            } else {\n                return this.getRelAxisSize(item, horizontal);\n            }\n        }\n    }\n\n    static resizeAxis(item, horizontal, size) {\n        if (item.isFlexEnabled()) {\n            const isMainAxis = (item._flex._horizontal === horizontal);\n            if (isMainAxis) {\n                item._flex._layout.resizeMainAxis(size);\n            } else {\n                item._flex._layout.resizeCrossAxis(size);\n            }\n        } else {\n            this.setAxisLayoutSize(item, horizontal, size);\n        }\n    }\n\n\n    static getPaddingOffset(item, horizontal) {\n        if (item.isFlexEnabled()) {\n            const flex = item._flex;\n            if (horizontal) {\n                return flex.paddingLeft;\n            } else {\n                return flex.paddingTop;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    static getTotalPadding(item, horizontal) {\n        if (item.isFlexEnabled()) {\n            const flex = item._flex;\n            if (horizontal) {\n                return flex.paddingRight + flex.paddingLeft;\n            } else {\n                return flex.paddingTop + flex.paddingBottom;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    static getMarginOffset(item, horizontal) {\n        const flexItem = item.flexItem;\n        if (flexItem) {\n            if (horizontal) {\n                return flexItem.marginLeft;\n            } else {\n                return flexItem.marginTop;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    static getTotalMargin(item, horizontal) {\n        const flexItem = item.flexItem;\n        if (flexItem) {\n            if (horizontal) {\n                return flexItem.marginRight + flexItem.marginLeft;\n            } else {\n                return flexItem.marginTop + flexItem.marginBottom;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class SizeShrinker {\n\n    constructor(line) {\n        this._line = line;\n        this._amountRemaining = 0;\n        this._shrunkSize = 0;\n    }\n\n    shrink(amount) {\n        this._shrunkSize = 0;\n\n        this._amountRemaining = amount;\n        let totalShrinkAmount = this._getTotalShrinkAmount();\n        if (totalShrinkAmount) {\n            const items = this._line.items;\n            do {\n                let amountPerShrink = this._amountRemaining / totalShrinkAmount;\n                for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n                    const item = items[i];\n                    const flexItem = item.flexItem;\n                    const shrinkAmount = flexItem.shrink;\n                    const isShrinkableItem = (shrinkAmount > 0);\n                    if (isShrinkableItem) {\n                        let shrink = shrinkAmount * amountPerShrink;\n                        const minSize = flexItem._getMainAxisMinSize();\n                        const size = flexItem._getMainAxisLayoutSize();\n                        if (size > minSize) {\n                            const maxShrink = size - minSize;\n                            const isFullyShrunk = (shrink >= maxShrink);\n                            if (isFullyShrunk) {\n                                shrink = maxShrink;\n\n                                // Destribute remaining amount over the other flex items.\n                                totalShrinkAmount -= shrinkAmount;\n                            }\n\n                            const finalSize = size - shrink;\n                            flexItem._resizeMainAxis(finalSize);\n\n                            this._shrunkSize += shrink;\n                            this._amountRemaining -= shrink;\n\n                            if (Math.abs(this._amountRemaining) < 10e-6) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } while(totalShrinkAmount && (Math.abs(this._amountRemaining) > 10e-6));\n        }\n    }\n\n    _getTotalShrinkAmount() {\n        let total = 0;\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n            const flexItem = item.flexItem;\n\n            if (flexItem.shrink) {\n                const minSize = flexItem._getMainAxisMinSize();\n                const size = flexItem._getMainAxisLayoutSize();\n\n                // Exclude those already fully shrunk.\n                if (size > minSize) {\n                    total += flexItem.shrink;\n                }\n            }\n        }\n        return total;\n    }\n\n    getShrunkSize() {\n        return this._shrunkSize;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class SizeGrower {\n\n    constructor(line) {\n        this._line = line;\n        this._amountRemaining = 0;\n        this._grownSize = 0;\n    }\n\n    grow(amount) {\n        this._grownSize = 0;\n\n        this._amountRemaining = amount;\n        let totalGrowAmount = this._getTotalGrowAmount();\n        if (totalGrowAmount) {\n            const items = this._line.items;\n            do {\n                let amountPerGrow = this._amountRemaining / totalGrowAmount;\n                for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n                    const item = items[i];\n                    const flexItem = item.flexItem;\n                    const growAmount = flexItem.grow;\n                    const isGrowableItem = (growAmount > 0);\n                    if (isGrowableItem) {\n                        let grow = growAmount * amountPerGrow;\n                        const maxSize = flexItem._getMainAxisMaxSizeSetting();\n                        const size = flexItem._getMainAxisLayoutSize();\n                        if (maxSize > 0) {\n                            if (size >= maxSize) {\n                                // Already fully grown.\n                                grow = 0;\n                            } else {\n                                const maxGrow = maxSize - size;\n                                const isFullyGrown = (grow >= maxGrow);\n                                if (isFullyGrown) {\n                                    grow = maxGrow;\n\n                                    // Destribute remaining amount over the other flex items.\n                                    totalGrowAmount -= growAmount;\n                                }\n                            }\n                        }\n\n                        if (grow > 0) {\n                            const finalSize = size + grow;\n                            flexItem._resizeMainAxis(finalSize);\n\n                            this._grownSize += grow;\n                            this._amountRemaining -= grow;\n\n                            if (Math.abs(this._amountRemaining) < 10e-6) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } while(totalGrowAmount && (Math.abs(this._amountRemaining) > 10e-6));\n        }\n    }\n\n    _getTotalGrowAmount() {\n        let total = 0;\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n            const flexItem = item.flexItem;\n\n            if (flexItem.grow) {\n                const maxSize = flexItem._getMainAxisMaxSizeSetting();\n                const size = flexItem._getMainAxisLayoutSize();\n\n                // Exclude those already fully grown.\n                if (maxSize === 0 || size < maxSize) {\n                    total += flexItem.grow;\n                }\n            }\n        }\n        return total;\n    }\n\n    getGrownSize() {\n        return this._grownSize;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SpacingCalculator from \"../SpacingCalculator.mjs\";\n\nexport default class ItemPositioner {\n\n    constructor(lineLayout) {\n        this._line = lineLayout;\n    }\n\n    get _layout() {\n        return this._line._layout;\n    }\n\n    position() {\n        const {spacingBefore, spacingBetween} = this._getSpacing();\n\n        let currentPos = spacingBefore;\n\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n\n            item.flexItem._setMainAxisLayoutPos(currentPos);\n            currentPos += item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin();\n            currentPos += spacingBetween;\n        }\n    }\n\n    _getSpacing() {\n        const remainingSpace = this._line._availableSpace;\n        let mode = this._layout._flexContainer.justifyContent;\n        const numberOfItems = this._line.numberOfItems;\n\n        return SpacingCalculator.getSpacing(mode, numberOfItems, remainingSpace);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class ItemAligner {\n\n    constructor(line) {\n        this._line = line;\n        this._crossAxisLayoutSize = 0;\n        this._crossAxisLayoutOffset = 0;\n        this._alignItemsSetting = null;\n        this._recursiveResizeOccured = false;\n        this._isCrossAxisFitToContents = false;\n    }\n\n    get _layout() {\n        return this._line._layout;\n    }\n\n    get _flexContainer() {\n        return this._layout._flexContainer;\n    }\n\n    setCrossAxisLayoutSize(size) {\n        this._crossAxisLayoutSize = size;\n    }\n\n    setCrossAxisLayoutOffset(offset) {\n        this._crossAxisLayoutOffset = offset;\n    }\n\n    align() {\n        this._alignItemsSetting = this._flexContainer.alignItems;\n\n        this._isCrossAxisFitToContents = this._layout.isAxisFitToContents(!this._flexContainer._horizontal);\n\n        this._recursiveResizeOccured = false;\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n            this._alignItem(item);\n        }\n    }\n\n    get recursiveResizeOccured() {\n        return this._recursiveResizeOccured;\n    }\n\n    _alignItem(item) {\n        const flexItem = item.flexItem;\n        let align = flexItem.alignSelf || this._alignItemsSetting;\n\n        if (align === \"stretch\" && this._preventStretch(flexItem)) {\n            align = \"flex-start\";\n        }\n\n        if (align !== \"stretch\" && !this._isCrossAxisFitToContents) {\n            if (flexItem._hasRelCrossAxisSize()) {\n                // As cross axis size might have changed, we need to recalc the relative flex item's size.\n                flexItem._resetCrossAxisLayoutSize();\n            }\n        }\n\n        switch(align) {\n            case \"flex-start\":\n                this._alignItemFlexStart(flexItem);\n                break;\n            case \"flex-end\":\n                this._alignItemFlexEnd(flexItem);\n                break;\n            case \"center\":\n                this._alignItemFlexCenter(flexItem);\n                break;\n            case \"stretch\":\n                this._alignItemStretch(flexItem);\n                break;\n        }\n    }\n\n    _alignItemFlexStart(flexItem) {\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset);\n    }\n\n    _alignItemFlexEnd(flexItem) {\n        const itemCrossAxisSize = flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin();\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset + (this._crossAxisLayoutSize - itemCrossAxisSize));\n    }\n\n    _alignItemFlexCenter(flexItem) {\n        const itemCrossAxisSize = flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin();\n        const center = (this._crossAxisLayoutSize - itemCrossAxisSize) / 2;\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset + center);\n    }\n\n    _alignItemStretch(flexItem) {\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset);\n\n        const mainAxisLayoutSizeBeforeResize = flexItem._getMainAxisLayoutSize();\n        let size = this._crossAxisLayoutSize - flexItem._getCrossAxisMargin() - flexItem._getCrossAxisPadding();\n\n        const crossAxisMinSizeSetting = flexItem._getCrossAxisMinSizeSetting();\n        if (crossAxisMinSizeSetting > 0) {\n            size = Math.max(size, crossAxisMinSizeSetting);\n        }\n\n        const crossAxisMaxSizeSetting = flexItem._getCrossAxisMaxSizeSetting();\n        const crossAxisMaxSizeSettingEnabled = (crossAxisMaxSizeSetting > 0);\n        if (crossAxisMaxSizeSettingEnabled) {\n            size = Math.min(size, crossAxisMaxSizeSetting);\n        }\n\n        flexItem._resizeCrossAxis(size);\n        const mainAxisLayoutSizeAfterResize = flexItem._getMainAxisLayoutSize();\n\n        const recursiveResize = (mainAxisLayoutSizeAfterResize !== mainAxisLayoutSizeBeforeResize);\n        if (recursiveResize) {\n            // Recursive resize can happen when this flex item has the opposite direction than the container\n            // and is wrapping and auto-sizing. Due to item/content stretching the main axis size of the flex\n            // item may decrease. If it does so, we must re-justify-content the complete line.\n            // Notice that we don't account for changes to the (if autosized) main axis size caused by recursive\n            // resize, which may cause the container's main axis to not shrink to the contents properly.\n            // This is by design, because if we had re-run the main axis layout, we could run into issues such\n            // as slow layout or endless loops.\n            this._recursiveResizeOccured = true;\n        }\n    }\n\n    _preventStretch(flexItem) {\n        const hasFixedCrossAxisSize = flexItem._hasFixedCrossAxisSize();\n        const forceStretch = (flexItem.alignSelf === \"stretch\");\n        return hasFixedCrossAxisSize && !forceStretch;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SizeShrinker from \"./SizeShrinker.mjs\";\nimport SizeGrower from \"./SizeGrower.mjs\";\nimport ItemPositioner from \"./ItemPositioner.mjs\";\nimport ItemAligner from \"./ItemAligner.mjs\";\n\nexport default class LineLayout {\n\n    constructor(layout, startIndex, endIndex, availableSpace) {\n        this._layout = layout;\n        this.items = layout.items;\n        this.startIndex = startIndex;\n        this.endIndex = endIndex;\n        this._availableSpace = availableSpace;\n    }\n\n    performLayout() {\n        this._setItemSizes();\n        this.setItemPositions();\n        this._calcLayoutInfo();\n    }\n\n    _setItemSizes() {\n        if (this._availableSpace > 0) {\n            this._growItemSizes(this._availableSpace);\n        } else if (this._availableSpace < 0) {\n            this._shrinkItemSizes(-this._availableSpace);\n        }\n    }\n\n    _growItemSizes(amount) {\n        const grower = new SizeGrower(this);\n        grower.grow(amount);\n        this._availableSpace -= grower.getGrownSize();\n    }\n\n    _shrinkItemSizes(amount) {\n        const shrinker = new SizeShrinker(this);\n        shrinker.shrink(amount);\n        this._availableSpace += shrinker.getShrunkSize();\n    }\n\n    setItemPositions() {\n        const positioner = new ItemPositioner(this);\n        positioner.position();\n    }\n\n    createItemAligner() {\n        return new ItemAligner(this);\n    }\n\n    _calcLayoutInfo() {\n        this._calcCrossAxisMaxLayoutSize();\n    }\n\n    getMainAxisMinSize() {\n        let mainAxisMinSize = 0;\n        for (let i = this.startIndex; i <= this.endIndex; i++) {\n            const item = this.items[i];\n            mainAxisMinSize += item.flexItem._getMainAxisMinSizeWithPaddingAndMargin();\n        }\n        return mainAxisMinSize;\n    }\n    \n    get numberOfItems() {\n        return this.endIndex - this.startIndex + 1;\n    }\n\n    get crossAxisLayoutSize() {\n        const noSpecifiedCrossAxisSize = (this._layout.isCrossAxisFitToContents() && !this._layout.resizingCrossAxis);\n        const shouldFitToContents = (this._layout.isWrapping() || noSpecifiedCrossAxisSize);\n        if (shouldFitToContents) {\n            return this._crossAxisMaxLayoutSize;\n        } else {\n            return this._layout.crossAxisSize;\n        }\n    }\n\n    _calcCrossAxisMaxLayoutSize() {\n        this._crossAxisMaxLayoutSize = this._getCrossAxisMaxLayoutSize();\n    }\n\n    _getCrossAxisMaxLayoutSize() {\n        let crossAxisMaxSize = 0;\n        for (let i = this.startIndex; i <= this.endIndex; i++) {\n            const item = this.items[i];\n            crossAxisMaxSize = Math.max(crossAxisMaxSize, item.flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin());\n        }\n        return crossAxisMaxSize;\n    }\n\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport LineLayout from \"./line/LineLayout.mjs\";\n\n/**\n * Distributes items over layout lines.\n */\nexport default class LineLayouter {\n\n    constructor(layout) {\n        this._layout = layout;\n        this._mainAxisMinSize = -1;\n        this._crossAxisMinSize = -1;\n        this._mainAxisContentSize = 0;\n    }\n\n    get lines() {\n        return this._lines;\n    }\n\n    get mainAxisMinSize() {\n        if (this._mainAxisMinSize === -1) {\n            this._mainAxisMinSize = this._getMainAxisMinSize();\n        }\n        return this._mainAxisMinSize;\n    }\n\n    get crossAxisMinSize() {\n        if (this._crossAxisMinSize === -1) {\n            this._crossAxisMinSize = this._getCrossAxisMinSize();\n        }\n        return this._crossAxisMinSize;\n    }\n\n    get mainAxisContentSize() {\n        return this._mainAxisContentSize;\n    }\n\n    layoutLines() {\n        this._setup();\n        const items = this._layout.items;\n        const wrap = this._layout.isWrapping();\n\n        let startIndex = 0;\n        let i;\n        const n = items.length;\n        for (i = 0; i < n; i++) {\n            const item = items[i];\n\n            this._layoutFlexItem(item);\n\n            // Get predicted main axis size.\n            const itemMainAxisSize = item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin();\n\n            if (wrap && (i > startIndex)) {\n                const isOverflowing = (this._curMainAxisPos + itemMainAxisSize > this._mainAxisSize);\n                if (isOverflowing) {\n                    this._layoutLine(startIndex, i - 1);\n                    this._curMainAxisPos = 0;\n                    startIndex = i;\n                }\n            }\n\n            this._addToMainAxisPos(itemMainAxisSize);\n        }\n\n        if (startIndex < i) {\n            this._layoutLine(startIndex, i - 1);\n        }\n    }\n\n    _layoutFlexItem(item) {\n        if (item.isFlexEnabled()) {\n            item.flexLayout.updateTreeLayout();\n        } else {\n            item.flexItem._resetLayoutSize();\n        }\n    }\n\n    _setup() {\n        this._mainAxisSize = this._layout.mainAxisSize;\n        this._curMainAxisPos = 0;\n        this._maxMainAxisPos = 0;\n        this._lines = [];\n\n        this._mainAxisMinSize = -1;\n        this._crossAxisMinSize = -1;\n        this._mainAxisContentSize = 0;\n    }\n\n    _addToMainAxisPos(itemMainAxisSize) {\n        this._curMainAxisPos += itemMainAxisSize;\n        if (this._curMainAxisPos > this._maxMainAxisPos) {\n            this._maxMainAxisPos = this._curMainAxisPos;\n        }\n    }\n\n    _layoutLine(startIndex, endIndex) {\n        const availableSpace = this._getAvailableMainAxisLayoutSpace();\n        const line = new LineLayout(this._layout, startIndex, endIndex, availableSpace);\n        line.performLayout();\n        this._lines.push(line);\n\n        if (this._mainAxisContentSize === 0 || (this._curMainAxisPos > this._mainAxisContentSize)) {\n            this._mainAxisContentSize = this._curMainAxisPos;\n        }\n    }\n\n    _getAvailableMainAxisLayoutSpace() {\n        if (!this._layout.resizingMainAxis && this._layout.isMainAxisFitToContents()) {\n            return 0;\n        } else {\n            return this._mainAxisSize - this._curMainAxisPos;\n        }\n    }\n\n    _getCrossAxisMinSize() {\n        let crossAxisMinSize = 0;\n        const items = this._layout.items;\n        for (let i = 0, n = items.length; i < n; i++) {\n            const item = items[i];\n            const itemCrossAxisMinSize = item.flexItem._getCrossAxisMinSizeWithPaddingAndMargin();\n            crossAxisMinSize = Math.max(crossAxisMinSize, itemCrossAxisMinSize);\n        }\n        return crossAxisMinSize;\n    }\n\n    _getMainAxisMinSize() {\n        if (this._lines.length === 1) {\n            return this._lines[0].getMainAxisMinSize();\n        } else {\n            // Wrapping lines: specified width is used as min width (in accordance to W3C flexbox).\n            return this._layout.mainAxisSize;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FlexUtils from \"../FlexUtils.mjs\";\n\nexport default class ItemCoordinatesUpdater {\n\n    constructor(layout) {\n        this._layout = layout;\n        this._isReverse = this._flexContainer._reverse;\n        this._horizontalPaddingOffset = this._layout._getHorizontalPaddingOffset();\n        this._verticalPaddingOffset = this._layout._getVerticalPaddingOffset();\n    }\n\n    get _flexContainer() {\n        return this._layout._flexContainer;\n    }\n\n    finalize() {\n        const parentFlex = this._layout.getParentFlexContainer();\n        if (parentFlex) {\n            // We must update it from the parent to set padding offsets and reverse position.\n            const updater = new ItemCoordinatesUpdater(parentFlex._layout);\n            updater._finalizeItemAndChildren(this._flexContainer.item);\n        } else {\n            this._finalizeRoot();\n            this._finalizeItems();\n        }\n    }\n\n    _finalizeRoot() {\n        const item = this._flexContainer.item;\n        let x = FlexUtils.getAxisLayoutPos(item, true);\n        let y = FlexUtils.getAxisLayoutPos(item, false);\n        let w = FlexUtils.getAxisLayoutSize(item, true);\n        let h = FlexUtils.getAxisLayoutSize(item, false);\n\n        w += this._layout._getHorizontalPadding();\n        h += this._layout._getVerticalPadding();\n\n        item.clearRecalcFlag();\n\n        item.setLayout(x, y, w, h);\n    }\n\n    _finalizeItems() {\n        const items = this._layout.items;\n        for (let i = 0, n = items.length; i < n; i++) {\n            const item = items[i];\n            const validCache = this._validateItemCache(item);\n\n            // Notice that we must also finalize a cached items, as it's coordinates may have changed.\n            this._finalizeItem(item);\n\n            if (!validCache) {\n                this._finalizeItemChildren(item);\n            }\n        }\n    }\n\n    _validateItemCache(item) {\n        if (item.recalc === 0) {\n            if (item.isFlexEnabled()) {\n                const layout = item._flex._layout;\n\n                const dimensionsMatchPreviousResult = (item.w === item.target.w && item.h === item.target.h);\n                if (dimensionsMatchPreviousResult) {\n                    // Cache is valid.\n                    return true;\n                } else {\n                    const crossAxisSize = layout.crossAxisSize;\n                    layout.performResizeMainAxis(layout.mainAxisSize);\n                    layout.performResizeCrossAxis(crossAxisSize);\n                }\n            }\n        }\n        return false;\n    }\n\n    _finalizeItemAndChildren(item) {\n        this._finalizeItem(item);\n        this._finalizeItemChildren(item);\n    }\n\n    _finalizeItem(item) {\n        if (this._isReverse) {\n            this._reverseMainAxisLayoutPos(item);\n        }\n\n        let x = FlexUtils.getAxisLayoutPos(item, true);\n        let y = FlexUtils.getAxisLayoutPos(item, false);\n        let w = FlexUtils.getAxisLayoutSize(item, true);\n        let h = FlexUtils.getAxisLayoutSize(item, false);\n\n        x += this._horizontalPaddingOffset;\n        y += this._verticalPaddingOffset;\n\n        const flex = item.flex;\n        if (flex) {\n            w += item._flex._layout._getHorizontalPadding();\n            h += item._flex._layout._getVerticalPadding();\n        }\n\n        const flexItem = item.flexItem;\n        if (flexItem) {\n            x += flexItem._getHorizontalMarginOffset();\n            y += flexItem._getVerticalMarginOffset();\n        }\n\n        item.clearRecalcFlag();\n        item.setLayout(x, y, w, h);\n    }\n\n    _finalizeItemChildren(item) {\n        const flex = item._flex;\n        if (flex) {\n            const updater = new ItemCoordinatesUpdater(flex._layout);\n            updater._finalizeItems();\n        }\n    }\n\n    _reverseMainAxisLayoutPos(item) {\n        const endPos = (item.flexItem._getMainAxisLayoutPos() + item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin());\n        const reversedPos = this._layout.mainAxisSize - endPos;\n        item.flexItem._setMainAxisLayoutPos(reversedPos);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ContentAligner from \"./ContentAligner.mjs\";\nimport FlexUtils from \"../FlexUtils.mjs\";\nimport LineLayouter from \"./LineLayouter.mjs\";\nimport ItemCoordinatesUpdater from \"./ItemCoordinatesUpdater.mjs\";\n\n/**\n * Layouts a flex container (and descendants).\n */\nexport default class FlexLayout {\n\n    constructor(flexContainer) {\n        this._flexContainer = flexContainer;\n\n        this._lineLayouter = new LineLayouter(this);\n\n        this._resizingMainAxis = false;\n        this._resizingCrossAxis = false;\n\n        this._cachedMainAxisSizeAfterLayout = 0;\n        this._cachedCrossAxisSizeAfterLayout = 0;\n\n        this._shrunk = false;\n    }\n\n    get shrunk() {\n        return this._shrunk;\n    }\n\n    get recalc() {\n        return this.item.recalc;\n    }\n\n    layoutTree() {\n        const isSubTree = (this.item.flexParent !== null);\n        if (isSubTree) {\n            // Use the dimensions set by the parent flex tree.\n            this._updateSubTreeLayout();\n        } else {\n            this.updateTreeLayout();\n        }\n        this.updateItemCoords();\n    }\n\n    updateTreeLayout() {\n        if (this.recalc) {\n            this._performUpdateLayoutTree();\n        } else {\n            this._performUpdateLayoutTreeFromCache();\n        }\n    }\n\n    _performUpdateLayoutTree() {\n        this._setInitialAxisSizes();\n        this._layoutAxes();\n        this._refreshLayoutCache();\n    }\n\n    _refreshLayoutCache() {\n        this._cachedMainAxisSizeAfterLayout = this.mainAxisSize;\n        this._cachedCrossAxisSizeAfterLayout = this.crossAxisSize;\n    }\n\n    _performUpdateLayoutTreeFromCache() {\n        const sizeMightHaveChanged = (this.item.funcW || this.item.funcH);\n        if (sizeMightHaveChanged) {\n            // Update after all.\n            this.item.enableLocalRecalcFlag();\n            this._performUpdateLayoutTree();\n        } else {\n            this.mainAxisSize = this._cachedMainAxisSizeAfterLayout;\n            this.crossAxisSize = this._cachedCrossAxisSizeAfterLayout;\n        }\n    }\n\n    updateItemCoords() {\n        const updater = new ItemCoordinatesUpdater(this);\n        updater.finalize();\n    }\n\n    _updateSubTreeLayout() {\n        // The dimensions of this container are guaranteed not to have changed.\n        // That's why we can safely 'reuse' those and re-layout the contents.\n        const crossAxisSize = this.crossAxisSize;\n        this._layoutMainAxis();\n        this.performResizeCrossAxis(crossAxisSize);\n    }\n\n    _setInitialAxisSizes() {\n        if (this.item.isFlexItemEnabled()) {\n            this.item.flexItem._resetLayoutSize();\n        } else {\n            this.mainAxisSize = this._getMainAxisBasis();\n            this.crossAxisSize = this._getCrossAxisBasis();\n        }\n        this._resizingMainAxis = false;\n        this._resizingCrossAxis = false;\n        this._shrunk = false;\n    }\n\n    _layoutAxes() {\n        this._layoutMainAxis();\n        this._layoutCrossAxis();\n    }\n\n    /**\n     * @pre mainAxisSize should exclude padding.\n     */\n    _layoutMainAxis() {\n        this._layoutLines();\n        this._fitMainAxisSizeToContents();\n    }\n\n    _layoutLines() {\n        this._lineLayouter.layoutLines();\n    }\n\n    get _lines() {\n        return this._lineLayouter.lines;\n    }\n\n    _fitMainAxisSizeToContents() {\n        if (!this._resizingMainAxis) {\n            if (this.isMainAxisFitToContents()) {\n                this.mainAxisSize = this._lineLayouter.mainAxisContentSize;\n            }\n        }\n    }\n\n    /**\n     * @pre crossAxisSize should exclude padding.\n     */\n    _layoutCrossAxis() {\n        const aligner = new ContentAligner(this);\n        aligner.init();\n        this._totalCrossAxisSize = aligner.totalCrossAxisSize;\n        this._fitCrossAxisSizeToContents();\n        aligner.align();\n    }\n\n    _fitCrossAxisSizeToContents() {\n        if (!this._resizingCrossAxis) {\n            if (this.isCrossAxisFitToContents()) {\n                this.crossAxisSize = this._totalCrossAxisSize;\n            }\n        }\n    }\n\n    isWrapping() {\n        return this._flexContainer.wrap;\n    }\n\n    isAxisFitToContents(horizontal) {\n        if (this._horizontal === horizontal) {\n            return this.isMainAxisFitToContents();\n        } else {\n            return this.isCrossAxisFitToContents();\n        }\n    }\n\n    isMainAxisFitToContents() {\n        return !this.isWrapping() && !this._hasFixedMainAxisBasis();\n    }\n\n    isCrossAxisFitToContents() {\n        return !this._hasFixedCrossAxisBasis();\n    }\n\n    _hasFixedMainAxisBasis() {\n        return !FlexUtils.isZeroAxisSize(this.item, this._horizontal);\n    }\n\n    _hasFixedCrossAxisBasis() {\n        return !FlexUtils.isZeroAxisSize(this.item, !this._horizontal);\n    }\n\n    getAxisMinSize(horizontal) {\n        if (this._horizontal === horizontal) {\n            return this._getMainAxisMinSize();\n        } else {\n            return this._getCrossAxisMinSize();\n        }\n    }\n\n    _getMainAxisMinSize() {\n        return this._lineLayouter.mainAxisMinSize;\n    }\n\n    _getCrossAxisMinSize() {\n        return this._lineLayouter.crossAxisMinSize;\n    }\n\n    resizeMainAxis(size) {\n        if (this.mainAxisSize !== size) {\n            if (this.recalc > 0) {\n                this.performResizeMainAxis(size);\n            } else {\n                if (this._checkValidCacheMainAxisResize()) {\n                    this.mainAxisSize = size;\n                    this._fitCrossAxisSizeToContents();\n                } else {\n                    // Cache miss.\n                    this.item.enableLocalRecalcFlag();\n                    this.performResizeMainAxis(size);\n                }\n            }\n        }\n    }\n\n    _checkValidCacheMainAxisResize(size) {\n        const isFinalMainAxisSize = (size === this.targetMainAxisSize);\n        if (isFinalMainAxisSize) {\n            return true;\n        }\n        const canIgnoreCacheMiss = !this.isCrossAxisFitToContents();\n        if (canIgnoreCacheMiss) {\n            // Allow other main axis resizes and check if final resize matches the target main axis size\n            //  (ItemCoordinatesUpdater).\n            return true;\n        }\n        return false;\n    }\n\n    performResizeMainAxis(size) {\n        const isShrinking = (size < this.mainAxisSize);\n        this._shrunk = isShrinking;\n\n        this.mainAxisSize = size;\n\n        this._resizingMainAxis = true;\n        this._layoutAxes();\n        this._resizingMainAxis = false;\n    }\n\n    resizeCrossAxis(size) {\n        if (this.crossAxisSize !== size) {\n            if (this.recalc > 0) {\n                this.performResizeCrossAxis(size);\n            } else {\n                this.crossAxisSize = size;\n            }\n        }\n    }\n\n    performResizeCrossAxis(size) {\n        this.crossAxisSize = size;\n\n        this._resizingCrossAxis = true;\n        this._layoutCrossAxis();\n        this._resizingCrossAxis = false;\n    }\n\n    get targetMainAxisSize() {\n        return this._horizontal ? this.item.target.w : this.item.target.h;\n    }\n\n    get targetCrossAxisSize() {\n        return this._horizontal ? this.item.target.h : this.item.target.w;\n    }\n\n    getParentFlexContainer() {\n        return this.item.isFlexItemEnabled() ? this.item.flexItem.ctr : null;\n    }\n\n    _getHorizontalPadding() {\n        return FlexUtils.getTotalPadding(this.item, true);\n    }\n\n    _getVerticalPadding() {\n        return FlexUtils.getTotalPadding(this.item, false);\n    }\n\n    _getHorizontalPaddingOffset() {\n        return FlexUtils.getPaddingOffset(this.item, true);\n    }\n\n    _getVerticalPaddingOffset() {\n        return FlexUtils.getPaddingOffset(this.item, false);\n    }\n\n    _getMainAxisBasis() {\n        return FlexUtils.getRelAxisSize(this.item, this._horizontal);\n    }\n\n    _getCrossAxisBasis() {\n        return FlexUtils.getRelAxisSize(this.item, !this._horizontal);\n    }\n\n    get _horizontal() {\n        return this._flexContainer._horizontal;\n    }\n\n    get _reverse() {\n        return this._flexContainer._reverse;\n    }\n\n    get item() {\n        return this._flexContainer.item;\n    }\n\n    get items() {\n        return this.item.items;\n    }\n\n    get resizingMainAxis() {\n        return this._resizingMainAxis;\n    }\n\n    get resizingCrossAxis() {\n        return this._resizingCrossAxis;\n    }\n\n    get numberOfItems() {\n        return this.items.length;\n    }\n\n    get mainAxisSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, this._horizontal);\n    }\n\n    get crossAxisSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, !this._horizontal);\n    }\n\n    set mainAxisSize(v) {\n        FlexUtils.setAxisLayoutSize(this.item, this._horizontal, v);\n    }\n\n    set crossAxisSize(v) {\n        FlexUtils.setAxisLayoutSize(this.item, !this._horizontal, v);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Base from \"../tree/Base.mjs\";\nimport Layout from \"./layout/FlexLayout.mjs\";\n\nexport default class FlexContainer {\n\n\n    constructor(item) {\n        this._item = item;\n\n        this._layout = new Layout(this);\n        this._horizontal = true;\n        this._reverse = false;\n        this._wrap = false;\n        this._alignItems = 'stretch';\n        this._justifyContent = 'flex-start';\n        this._alignContent = 'flex-start';\n\n        this._paddingLeft = 0;\n        this._paddingTop = 0;\n        this._paddingRight = 0;\n        this._paddingBottom = 0;\n    }\n\n    get item() {\n        return this._item;\n    }\n\n    _changedDimensions() {\n        this._item.changedDimensions();\n    }\n\n    _changedContents() {\n        this._item.changedContents();\n    }\n\n    get direction() {\n        return (this._horizontal ? \"row\" : \"column\") + (this._reverse ? \"-reverse\" : \"\");\n    }\n\n    set direction(f) {\n        if (this.direction === f) return;\n\n        this._horizontal = (f === 'row' || f === 'row-reverse');\n        this._reverse = (f === 'row-reverse' || f === 'column-reverse');\n\n        this._changedContents();\n    }\n\n    set wrap(v) {\n        this._wrap = v;\n        this._changedContents();\n    }\n\n    get wrap() {\n        return this._wrap;\n    }\n\n    get alignItems() {\n        return this._alignItems;\n    }\n\n    set alignItems(v) {\n        if (this._alignItems === v) return;\n        if (FlexContainer.ALIGN_ITEMS.indexOf(v) === -1) {\n            throw new Error(\"Unknown alignItems, options: \" + FlexContainer.ALIGN_ITEMS.join(\",\"));\n        }\n        this._alignItems = v;\n\n        this._changedContents();\n    }\n\n    get alignContent() {\n        return this._alignContent;\n    }\n\n    set alignContent(v) {\n        if (this._alignContent === v) return;\n        if (FlexContainer.ALIGN_CONTENT.indexOf(v) === -1) {\n            throw new Error(\"Unknown alignContent, options: \" + FlexContainer.ALIGN_CONTENT.join(\",\"));\n        }\n        this._alignContent = v;\n\n        this._changedContents();\n    }\n\n    get justifyContent() {\n        return this._justifyContent;\n    }\n\n    set justifyContent(v) {\n        if (this._justifyContent === v) return;\n\n        if (FlexContainer.JUSTIFY_CONTENT.indexOf(v) === -1) {\n            throw new Error(\"Unknown justifyContent, options: \" + FlexContainer.JUSTIFY_CONTENT.join(\",\"));\n        }\n        this._justifyContent = v;\n\n        this._changedContents();\n    }\n\n    set padding(v) {\n        this.paddingLeft = v;\n        this.paddingTop = v;\n        this.paddingRight = v;\n        this.paddingBottom = v;\n    }\n\n    get padding() {\n        return this.paddingLeft;\n    }\n    \n    set paddingLeft(v) {\n        this._paddingLeft = v;\n        this._changedDimensions();\n    }\n    \n    get paddingLeft() {\n        return this._paddingLeft;\n    }\n\n    set paddingTop(v) {\n        this._paddingTop = v;\n        this._changedDimensions();\n    }\n\n    get paddingTop() {\n        return this._paddingTop;\n    }\n\n    set paddingRight(v) {\n        this._paddingRight = v;\n        this._changedDimensions();\n    }\n\n    get paddingRight() {\n        return this._paddingRight;\n    }\n\n    set paddingBottom(v) {\n        this._paddingBottom = v;\n        this._changedDimensions();\n    }\n\n    get paddingBottom() {\n        return this._paddingBottom;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n}\n\nFlexContainer.ALIGN_ITEMS = [\"flex-start\", \"flex-end\", \"center\", \"stretch\"];\nFlexContainer.ALIGN_CONTENT = [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"space-evenly\", \"stretch\"];\nFlexContainer.JUSTIFY_CONTENT = [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"space-evenly\"];\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Base from \"../tree/Base.mjs\";\nimport FlexUtils from \"./FlexUtils.mjs\";\nimport FlexContainer from \"./FlexContainer.mjs\";\n\nexport default class FlexItem {\n\n    constructor(item) {\n        this._ctr = null;\n        this._item = item;\n        this._grow = 0;\n        this._shrink = FlexItem.SHRINK_AUTO;\n        this._alignSelf = undefined;\n        this._minWidth = 0;\n        this._minHeight = 0;\n        this._maxWidth = 0;\n        this._maxHeight = 0;\n\n        this._marginLeft = 0;\n        this._marginTop = 0;\n        this._marginRight = 0;\n        this._marginBottom = 0;\n    }\n\n    get item() {\n        return this._item;\n    }\n\n    get grow() {\n        return this._grow;\n    }\n\n    set grow(v) {\n        if (this._grow === v) return;\n\n        this._grow = parseInt(v) || 0;\n\n        this._changed();\n    }\n\n    get shrink() {\n        if (this._shrink === FlexItem.SHRINK_AUTO) {\n            return this._getDefaultShrink();\n        }\n        return this._shrink;\n    }\n\n    _getDefaultShrink() {\n        if (this.item.isFlexEnabled()) {\n            return 1;\n        } else {\n            // All non-flex containers are absolutely positioned items with fixed dimensions, and by default not shrinkable.\n            return 0;\n        }\n    }\n\n    set shrink(v) {\n        if (this._shrink === v) return;\n\n        this._shrink = parseInt(v) || 0;\n\n        this._changed();\n    }\n\n    get alignSelf() {\n        return this._alignSelf;\n    }\n\n    set alignSelf(v) {\n        if (this._alignSelf === v) return;\n\n        if (v === undefined) {\n            this._alignSelf = undefined;\n        } else {\n            if (FlexContainer.ALIGN_ITEMS.indexOf(v) === -1) {\n                throw new Error(\"Unknown alignSelf, options: \" + FlexContainer.ALIGN_ITEMS.join(\",\"));\n            }\n            this._alignSelf = v;\n        }\n\n        this._changed();\n    }\n\n    get minWidth() {\n        return this._minWidth;\n    }\n\n    set minWidth(v) {\n        this._minWidth = Math.max(0, v);\n        this._item.changedDimensions(true, false);\n    }\n\n    get minHeight() {\n        return this._minHeight;\n    }\n\n    set minHeight(v) {\n        this._minHeight = Math.max(0, v);\n        this._item.changedDimensions(false, true);\n    }\n\n    get maxWidth() {\n        return this._maxWidth;\n    }\n\n    set maxWidth(v) {\n        this._maxWidth = Math.max(0, v);\n        this._item.changedDimensions(true, false);\n    }\n\n    get maxHeight() {\n        return this._maxHeight;\n    }\n\n    set maxHeight(v) {\n        this._maxHeight = Math.max(0, v);\n        this._item.changedDimensions(false, true);\n    }\n\n    /**\n     * @note margins behave slightly different than in HTML with regard to shrinking.\n     * In HTML, (outer) margins can be removed when shrinking. In this engine, they will not shrink at all.\n     */\n    set margin(v) {\n        this.marginLeft = v;\n        this.marginTop = v;\n        this.marginRight = v;\n        this.marginBottom = v;\n    }\n\n    get margin() {\n        return this.marginLeft;\n    }\n\n    set marginLeft(v) {\n        this._marginLeft = v;\n        this._changed();\n    }\n\n    get marginLeft() {\n        return this._marginLeft;\n    }\n\n    set marginTop(v) {\n        this._marginTop = v;\n        this._changed();\n    }\n\n    get marginTop() {\n        return this._marginTop;\n    }\n\n    set marginRight(v) {\n        this._marginRight = v;\n        this._changed();\n    }\n\n    get marginRight() {\n        return this._marginRight;\n    }\n\n    set marginBottom(v) {\n        this._marginBottom = v;\n        this._changed();\n    }\n\n    get marginBottom() {\n        return this._marginBottom;\n    }\n    \n    _changed() {\n        if (this.ctr) this.ctr._changedContents();\n    }\n\n    set ctr(v) {\n        this._ctr = v;\n    }\n\n    get ctr() {\n        return this._ctr;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n    _resetLayoutSize() {\n        this._resetHorizontalAxisLayoutSize();\n        this._resetVerticalAxisLayoutSize();\n    }\n\n    _resetCrossAxisLayoutSize() {\n        if (this.ctr._horizontal) {\n            this._resetVerticalAxisLayoutSize();\n        } else {\n            this._resetHorizontalAxisLayoutSize();\n        }\n    }\n\n    _resetHorizontalAxisLayoutSize() {\n        let w = FlexUtils.getRelAxisSize(this.item, true);\n        if (this._minWidth) {\n            w = Math.max(this._minWidth, w);\n        }\n        if (this._maxWidth) {\n            w = Math.min(this._maxWidth, w);\n        }\n        FlexUtils.setAxisLayoutSize(this.item, true, w);\n    }\n\n    _resetVerticalAxisLayoutSize() {\n        let h = FlexUtils.getRelAxisSize(this.item, false);\n        if (this._minHeight) {\n            h = Math.max(this._minHeight, h);\n        }\n        if (this._maxHeight) {\n            h = Math.min(this._maxHeight, h);\n        }\n        FlexUtils.setAxisLayoutSize(this.item, false, h);\n    }\n\n    _getCrossAxisMinSizeSetting() {\n        return this._getMinSizeSetting(!this.ctr._horizontal);\n    }\n\n    _getCrossAxisMaxSizeSetting() {\n        return this._getMaxSizeSetting(!this.ctr._horizontal);\n    }\n\n    _getMainAxisMaxSizeSetting() {\n        return this._getMaxSizeSetting(this.ctr._horizontal);\n    }\n\n    _getMinSizeSetting(horizontal) {\n        if (horizontal) {\n            return this._minWidth;\n        } else {\n            return this._minHeight;\n        }\n    }\n\n    _getMaxSizeSetting(horizontal) {\n        if (horizontal) {\n            return this._maxWidth;\n        } else {\n            return this._maxHeight;\n        }\n    }\n\n    _getMainAxisMinSize() {\n        return FlexUtils.getAxisMinSize(this.item, this.ctr._horizontal);\n    }\n\n    _getCrossAxisMinSize() {\n        return FlexUtils.getAxisMinSize(this.item, !this.ctr._horizontal);\n    }\n\n    _getMainAxisLayoutSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, this.ctr._horizontal);\n    }\n\n    _getMainAxisLayoutPos() {\n        return FlexUtils.getAxisLayoutPos(this.item, this.ctr._horizontal);\n    }\n\n    _setMainAxisLayoutPos(pos) {\n        return FlexUtils.setAxisLayoutPos(this.item, this.ctr._horizontal, pos);\n    }\n\n    _setCrossAxisLayoutPos(pos) {\n        return FlexUtils.setAxisLayoutPos(this.item, !this.ctr._horizontal, pos);\n    }\n\n    _getCrossAxisLayoutSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, !this.ctr._horizontal);\n    }\n\n    _resizeCrossAxis(size) {\n        return FlexUtils.resizeAxis(this.item, !this.ctr._horizontal, size);\n    }\n\n    _resizeMainAxis(size) {\n        return FlexUtils.resizeAxis(this.item, this.ctr._horizontal, size);\n    }\n\n    _getMainAxisPadding() {\n        return FlexUtils.getTotalPadding(this.item, this.ctr._horizontal);\n    }\n\n    _getCrossAxisPadding() {\n        return FlexUtils.getTotalPadding(this.item, !this.ctr._horizontal);\n    }\n\n    _getMainAxisMargin() {\n        return FlexUtils.getTotalMargin(this.item, this.ctr._horizontal);\n    }\n\n    _getCrossAxisMargin() {\n        return FlexUtils.getTotalMargin(this.item, !this.ctr._horizontal);\n    }\n\n    _getHorizontalMarginOffset() {\n        return FlexUtils.getMarginOffset(this.item, true);\n    }\n\n    _getVerticalMarginOffset() {\n        return FlexUtils.getMarginOffset(this.item, false);\n    }\n\n    _getMainAxisMinSizeWithPaddingAndMargin() {\n        return this._getMainAxisMinSize() + this._getMainAxisPadding() + this._getMainAxisMargin();\n    }\n\n    _getCrossAxisMinSizeWithPaddingAndMargin() {\n        return this._getCrossAxisMinSize() + this._getCrossAxisPadding() + this._getCrossAxisMargin();\n    }\n\n    _getMainAxisLayoutSizeWithPaddingAndMargin() {\n        return this._getMainAxisLayoutSize() + this._getMainAxisPadding() + this._getMainAxisMargin();\n    }\n\n    _getCrossAxisLayoutSizeWithPaddingAndMargin() {\n        return this._getCrossAxisLayoutSize() + this._getCrossAxisPadding() + this._getCrossAxisMargin();\n    }\n\n    _hasFixedCrossAxisSize() {\n        return !FlexUtils.isZeroAxisSize(this.item, !this.ctr._horizontal);\n    }\n\n    _hasRelCrossAxisSize() {\n        return !!(this.ctr._horizontal ? this.item.funcH : this.item.funcW);\n    }\n\n}\n\n\nFlexItem.SHRINK_AUTO = -1;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FlexContainer from \"./FlexContainer.mjs\";\nimport FlexItem from \"./FlexItem.mjs\";\nimport FlexUtils from \"./FlexUtils.mjs\";\n\n/**\n * This is the connection between the render tree with the layout tree of this flex container/item.\n */\nexport default class FlexTarget {\n\n    constructor(target) {\n        this._target = target;\n\n        /**\n         * Possible values (only in case of container):\n         * bit 0: has changed or contains items with changes\n         * bit 1: width changed\n         * bit 2: height changed\n         */\n        this._recalc = 0;\n        \n        this._enabled = false;\n\n        this.x = 0;\n        this.y = 0;\n        this.w = 0;\n        this.h = 0;\n\n        this._originalX = 0;\n        this._originalY = 0;\n        this._originalWidth = 0;\n        this._originalHeight = 0;\n\n        this._flex = null;\n        this._flexItem = null;\n        this._flexItemDisabled = false;\n\n        this._items = null;\n    }\n\n    get flexLayout() {\n        return this.flex ? this.flex._layout : null;\n    }\n\n    layoutFlexTree() {\n        if (this.isFlexEnabled() && this.isChanged()) {\n            this.flexLayout.layoutTree();\n        }\n    }\n\n    get target() {\n        return this._target;\n    }\n\n    get flex() {\n        return this._flex;\n    }\n\n    set flex(v) {\n        if (!v) {\n            if (this.isFlexEnabled()) {\n                this._disableFlex();\n            }\n        } else {\n            if (!this.isFlexEnabled()) {\n                this._enableFlex();\n            }\n            this._flex.patch(v);\n        }\n    }\n\n    get flexItem() {\n        if (this._flexItemDisabled) {\n            return false;\n        }\n        this._ensureFlexItem();\n        return this._flexItem;\n    }\n\n    set flexItem(v) {\n        if (v === false) {\n            if (!this._flexItemDisabled) {\n                const parent = this.flexParent;\n                this._flexItemDisabled = true;\n                this._checkEnabled();\n                if (parent) {\n                    parent._clearFlexItemsCache();\n                    parent.changedContents();\n                }\n            }\n        } else {\n            this._ensureFlexItem();\n\n            this._flexItem.patch(v);\n\n            if (this._flexItemDisabled) {\n                this._flexItemDisabled = false;\n                this._checkEnabled();\n                const parent = this.flexParent;\n                if (parent) {\n                    parent._clearFlexItemsCache();\n                    parent.changedContents();\n                }\n            }\n        }\n    }\n\n    _enableFlex() {\n        this._flex = new FlexContainer(this);\n        this._checkEnabled();\n        this.changedDimensions();\n        this._enableChildrenAsFlexItems();\n    }\n\n    _disableFlex() {\n        this.changedDimensions();\n        this._flex = null;\n        this._checkEnabled();\n        this._disableChildrenAsFlexItems();\n    }\n\n    _enableChildrenAsFlexItems() {\n        const children = this._target._children;\n        if (children) {\n            for (let i = 0, n = children.length; i < n; i++) {\n                const child = children[i];\n                child.layout._enableFlexItem();\n            }\n        }\n    }\n\n    _disableChildrenAsFlexItems() {\n        const children = this._target._children;\n        if (children) {\n            for (let i = 0, n = children.length; i < n; i++) {\n                const child = children[i];\n                child.layout._disableFlexItem();\n            }\n        }\n    }\n\n    _enableFlexItem() {\n        this._ensureFlexItem();\n        if (this._target._parent) {\n            const flexParent = this._target._parent._layout;\n            this._flexItem.ctr = flexParent._flex;\n            flexParent.changedContents();\n        }\n        this._checkEnabled();\n    }\n\n    _disableFlexItem() {\n        if (this._flexItem) {\n            this._flexItem.ctr = null;\n        }\n\n        // We keep the flexItem object because it may contain custom settings.\n        this._checkEnabled();\n\n        // Offsets have been changed. We can't recover them, so we'll just clear them instead.\n        this._resetOffsets();\n    }\n\n    _resetOffsets() {\n        this.x = 0;\n        this.y = 0;\n    }\n\n    _ensureFlexItem() {\n        if (!this._flexItem) {\n            this._flexItem = new FlexItem(this);\n        }\n    }\n\n    _checkEnabled() {\n        const enabled = this.isEnabled();\n        if (this._enabled !== enabled) {\n            if (enabled) {\n                this._enable();\n            } else {\n                this._disable();\n            }\n            this._enabled = enabled;\n        }\n    }\n    \n    _enable() {\n        this._setupTargetForFlex();\n        this._target.enableFlexLayout();\n    }\n\n    _disable() {\n        this._restoreTargetToNonFlex();\n        this._target.disableFlexLayout();\n    }\n\n    isEnabled() {\n        return this.isFlexEnabled() || this.isFlexItemEnabled();\n    }\n\n    isFlexEnabled() {\n        return this._flex !== null;\n    }\n\n    isFlexItemEnabled() {\n        return this.flexParent !== null;\n    }\n\n    _restoreTargetToNonFlex() {\n        const target = this._target;\n        target.x = this._originalX;\n        target.y = this._originalY;\n        target.setDimensions(this._originalWidth, this._originalHeight);\n    }\n\n    _setupTargetForFlex() {\n        const target = this._target;\n        this._originalX = target._x;\n        this._originalY = target._y;\n        this._originalWidth = target._w;\n        this._originalHeight = target._h;\n    }\n    \n    setParent(from, to) {\n        if (from && from.isFlexContainer()) {\n            from._layout._changedChildren();\n        }\n\n        if (to && to.isFlexContainer()) {\n            this._enableFlexItem();\n            to._layout._changedChildren();\n        }\n        this._checkEnabled();\n    }\n\n    get flexParent() {\n        if (this._flexItemDisabled) {\n            return null;\n        }\n\n        const parent = this._target._parent;\n        if (parent && parent.isFlexContainer()) {\n            return parent._layout;\n        }\n        return null;\n    }\n\n    setVisible(v) {\n        const parent = this.flexParent;\n        if (parent) {\n            parent._changedChildren();\n        }\n    }\n\n    get items() {\n        if (!this._items) {\n            this._items = this._getFlexItems();\n        }\n        return this._items;\n    }\n\n    _getFlexItems() {\n        const items = [];\n        const children = this._target._children;\n        if (children) {\n            for (let i = 0, n = children.length; i < n; i++) {\n                const item = children[i];\n                if (item.visible) {\n                    if (item.isFlexItem()) {\n                        items.push(item.layout);\n                    }\n                }\n            }\n        }\n        return items;\n    }\n\n    _changedChildren() {\n        this._clearFlexItemsCache();\n        this.changedContents();\n    }\n\n    _clearFlexItemsCache() {\n        this._items = null;\n    }\n\n    setLayout(x, y, w, h) {\n        let originalX = this._originalX;\n        let originalY = this._originalY;\n        if (this.funcX) {\n            originalX = this.funcX(FlexUtils.getParentAxisSizeWithPadding(this, true));\n        }\n        if (this.funcY) {\n            originalY = this.funcY(FlexUtils.getParentAxisSizeWithPadding(this, false));\n        }\n\n        if (this.isFlexItemEnabled()) {\n            this.target.setLayout(x + originalX, y + originalY, w, h);\n        } else {\n            // Reuse the x,y 'settings'.\n            this.target.setLayout(originalX, originalY, w, h);\n        }\n    }\n\n    changedDimensions(changeWidth = true, changeHeight = true) {\n        this._updateRecalc(changeWidth, changeHeight);\n    }\n\n    changedContents() {\n        this._updateRecalc();\n    }\n\n    forceLayout() {\n        this._updateRecalc();\n    }\n\n    isChanged() {\n        return this._recalc > 0;\n    }\n\n    _updateRecalc(changeExternalWidth = false, changeExternalHeight = false) {\n        if (this.isFlexEnabled()) {\n            const layout = this._flex._layout;\n\n            // When something internal changes, it can have effect on the external dimensions.\n            changeExternalWidth = changeExternalWidth || layout.isAxisFitToContents(true);\n            changeExternalHeight = changeExternalHeight || layout.isAxisFitToContents(false);\n        }\n\n        const recalc = 1 + (changeExternalWidth ? 2 : 0) + (changeExternalHeight ? 4 : 0);\n        const newRecalcFlags = this.getNewRecalcFlags(recalc);\n        this._recalc |= recalc;\n        if (newRecalcFlags > 1) {\n            if (this.flexParent) {\n                this.flexParent._updateRecalcBottomUp(recalc);\n            } else {\n                this._target.triggerLayout();\n            }\n        } else {\n            this._target.triggerLayout();\n        }\n    }\n\n    getNewRecalcFlags(flags) {\n        return (7 - this._recalc) & flags;\n    }\n\n    _updateRecalcBottomUp(childRecalc) {\n        const newRecalc = this._getRecalcFromChangedChildRecalc(childRecalc);\n        const newRecalcFlags = this.getNewRecalcFlags(newRecalc);\n        this._recalc |= newRecalc;\n        if (newRecalcFlags > 1) {\n            const flexParent = this.flexParent;\n            if (flexParent) {\n                flexParent._updateRecalcBottomUp(newRecalc);\n            } else {\n                this._target.triggerLayout();\n            }\n        } else {\n            this._target.triggerLayout();\n        }\n    }\n\n    _getRecalcFromChangedChildRecalc(childRecalc) {\n        const layout = this._flex._layout;\n\n        const mainAxisRecalcFlag = layout._horizontal ? 1 : 2;\n        const crossAxisRecalcFlag = layout._horizontal ? 2 : 1;\n\n        const crossAxisDimensionsChangedInChild = (childRecalc & crossAxisRecalcFlag);\n        if (!crossAxisDimensionsChangedInChild) {\n            const mainAxisDimensionsChangedInChild = (childRecalc & mainAxisRecalcFlag);\n            if (mainAxisDimensionsChangedInChild) {\n                const mainAxisIsWrapping = layout.isWrapping();\n                if (mainAxisIsWrapping) {\n                    const crossAxisIsFitToContents = layout.isCrossAxisFitToContents();\n                    if (crossAxisIsFitToContents) {\n                        // Special case: due to wrapping, the cross axis size may be changed.\n                        childRecalc += crossAxisRecalcFlag;\n                    }\n                }\n            }\n        }\n\n        let isWidthDynamic = layout.isAxisFitToContents(true);\n        let isHeightDynamic = layout.isAxisFitToContents(false);\n\n        if (layout.shrunk) {\n            // If during previous layout this container was 'shrunk', any changes may change the 'min axis size' of the\n            // contents, leading to a different axis size on this container even when it was not 'fit to contents'.\n            if (layout._horizontal) {\n                isWidthDynamic = true;\n            } else {\n                isHeightDynamic = true;\n            }\n        }\n\n        const localRecalc = 1 + (isWidthDynamic ? 2 : 0) + (isHeightDynamic ? 4 : 0);\n\n        const combinedRecalc = childRecalc & localRecalc;\n        return combinedRecalc;\n    }\n\n    get recalc() {\n        return this._recalc;\n    }\n\n    clearRecalcFlag() {\n        this._recalc = 0;\n    }\n\n    enableLocalRecalcFlag() {\n        this._recalc = 1;\n    }\n\n    get originalX() {\n        return this._originalX;\n    }\n\n    setOriginalXWithoutUpdatingLayout(v) {\n        this._originalX = v;\n    }\n\n    get originalY() {\n        return this._originalY;\n    }\n\n    setOriginalYWithoutUpdatingLayout(v) {\n        this._originalY = v;\n    }\n\n    get originalWidth() {\n        return this._originalWidth;\n    }\n\n    set originalWidth(v) {\n        if (this._originalWidth !== v) {\n            this._originalWidth = v;\n            this.changedDimensions(true, false);\n        }\n    }\n\n    get originalHeight() {\n        return this._originalHeight;\n    }\n\n    set originalHeight(v) {\n        if (this._originalHeight !== v) {\n            this._originalHeight = v;\n            this.changedDimensions(false, true);\n        }\n    }\n\n    get funcX() {\n        return this._target.funcX;\n    }\n\n    get funcY() {\n        return this._target.funcY;\n    }\n\n    get funcW() {\n        return this._target.funcW;\n    }\n\n    get funcH() {\n        return this._target.funcH;\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class TextureSource {\n\n    constructor(manager, loader = null) {\n        this.id = TextureSource.id++;\n\n        this.manager = manager;\n\n        this.stage = manager.stage;\n\n        /**\n         * All enabled textures (textures that are used by visible elements).\n         * @type {Set<Texture>}\n         */\n        this.textures = new Set();\n\n        /**\n         * The number of active textures (textures that have at least one active element).\n         * @type {number}\n         * @private\n         */\n        this._activeTextureCount = 0;\n\n        /**\n         * The factory for the source of this texture.\n         * @type {Function}\n         */\n        this.loader = loader;\n\n        /**\n         * Identifier for reuse.\n         * @type {String}\n         */\n        this.lookupId = null;\n\n        /**\n         * If set, this.is called when the texture source is no longer displayed (this.components.size becomes 0).\n         * @type {Function}\n         */\n        this._cancelCb = null;\n\n        /**\n         * Loading since timestamp in millis.\n         * @type {number}\n         */\n        this.loadingSince = 0;\n\n        this.w = 0;\n        this.h = 0;\n\n        this._nativeTexture = null;\n\n        /**\n         * If true, then this.texture source is never freed from memory during garbage collection.\n         * @type {boolean}\n         */\n        this.permanent = false;\n\n        /**\n         * Sub-object with texture-specific rendering information.\n         * For images, contains the src property, for texts, contains handy rendering information.\n         * @type {Object}\n         */\n        this.renderInfo = null;\n\n        /**\n         * Generated for 'renderToTexture'.\n         * @type {boolean}\n         * @private\n         */\n        this._isResultTexture = !this.loader;\n\n        /**\n         * Contains the load error, if the texture source could previously not be loaded.\n         * @type {object}\n         * @private\n         */\n        this._loadError = null;\n\n        /**\n         *  Hold a reference to the javascript variable which contains the texture, this is not required for WebGL in WebBrowsers but is required for Spark runtime.\n         * @type {object}\n         * @private\n         */\n        this._imageRef = null;\n\n\n        /**\n         * Track whether or not there is an alpha channel in this source\n         * @type {boolean}\n         * @private\n         */\n         this._hasAlpha = false;\n    }\n\n    get hasAlpha() {\n        return this._hasAlpha;\n    }\n\n    get loadError() {\n        return this._loadError;\n    }\n\n    addTexture(v) {\n        if (!this.textures.has(v)) {\n            this.textures.add(v);\n        }\n    }\n\n    removeTexture(v) {\n        this.textures.delete(v);\n    }\n\n    incActiveTextureCount() {\n        this._activeTextureCount++;\n        if (this._activeTextureCount === 1) {\n            this.becomesUsed();\n        }\n    }\n\n    decActiveTextureCount() {\n        this._activeTextureCount--;\n        if (this._activeTextureCount === 0) {\n            this.becomesUnused();\n        }\n    }\n\n    get isResultTexture() {\n        return this._isResultTexture;\n    }\n\n    set isResultTexture(v) {\n        this._isResultTexture = v;\n    }\n\n    forEachEnabledElement(cb) {\n        this.textures.forEach(texture => {\n            texture.elements.forEach(cb);\n        });\n    }\n\n    hasEnabledElements() {\n        return this.textures.size > 0;\n    }\n\n    forEachActiveElement(cb) {\n        this.textures.forEach(texture => {\n            texture.elements.forEach(element => {\n                if (element.active) {\n                    cb(element);\n                }\n            });\n        });\n    }\n\n    getRenderWidth() {\n        return this.w;\n    }\n\n    getRenderHeight() {\n        return this.h;\n    }\n\n    allowCleanup() {\n        return !this.permanent && !this.isUsed();\n    }\n\n    becomesUsed() {\n        // Even while the texture is being loaded, make sure it is on the lookup map so that others can reuse it.\n        this.load();\n    }\n\n    becomesUnused() {\n        this.cancel();\n    }\n\n    cancel() {\n        if (this.isLoading()) {\n            if (this._cancelCb) {\n                this._cancelCb(this);\n\n                // Clear callback to avoid memory leaks.\n                this._cancelCb = null;\n            }\n            this.loadingSince = 0;\n        }\n    }\n\n    isLoaded() {\n        return !!this._nativeTexture;\n    }\n\n    isLoading() {\n        return (this.loadingSince > 0);\n    }\n\n    isError() {\n        return !!this._loadError;\n    }\n\n    reload() {\n        this.free();\n        if (this.isUsed()) {\n            this.load();\n        }\n    }\n\n    load(forceSync = false) {\n        // From the moment of loading (when a texture source becomes used by active elements)\n        if (this.isResultTexture) {\n            // Element result texture source, for which the loading is managed by the core.\n            return;\n        }\n\n        if (!this._nativeTexture && !this.isLoading()) {\n            this.loadingSince = (new Date()).getTime();\n            this._cancelCb = this.loader((err, options) => {\n                // Ignore loads that come in after a cancel.\n                if (this.isLoading()) {\n                    // Clear callback to avoid memory leaks.\n                    this._cancelCb = null;\n\n                    if (this.manager.stage.destroyed) {\n                        // Ignore async load when stage is destroyed.\n                        return;\n                    }\n                    if (err) {\n                        // Emit txError.\n                        this.onError(err);\n                    } else if (options && options.source) {\n                        if (!this.stage.isUpdatingFrame() && !forceSync && (options.throttle !== false)) {\n                            const textureThrottler = this.stage.textureThrottler;\n                            this._cancelCb = textureThrottler.genericCancelCb;\n                            textureThrottler.add(this, options);\n                        } else {\n                            this.processLoadedSource(options);\n                        }\n                    }\n                }\n            }, this);\n        }\n    }\n\n    processLoadedSource(options) {\n        this.loadingSince = 0;\n        this.setSource(options);\n    }\n\n    setSource(options) {\n        const source = options.source;\n\n        this._hasAlpha = (options ? (options.hasAlpha || false) : false);\n        this.w = source.width || (options && options.w) || 0;\n        this.h = source.height || (options && options.h) || 0;\n\n        if (options && options.renderInfo) {\n            // Assign to id in cache so that it can be reused.\n            this.renderInfo = options.renderInfo;\n        }\n\n        this.permanent = !!options.permanent;\n\n        if (options && options.imageRef)\n            this._imageRef = options.imageRef;\n        if (options && options.flipTextureY) {\n            this._flipTextureY = options.flipTextureY;\n        } else {\n            this._flipTextureY = false;\n        }\n\n        if (this._isNativeTexture(source)) {\n            // Texture managed by caller.\n            this._nativeTexture = source;\n\n            this.w = this.w || source.w;\n            this.h = this.h || source.h;\n\n            // WebGLTexture objects are by default;\n            this.permanent = options.hasOwnProperty('permanent') ? options.permanent : true;\n        } else {\n            this.manager.uploadTextureSource(this, options);\n        }\n\n        // Must be cleared when reload is succesful.\n        this._loadError = null;\n\n        this.onLoad();\n    }\n\n    isUsed() {\n        return this._activeTextureCount > 0;\n    }\n\n    onLoad() {\n        if (this.isUsed()) {\n            this.textures.forEach(texture => {\n                texture.onLoad();\n            });\n        }\n    }\n\n    forceRenderUpdate() {\n        // Userland should call this method after changing the nativeTexture manually outside of the framework\n        //  (using tex[Sub]Image2d for example).\n\n        if (this._nativeTexture) {\n            // Change 'update' flag. This is currently not used by the framework but is handy in userland.\n            this._nativeTexture.update = this.stage.frameCounter;\n        }\n\n        this.forEachActiveElement(function (element) {\n            element.forceRenderUpdate();\n        });\n\n    }\n\n    forceUpdateRenderCoords() {\n        this.forEachActiveElement(function (element) {\n            element._updateTextureCoords();\n        });\n    }\n\n    get nativeTexture() {\n        return this._nativeTexture;\n    }\n\n    clearNativeTexture() {\n        this._nativeTexture = null;\n        //also clear the reference to the texture variable.\n        this._imageRef = null;\n    }\n\n    /**\n     * Used for result textures.\n     */\n    replaceNativeTexture(newNativeTexture, w, h) {\n        let prevNativeTexture = this._nativeTexture;\n        // Loaded by core.\n        this._nativeTexture = newNativeTexture;\n        this.w = w;\n        this.h = h;\n\n        if (!prevNativeTexture && this._nativeTexture) {\n            this.forEachActiveElement(element => element.onTextureSourceLoaded());\n        }\n\n        if (!this._nativeTexture) {\n            this.forEachActiveElement(element => element._setDisplayedTexture(null));\n        }\n\n        // Dimensions must be updated also on enabled elements, as it may force it to go within bounds.\n        this.forEachEnabledElement(element => element._updateDimensions());\n\n        // Notice that the sprite map must never contain render textures.\n    }\n\n    onError(e) {\n        this._loadError = e;\n        this.loadingSince = 0;\n        console.error('[Lightning] texture load error', e, this.lookupId);\n        this.forEachActiveElement(element => element.onTextureSourceLoadError(e));\n    }\n\n    free() {\n        if (this.isLoaded()) {\n            this.manager.freeTextureSource(this);\n        }\n    }\n\n    _isNativeTexture(source) {\n        if (Utils.isNode) {\n            return source.constructor.name === \"WebGLTexture\";\n        }\n\n        if ('WebGLTexture' in window) {\n            return source instanceof WebGLTexture;\n        }\n\n        return false;\n    }\n\n}\n\nTextureSource.prototype.isTextureSource = true;\n\nTextureSource.id = 1;\n\nimport Utils from \"./Utils.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport TextureSource from '../TextureSource.mjs';\n\nexport default class ElementTexturizer {\n\n    constructor(elementCore) {\n\n        this._element = elementCore.element;\n        this._core = elementCore;\n\n        this.ctx = this._core.ctx;\n\n        this._enabled = false;\n        this.lazy = false;\n        this._colorize = false;\n\n        this._renderTexture = null;\n\n        this._renderTextureReused = false;\n\n        this._resultTextureSource = null;\n\n        this._renderOffscreen = false;\n\n        this.empty = false;\n    }\n\n    get enabled() {\n        return this._enabled;\n    }\n\n    set enabled(v) {\n        this._enabled = v;\n        this._core.updateRenderToTextureEnabled();\n    }\n\n    get renderOffscreen() {\n        return this._renderOffscreen;\n    }\n\n    set renderOffscreen(v) {\n        this._renderOffscreen = v;\n        this._core.setHasRenderUpdates(1);\n\n        // This enforces rechecking the 'within bounds'.\n        this._core._setRecalc(6);\n    }\n\n    get colorize() {\n        return this._colorize;\n    }\n\n    set colorize(v) {\n        if (this._colorize !== v) {\n            this._colorize = v;\n\n            // Only affects the finally drawn quad.\n            this._core.setHasRenderUpdates(1);\n        }\n    }\n\n    _getTextureSource() {\n        if (!this._resultTextureSource) {\n            this._resultTextureSource = new TextureSource(this._element.stage.textureManager);\n            this.updateResultTexture();\n        }\n        return this._resultTextureSource;\n    }\n\n    hasResultTexture() {\n        return !!this._resultTextureSource;\n    }\n\n    resultTextureInUse() {\n        return this._resultTextureSource && this._resultTextureSource.hasEnabledElements();\n    }\n\n    updateResultTexture() {\n        let resultTexture = this.getResultTexture();\n        if (this._resultTextureSource) {\n            if (this._resultTextureSource.nativeTexture !== resultTexture) {\n                let w = resultTexture ? resultTexture.w : 0;\n                let h = resultTexture ? resultTexture.h : 0;\n                this._resultTextureSource.replaceNativeTexture(resultTexture, w, h);\n            }\n\n            // Texture will be updated: all elements using the source need to be updated as well.\n            this._resultTextureSource.forEachEnabledElement(element => {\n                element._updateDimensions();\n                element.core.setHasRenderUpdates(3);\n            });\n        }\n    }\n\n    mustRenderToTexture() {\n        // Check if we must really render as texture.\n        if (this._enabled && !this.lazy) {\n            return true;\n        } else if (this._enabled && this.lazy && this._core._hasRenderUpdates < 3) {\n            // Static-only: if renderToTexture did not need to update during last drawn frame, generate it as a cache.\n            return true;\n        }\n        return false;\n    }\n\n    deactivate() {\n        this.release();\n    }\n\n    get renderTextureReused() {\n        return this._renderTextureReused;\n    }\n\n    release() {\n        this.releaseRenderTexture();\n    }\n\n    releaseRenderTexture() {\n        if (this._renderTexture) {\n            if (!this._renderTextureReused) {\n                this.ctx.releaseRenderTexture(this._renderTexture);\n            }\n            this._renderTexture = null;\n            this._renderTextureReused = false;\n            this.updateResultTexture();\n        }\n    }\n\n    // Reuses the specified texture as the render texture (in ancestor).\n    reuseTextureAsRenderTexture(nativeTexture) {\n        if (this._renderTexture !== nativeTexture) {\n            this.releaseRenderTexture();\n            this._renderTexture = nativeTexture;\n            this._renderTextureReused = true;\n        }\n    }\n\n    hasRenderTexture() {\n        return !!this._renderTexture;\n    }\n\n    getRenderTexture() {\n        if (!this._renderTexture) {\n            this._renderTexture = this.ctx.allocateRenderTexture(this._core._w, this._core._h);\n            this._renderTextureReused = false;\n        }\n        return this._renderTexture;\n    }\n\n    getResultTexture() {\n        return this._renderTexture;\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FlexTarget from \"../../flex/FlexTarget.mjs\";\n\nexport default class ElementCore {\n\n    constructor(element) {\n        this._element = element;\n\n        this.ctx = element.stage.ctx;\n\n        // The memory layout of the internal variables is affected by their position in the constructor.\n        // It boosts performance to order them by usage of cpu-heavy functions (renderSimple and update).\n\n        this._recalc = 0;\n\n        this._parent = null;\n\n        this._onUpdate = null;\n\n        this._pRecalc = 0;\n\n        this._worldContext = new ElementCoreContext();\n\n        this._hasUpdates = false;\n\n        this._localAlpha = 1;\n\n        this._onAfterCalcs = null;\n\n        this._onAfterUpdate = null;\n\n        // All local translation/transform updates: directly propagated from x/y/w/h/scale/whatever.\n        this._localPx = 0;\n        this._localPy = 0;\n\n        this._localTa = 1;\n        this._localTb = 0;\n        this._localTc = 0;\n        this._localTd = 1;\n\n        this._isComplex = false;\n\n        this._dimsUnknown = false;\n\n        this._clipping = false;\n\n        // Used by both update and render.\n        this._zSort = false;\n\n        this._outOfBounds = 0;\n\n        /**\n         * The texture source to be displayed.\n         * @type {TextureSource}\n         */\n        this._displayedTextureSource = null;\n\n        this._zContextUsage = 0;\n\n        this._children = null;\n\n        this._hasRenderUpdates = 0;\n\n        this._zIndexedChildren = null;\n\n        this._renderContext = this._worldContext;\n\n        this.renderState = this.ctx.renderState;\n\n        this._scissor = null;\n\n        // The ancestor ElementCore that owns the inherited shader. Null if none is active (default shader).\n        this._shaderOwner = null;\n\n\n        this._updateTreeOrder = 0;\n\n        this._colorUl = this._colorUr = this._colorBl = this._colorBr = 0xFFFFFFFF;\n\n        this._x = 0;\n        this._y = 0;\n        this._w = 0;\n        this._h = 0;\n\n        this._optFlags = 0;\n        this._funcX = null;\n        this._funcY = null;\n        this._funcW = null;\n        this._funcH = null;\n\n        this._scaleX = 1;\n        this._scaleY = 1;\n        this._pivotX = 0.5;\n        this._pivotY = 0.5;\n        this._mountX = 0;\n        this._mountY = 0;\n        this._rotation = 0;\n\n        this._alpha = 1;\n        this._visible = true;\n\n        this._ulx = 0;\n        this._uly = 0;\n        this._brx = 1;\n        this._bry = 1;\n\n        this._zIndex = 0;\n        this._forceZIndexContext = false;\n        this._zParent = null;\n\n        this._isRoot = false;\n\n        /**\n         * Iff true, during zSort, this element should be 're-sorted' because either:\n         * - zIndex did chang\n         * - zParent did change\n         * - element was moved in the render tree\n         * @type {boolean}\n         */\n        this._zIndexResort = false;\n\n        this._shader = null;\n\n        // Element is rendered on another texture.\n        this._renderToTextureEnabled = false;\n\n        this._texturizer = null;\n\n        this._useRenderToTexture = false;\n\n        this._boundsMargin = null;\n\n        this._recBoundsMargin = null;\n\n        this._withinBoundsMargin = false;\n\n        this._viewport = null;\n\n        this._clipbox = true;\n\n        this.render = this._renderSimple;\n\n        this._layout = null;\n    }\n\n    get offsetX() {\n        if (this._funcX) {\n            return this._funcX;\n        } else {\n            if (this.hasFlexLayout()) {\n                return this._layout.originalX;\n            } else {\n                return this._x;\n            }\n        }\n    }\n\n    set offsetX(v) {\n        if (Utils.isFunction(v)) {\n            this.funcX = v;\n        } else {\n            this._disableFuncX();\n            if (this.hasFlexLayout()) {\n                this.x += (v - this._layout.originalX);\n                this._layout.setOriginalXWithoutUpdatingLayout(v);\n            } else {\n                this.x = v;\n            }\n        }\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    set x(v) {\n        if (v !== this._x) {\n            this._updateLocalTranslateDelta(v - this._x, 0);\n            this._x = v;\n        }\n    }\n\n    get funcX() {\n        return (this._optFlags & 1 ? this._funcX : null);\n    }\n\n    set funcX(v) {\n        if (this._funcX !== v) {\n            this._optFlags |= 1;\n            this._funcX = v;\n            if (this.hasFlexLayout()) {\n                this._layout.setOriginalXWithoutUpdatingLayout(0);\n                this.layout.forceLayout();\n            } else {\n                this._x = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    _disableFuncX() {\n        this._optFlags = this._optFlags & (0xFFFF - 1);\n        this._funcX = null;\n    }\n\n    get offsetY() {\n        if (this._funcY) {\n            return this._funcY;\n        } else {\n            if (this.hasFlexLayout()) {\n                return this._layout.originalY;\n            } else {\n                return this._y;\n            }\n        }\n    }\n\n    set offsetY(v) {\n        if (Utils.isFunction(v)) {\n            this.funcY = v;\n        } else {\n            this._disableFuncY();\n            if (this.hasFlexLayout()) {\n                this.y += (v - this._layout.originalY);\n                this._layout.setOriginalYWithoutUpdatingLayout(v);\n            } else {\n                this.y = v;\n            }\n        }\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set y(v) {\n        if (v !== this._y) {\n            this._updateLocalTranslateDelta(0, v - this._y);\n            this._y = v;\n        }\n    }\n\n    get funcY() {\n        return (this._optFlags & 2 ? this._funcY : null);\n    }\n\n    set funcY(v) {\n        if (this._funcY !== v) {\n            this._optFlags |= 2;\n            this._funcY = v;\n            if (this.hasFlexLayout()) {\n                this._layout.setOriginalYWithoutUpdatingLayout(0);\n                this.layout.forceLayout();\n            } else {\n                this._y = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    _disableFuncY() {\n        this._optFlags = this._optFlags & (0xFFFF - 2);\n        this._funcY = null;\n    }\n\n    get funcW() {\n        return (this._optFlags & 4 ? this._funcW : null);\n    }\n\n    set funcW(v) {\n        if (this._funcW !== v) {\n            this._optFlags |= 4;\n            this._funcW = v;\n            if (this.hasFlexLayout()) {\n                this._layout._originalWidth = 0;\n                this.layout.changedDimensions(true, false);\n            } else {\n                this._w = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    disableFuncW() {\n        this._optFlags = this._optFlags & (0xFFFF - 4);\n        this._funcW = null;\n    }\n\n    get funcH() {\n        return (this._optFlags & 8 ? this._funcH : null);\n    }\n\n    set funcH(v) {\n        if (this._funcH !== v) {\n            this._optFlags |= 8;\n            this._funcH = v;\n            if (this.hasFlexLayout()) {\n                this._layout._originalHeight = 0;\n                this.layout.changedDimensions(false, true);\n            } else {\n                this._h = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    disableFuncH() {\n        this._optFlags = this._optFlags & (0xFFFF - 8);\n        this._funcH = null;\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    getRenderWidth() {\n        if (this.hasFlexLayout()) {\n            return this._layout.originalWidth;\n        } else {\n            return this._w;\n        }\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    getRenderHeight() {\n        if (this.hasFlexLayout()) {\n            return this._layout.originalHeight;\n        } else {\n            return this._h;\n        }\n    }\n\n    get scaleX() {\n        return this._scaleX;\n    }\n\n    set scaleX(v) {\n        if (this._scaleX !== v) {\n            this._scaleX = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get scaleY() {\n        return this._scaleY;\n    }\n\n    set scaleY(v) {\n        if (this._scaleY !== v) {\n            this._scaleY = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get scale() {\n        return this.scaleX;\n    }\n\n    set scale(v) {\n        if (this._scaleX !== v || this._scaleY !== v) {\n            this._scaleX = v;\n            this._scaleY = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get pivotX() {\n        return this._pivotX;\n    }\n\n    set pivotX(v) {\n        if (this._pivotX !== v) {\n            this._pivotX = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get pivotY() {\n        return this._pivotY;\n    }\n\n    set pivotY(v) {\n        if (this._pivotY !== v) {\n            this._pivotY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get pivot() {\n        return this._pivotX;\n    }\n\n    set pivot(v) {\n        if (this._pivotX !== v || this._pivotY !== v) {\n            this._pivotX = v;\n            this._pivotY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get mountX() {\n        return this._mountX;\n    }\n\n    set mountX(v) {\n        if (this._mountX !== v) {\n            this._mountX = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get mountY() {\n        return this._mountY;\n    }\n\n    set mountY(v) {\n        if (this._mountY !== v) {\n            this._mountY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get mount() {\n        return this._mountX;\n    }\n\n    set mount(v) {\n        if (this._mountX !== v || this._mountY !== v) {\n            this._mountX = v;\n            this._mountY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get rotation() {\n        return this._rotation;\n    }\n\n    set rotation(v) {\n        if (this._rotation !== v) {\n            this._rotation = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get alpha() {\n        return this._alpha;\n    }\n\n    set alpha(v) {\n        // Account for rounding errors.\n        v = (v > 1 ? 1 : (v < 1e-14 ? 0 : v));\n        if (this._alpha !== v) {\n            let prev = this._alpha;\n            this._alpha = v;\n            this._updateLocalAlpha();\n            if ((prev === 0) !== (v === 0)) {\n                this._element._updateEnabledFlag();\n            }\n        }\n    }\n\n    get visible() {\n        return this._visible;\n    }\n\n    set visible(v) {\n        if (this._visible !== v) {\n            this._visible = v;\n            this._updateLocalAlpha();\n            this._element._updateEnabledFlag();\n\n            if (this.hasFlexLayout()) {\n                this.layout.setVisible(v);\n            }\n        }\n    }\n\n    _updateLocalTransform() {\n        if (this._rotation !== 0 && this._rotation % (2 * Math.PI)) {\n            // check to see if the rotation is the same as the previous render. This means we only need to use sin and cos when rotation actually changes\n            let _sr = Math.sin(this._rotation);\n            let _cr = Math.cos(this._rotation);\n\n            this._setLocalTransform(\n                _cr * this._scaleX,\n                -_sr * this._scaleY,\n                _sr * this._scaleX,\n                _cr * this._scaleY\n            );\n        } else {\n            this._setLocalTransform(\n                this._scaleX,\n                0,\n                0,\n                this._scaleY\n            );\n        }\n        this._updateLocalTranslate();\n    };\n\n    _updateLocalTranslate() {\n        this._recalcLocalTranslate();\n        this._triggerRecalcTranslate();\n    };\n\n    _recalcLocalTranslate() {\n        let pivotXMul = this._pivotX * this._w;\n        let pivotYMul = this._pivotY * this._h;\n        let px = this._x - (pivotXMul * this._localTa + pivotYMul * this._localTb) + pivotXMul;\n        let py = this._y - (pivotXMul * this._localTc + pivotYMul * this._localTd) + pivotYMul;\n        px -= this._mountX * this._w;\n        py -= this._mountY * this._h;\n        this._localPx = px;\n        this._localPy = py;\n    }\n\n    _updateLocalTranslateDelta(dx, dy) {\n        this._addLocalTranslate(dx, dy);\n    };\n\n    _updateLocalAlpha() {\n        this._setLocalAlpha(this._visible ? this._alpha : 0);\n    };\n\n    /**\n     * @param {number} type\n     * 0: no updates\n     * 1: re-invoke shader\n     * 3: re-create render texture and re-invoke shader\n     */\n    setHasRenderUpdates(type) {\n        if (this._worldContext.alpha) {\n            // Ignore if 'world invisible'. Render updates will be reset to 3 for every element that becomes visible.\n            let p = this;\n            p._hasRenderUpdates = Math.max(type, p._hasRenderUpdates);\n            while ((p = p._parent) && (p._hasRenderUpdates !== 3)) {\n                p._hasRenderUpdates = 3;\n            }\n        }\n    }\n\n    /**\n     * @param {Number} type\n     *   1: alpha\n     *   2: translate\n     *   4: transform\n     * 128: becomes visible\n     * 256: flex layout updated\n     */\n    _setRecalc(type) {\n        this._recalc |= type;\n\n        this._setHasUpdates();\n\n        // Any changes in descendants should trigger texture updates.\n        if (this._parent) {\n            this._parent.setHasRenderUpdates(3);\n        }\n    }\n\n    _setHasUpdates() {\n        let p = this;\n        while (p && !p._hasUpdates) {\n            p._hasUpdates = true;\n            p = p._parent;\n        }\n    }\n\n    getParent() {\n        return this._parent;\n    }\n\n    setParent(parent) {\n        if (parent !== this._parent) {\n            let prevIsZContext = this.isZContext();\n            let prevParent = this._parent;\n            this._parent = parent;\n\n            // Notify flex layout engine.\n            if (this._layout || (parent && parent.isFlexContainer())) {\n                this.layout.setParent(prevParent, parent);\n            }\n\n            if (prevParent) {\n                // When elements are deleted, the render texture must be re-rendered.\n                prevParent.setHasRenderUpdates(3);\n            }\n\n            this._setRecalc(1 + 2 + 4);\n\n            if (this._parent) {\n                // Force parent to propagate hasUpdates flag.\n                this._parent._setHasUpdates();\n            }\n\n            if (this._zIndex === 0) {\n                this.setZParent(parent);\n            } else {\n                this.setZParent(parent ? parent.findZContext() : null);\n            }\n\n            if (prevIsZContext !== this.isZContext()) {\n                if (!this.isZContext()) {\n                    this.disableZContext();\n                } else {\n                    this.enableZContext(prevParent.findZContext());\n                }\n            }\n\n            // Tree order did change: even if zParent stays the same, we must resort.\n            this._zIndexResort = true;\n            if (this._zParent) {\n                this._zParent.enableZSort();\n            }\n\n            if (!this._shader) {\n                let newShaderOwner = parent && !parent._renderToTextureEnabled ? parent._shaderOwner : null;\n                if (newShaderOwner !== this._shaderOwner) {\n                    this.setHasRenderUpdates(1);\n                    this._setShaderOwnerRecursive(newShaderOwner);\n                }\n            }\n        }\n    };\n\n    enableZSort(force = false) {\n        if (!this._zSort && this._zContextUsage > 0) {\n            this._zSort = true;\n            if (force) {\n                // ZSort must be done, even if this element is invisible.\n                // This is done to prevent memory leaks when removing element from inactive render branches.\n                this.ctx.forceZSort(this);\n            }\n        }\n    }\n\n    addChildAt(index, child) {\n        if (!this._children) this._children = [];\n        this._children.splice(index, 0, child);\n        child.setParent(this);\n    };\n\n    setChildAt(index, child) {\n        if (!this._children) this._children = [];\n        this._children[index].setParent(null);\n        this._children[index] = child;\n        child.setParent(this);\n    }\n\n    removeChildAt(index) {\n        let child = this._children[index];\n        this._children.splice(index, 1);\n        child.setParent(null);\n    };\n\n    removeChildren() {\n        if (this._children) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                this._children[i].setParent(null);\n            }\n\n            this._children.splice(0);\n\n            if (this._zIndexedChildren) {\n                this._zIndexedChildren.splice(0);\n            }\n        }\n    };\n\n    syncChildren(removed, added, order) {\n        this._children = order;\n        for (let i = 0, n = removed.length; i < n; i++) {\n            removed[i].setParent(null);\n        }\n        for (let i = 0, n = added.length; i < n; i++) {\n            added[i].setParent(this);\n        }\n    }\n\n    moveChild(fromIndex, toIndex) {\n        let c = this._children[fromIndex];\n        this._children.splice(fromIndex, 1);\n        this._children.splice(toIndex, 0, c);\n\n        // Tree order changed: must resort!;\n        this._zIndexResort = true;\n        if (this._zParent) {\n            this._zParent.enableZSort();\n        }\n    }\n\n    _setLocalTransform(a, b, c, d) {\n        this._setRecalc(4);\n        this._localTa = a;\n        this._localTb = b;\n        this._localTc = c;\n        this._localTd = d;\n\n        // We also regard negative scaling as a complex case, so that we can optimize the non-complex case better.\n        this._isComplex = (b !== 0) || (c !== 0) || (a < 0) || (d < 0);\n    };\n\n    _addLocalTranslate(dx, dy) {\n        this._localPx += dx;\n        this._localPy += dy;\n        this._triggerRecalcTranslate();\n    }\n\n    _setLocalAlpha(a) {\n        if (!this._worldContext.alpha && ((this._parent && this._parent._worldContext.alpha) && a)) {\n            // Element is becoming visible. We need to force update.\n            this._setRecalc(1 + 128);\n        } else {\n            this._setRecalc(1);\n        }\n\n        if (a < 1e-14) {\n            // Tiny rounding errors may cause failing visibility tests.\n            a = 0;\n        }\n\n        this._localAlpha = a;\n    };\n\n    setDimensions(w, h, isEstimate = this._dimsUnknown) {\n        // In case of an estimation, the update loop should perform different bound checks.\n        this._dimsUnknown = isEstimate;\n\n        if (this.hasFlexLayout()) {\n            this._layout.originalWidth = w;\n            this._layout.originalHeight = h;\n        } else {\n            if (this._w !== w || this._h !== h) {\n                this._updateDimensions(w, h);\n                return true;\n            }\n        }\n        return false;\n    };\n\n    _updateDimensions(w, h) {\n        if (this._w !== w || this._h !== h) {\n            this._w = w;\n            this._h = h;\n\n            this._triggerRecalcTranslate();\n\n            if (this._texturizer) {\n                this._texturizer.releaseRenderTexture();\n                this._texturizer.updateResultTexture();\n            }\n            // Due to width/height change: update the translation vector.\n            this._updateLocalTranslate();\n        }\n    }\n\n    setTextureCoords(ulx, uly, brx, bry) {\n        this.setHasRenderUpdates(3);\n\n        this._ulx = ulx;\n        this._uly = uly;\n        this._brx = brx;\n        this._bry = bry;\n    };\n\n    get displayedTextureSource() {\n        return this._displayedTextureSource;\n    }\n\n    setDisplayedTextureSource(textureSource) {\n        this.setHasRenderUpdates(3);\n        this._displayedTextureSource = textureSource;\n    };\n\n    get isRoot() {\n        return this._isRoot;\n    }\n\n    setAsRoot() {\n        // Use parent dummy.\n        this._parent = new ElementCore(this._element);\n\n        // After setting root, make sure it's updated.\n        this._parent._hasRenderUpdates = 3;\n        this._parent._hasUpdates = true;\n\n        // Root is, and will always be, the primary zContext.\n        this._isRoot = true;\n\n        this.ctx.root = this;\n\n        // Set scissor area of 'fake parent' to stage's viewport.\n        this._parent._viewport = [0, 0, this.ctx.stage.coordsWidth, this.ctx.stage.coordsHeight];\n        this._parent._scissor = this._parent._viewport;\n\n        // When recBoundsMargin is null, the defaults are used (100 for all sides).\n        this._parent._recBoundsMargin = null;\n\n        this._setRecalc(1 + 2 + 4);\n    };\n\n    isAncestorOf(c) {\n        let p = c;\n        while (p = p._parent) {\n            if (this === p) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    isZContext() {\n        return (this._forceZIndexContext || this._renderToTextureEnabled || this._zIndex !== 0 || this._isRoot || !this._parent);\n    };\n\n    findZContext() {\n        if (this.isZContext()) {\n            return this;\n        } else {\n            return this._parent.findZContext();\n        }\n    };\n\n    setZParent(newZParent) {\n        if (this._zParent !== newZParent) {\n            if (this._zParent !== null) {\n                if (this._zIndex !== 0) {\n                    this._zParent.decZContextUsage();\n                }\n\n                // We must filter out this item upon the next resort.\n                this._zParent.enableZSort();\n            }\n\n            if (newZParent !== null) {\n                let hadZContextUsage = (newZParent._zContextUsage > 0);\n\n                // @pre: new parent's children array has already been modified.\n                if (this._zIndex !== 0) {\n                    newZParent.incZContextUsage();\n                }\n\n                if (newZParent._zContextUsage > 0) {\n                    if (!hadZContextUsage && (this._parent === newZParent)) {\n                        // This child was already in the children list.\n                        // Do not add double.\n                    } else {\n                        // Add new child to array.\n                        newZParent._zIndexedChildren.push(this);\n                    }\n\n                    // Order should be checked.\n                    newZParent.enableZSort();\n                }\n            }\n\n            this._zParent = newZParent;\n\n            // Newly added element must be marked for resort.\n            this._zIndexResort = true;\n        }\n    };\n\n    incZContextUsage() {\n        this._zContextUsage++;\n        if (this._zContextUsage === 1) {\n            if (!this._zIndexedChildren) {\n                this._zIndexedChildren = [];\n            }\n            if (this._children) {\n                // Copy.\n                for (let i = 0, n = this._children.length; i < n; i++) {\n                    this._zIndexedChildren.push(this._children[i]);\n                }\n                // Initially, children are already sorted properly (tree order).\n                this._zSort = false;\n            }\n        }\n    };\n\n    decZContextUsage() {\n        this._zContextUsage--;\n        if (this._zContextUsage === 0) {\n            this._zSort = false;\n            this._zIndexedChildren.splice(0);\n        }\n    };\n\n    get zIndex() {\n        return this._zIndex;\n    }\n\n    set zIndex(zIndex) {\n        if (this._zIndex !== zIndex) {\n            this.setHasRenderUpdates(1);\n\n            let newZParent = this._zParent;\n\n            let prevIsZContext = this.isZContext();\n            if (zIndex === 0 && this._zIndex !== 0) {\n                if (this._parent === this._zParent) {\n                    if (this._zParent) {\n                        this._zParent.decZContextUsage();\n                    }\n                } else {\n                    newZParent = this._parent;\n                }\n            } else if (zIndex !== 0 && this._zIndex === 0) {\n                newZParent = this._parent ? this._parent.findZContext() : null;\n                if (newZParent === this._zParent) {\n                    if (this._zParent) {\n                        this._zParent.incZContextUsage();\n                        this._zParent.enableZSort();\n                    }\n                }\n            } else if (zIndex !== this._zIndex) {\n                if (this._zParent && this._zParent._zContextUsage) {\n                    this._zParent.enableZSort();\n                }\n            }\n\n            if (newZParent !== this._zParent) {\n                this.setZParent(null);\n            }\n\n            this._zIndex = zIndex;\n\n            if (newZParent !== this._zParent) {\n                this.setZParent(newZParent);\n            }\n\n            if (prevIsZContext !== this.isZContext()) {\n                if (!this.isZContext()) {\n                    this.disableZContext();\n                } else {\n                    this.enableZContext(this._parent.findZContext());\n                }\n            }\n\n            // Make sure that resort is done.\n            this._zIndexResort = true;\n            if (this._zParent) {\n                this._zParent.enableZSort();\n            }\n        }\n    };\n\n    get forceZIndexContext() {\n        return this._forceZIndexContext;\n    }\n\n    set forceZIndexContext(v) {\n        this.setHasRenderUpdates(1);\n\n        let prevIsZContext = this.isZContext();\n        this._forceZIndexContext = v;\n\n        if (prevIsZContext !== this.isZContext()) {\n            if (!this.isZContext()) {\n                this.disableZContext();\n            } else {\n                this.enableZContext(this._parent.findZContext());\n            }\n        }\n    };\n\n    enableZContext(prevZContext) {\n        if (prevZContext && prevZContext._zContextUsage > 0) {\n            // Transfer from upper z context to this z context.\n            const results = this._getZIndexedDescs();\n            results.forEach((c) => {\n                if (this.isAncestorOf(c) && c._zIndex !== 0) {\n                    c.setZParent(this);\n                }\n            });\n        }\n    }\n\n    _getZIndexedDescs() {\n        const results = [];\n        if (this._children) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                this._children[i]._getZIndexedDescsRec(results);\n            }\n        }\n        return results;\n    }\n\n    _getZIndexedDescsRec(results) {\n        if (this._zIndex) {\n            results.push(this);\n        } else if (this._children && !this.isZContext()) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                this._children[i]._getZIndexedDescsRec(results);\n            }\n        }\n    }\n\n    disableZContext() {\n        // Transfer from this z context to upper z context.\n        if (this._zContextUsage > 0) {\n            let newZParent = this._parent.findZContext();\n\n            // Make sure that z-indexed children are up to date (old ones removed).\n            if (this._zSort) {\n                this.sortZIndexedChildren();\n            }\n\n            this._zIndexedChildren.slice().forEach(function (c) {\n                if (c._zIndex !== 0) {\n                    c.setZParent(newZParent);\n                }\n            });\n        }\n    };\n\n    get colorUl() {\n        return this._colorUl;\n    }\n\n    set colorUl(color) {\n        if (this._colorUl !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorUl = color;\n        }\n    }\n\n    get colorUr() {\n        return this._colorUr;\n    }\n\n    set colorUr(color) {\n        if (this._colorUr !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorUr = color;\n        }\n    };\n\n    get colorBl() {\n        return this._colorBl;\n    }\n\n    set colorBl(color) {\n        if (this._colorBl !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorBl = color;\n        }\n    };\n\n    get colorBr() {\n        return this._colorBr;\n    }\n\n    set colorBr(color) {\n        if (this._colorBr !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorBr = color;\n        }\n    };\n\n\n    set onUpdate(f) {\n        this._onUpdate = f;\n        this._setRecalc(7);\n    }\n\n    set onAfterUpdate(f) {\n        this._onAfterUpdate = f;\n        this._setRecalc(7);\n    }\n\n    set onAfterCalcs(f) {\n        this._onAfterCalcs = f;\n        this._setRecalc(7);\n    }\n\n    get shader() {\n        return this._shader;\n    }\n\n    set shader(v) {\n        this.setHasRenderUpdates(1);\n\n        let prevShader = this._shader;\n        this._shader = v;\n        if (!v && prevShader) {\n            // Disabled shader.\n            let newShaderOwner = (this._parent && !this._parent._renderToTextureEnabled ? this._parent._shaderOwner : null);\n            this._setShaderOwnerRecursive(newShaderOwner);\n        } else if (v) {\n            // Enabled shader.\n            this._setShaderOwnerRecursive(this);\n        }\n    }\n\n    get activeShader() {\n        return this._shaderOwner ? this._shaderOwner.shader : this.renderState.defaultShader;\n    }\n\n    get activeShaderOwner() {\n        return this._shaderOwner;\n    }\n\n    get clipping() {\n        return this._clipping;\n    }\n\n    set clipping(v) {\n        if (this._clipping !== v) {\n            this._clipping = v;\n\n            // Force update of scissor by updating translate.\n            // Alpha must also be updated because the scissor area may have been empty.\n            this._setRecalc(1 + 2);\n        }\n    }\n\n    get clipbox() {\n        return this._clipbox;\n    }\n\n    set clipbox(v) {\n        // In case of out-of-bounds element, all children will also be ignored.\n        // It will save us from executing the update/render loops for those.\n        // The optimization will be used immediately during the next frame.\n        this._clipbox = v;\n    }\n\n    _setShaderOwnerRecursive(elementCore) {\n        this._shaderOwner = elementCore;\n\n        if (this._children && !this._renderToTextureEnabled) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                let c = this._children[i];\n                if (!c._shader) {\n                    c._setShaderOwnerRecursive(elementCore);\n                    c._hasRenderUpdates = 3;\n                }\n            }\n        }\n    };\n\n    _setShaderOwnerChildrenRecursive(elementCore) {\n        if (this._children) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                let c = this._children[i];\n                if (!c._shader) {\n                    c._setShaderOwnerRecursive(elementCore);\n                    c._hasRenderUpdates = 3;\n                }\n            }\n        }\n    };\n\n    _hasRenderContext() {\n        return this._renderContext !== this._worldContext;\n    }\n\n    get renderContext() {\n        return this._renderContext;\n    }\n\n    updateRenderToTextureEnabled() {\n        // Enforce texturizer initialisation.\n        let v = this.texturizer._enabled;\n\n        if (v) {\n            this._enableRenderToTexture();\n        } else {\n            this._disableRenderToTexture();\n            this._texturizer.releaseRenderTexture();\n        }\n    }\n\n    _enableRenderToTexture() {\n        if (!this._renderToTextureEnabled) {\n            let prevIsZContext = this.isZContext();\n\n            this._renderToTextureEnabled = true;\n\n            this._renderContext = new ElementCoreContext();\n\n            // If render to texture is active, a new shader context is started.\n            this._setShaderOwnerChildrenRecursive(null);\n\n            if (!prevIsZContext) {\n                // Render context forces z context.\n                this.enableZContext(this._parent ? this._parent.findZContext() : null);\n            }\n\n            this.setHasRenderUpdates(3);\n\n            // Make sure that the render coordinates get updated.\n            this._setRecalc(7);\n\n            this.render = this._renderAdvanced;\n        }\n    }\n\n    _disableRenderToTexture() {\n        if (this._renderToTextureEnabled) {\n            this._renderToTextureEnabled = false;\n\n            this._setShaderOwnerChildrenRecursive(this._shaderOwner);\n\n            this._renderContext = this._worldContext;\n\n            if (!this.isZContext()) {\n                this.disableZContext();\n            }\n\n            // Make sure that the render coordinates get updated.\n            this._setRecalc(7);\n\n            this.setHasRenderUpdates(3);\n\n            this.render = this._renderSimple;\n        }\n    }\n\n    isWhite() {\n        return (this._colorUl === 0xFFFFFFFF) && (this._colorUr === 0xFFFFFFFF) && (this._colorBl === 0xFFFFFFFF) && (this._colorBr === 0xFFFFFFFF);\n    }\n\n    hasSimpleTexCoords() {\n        return (this._ulx === 0) && (this._uly === 0) && (this._brx === 1) && (this._bry === 1);\n    }\n\n    _stashTexCoords() {\n        this._stashedTexCoords = [this._ulx, this._uly, this._brx, this._bry];\n        this._ulx = 0;\n        this._uly = 0;\n        this._brx = 1;\n        this._bry = 1;\n    }\n\n    _unstashTexCoords() {\n        this._ulx = this._stashedTexCoords[0];\n        this._uly = this._stashedTexCoords[1];\n        this._brx = this._stashedTexCoords[2];\n        this._bry = this._stashedTexCoords[3];\n        this._stashedTexCoords = null;\n    }\n\n    _stashColors() {\n        this._stashedColors = [this._colorUl, this._colorUr, this._colorBr, this._colorBl];\n        this._colorUl = 0xFFFFFFFF;\n        this._colorUr = 0xFFFFFFFF;\n        this._colorBr = 0xFFFFFFFF;\n        this._colorBl = 0xFFFFFFFF;\n    }\n\n    _unstashColors() {\n        this._colorUl = this._stashedColors[0];\n        this._colorUr = this._stashedColors[1];\n        this._colorBr = this._stashedColors[2];\n        this._colorBl = this._stashedColors[3];\n        this._stashedColors = null;\n    }\n\n    isVisible() {\n        return (this._localAlpha > 1e-14);\n    };\n\n    get outOfBounds() {\n        return this._outOfBounds;\n    }\n\n    set boundsMargin(v) {\n\n        /**\n         *  null: inherit from parent.\n         *  number[4]: specific margins: left, top, right, bottom.\n         */\n        this._boundsMargin = v ? v.slice() : null;\n\n        // We force recalc in order to set all boundsMargin recursively during the next update.\n        this._triggerRecalcTranslate();\n    }\n\n    get boundsMargin() {\n        return this._boundsMargin;\n    }\n\n    update() {\n        this._recalc |= this._parent._pRecalc;\n\n        if (this._layout && this._layout.isEnabled()) {\n            if (this._recalc & 256) {\n                this._layout.layoutFlexTree();\n            }\n        } else if ((this._recalc & 2) && this._optFlags) {\n            this._applyRelativeDimFuncs();\n        }\n\n        if (this._onUpdate) {\n            // Block all 'upwards' updates when changing things in this branch.\n            this._hasUpdates = true;\n            this._onUpdate(this.element, this);\n        }\n\n        const pw = this._parent._worldContext;\n        let w = this._worldContext;\n        const visible = (pw.alpha && this._localAlpha);\n\n        /**\n         * We must update if:\n         * - branch contains updates (even when invisible because it may contain z-indexed descendants)\n         * - there are (inherited) updates and this branch is visible\n         * - this branch becomes invisible (descs may be z-indexed so we must update all alpha values)\n         */\n        if (this._hasUpdates || (this._recalc && visible) || (w.alpha && !visible)) {\n            let recalc = this._recalc;\n\n            // Update world coords/alpha.\n            if (recalc & 1) {\n                if (!w.alpha && visible) {\n                    // Becomes visible.\n                    this._hasRenderUpdates = 3;\n                }\n                w.alpha = pw.alpha * this._localAlpha;\n\n                if (w.alpha < 1e-14) {\n                    // Tiny rounding errors may cause failing visibility tests.\n                    w.alpha = 0;\n                }\n            }\n\n            if (recalc & 6) {\n                w.px = pw.px + this._localPx * pw.ta;\n                w.py = pw.py + this._localPy * pw.td;\n                if (pw.tb !== 0) w.px += this._localPy * pw.tb;\n                if (pw.tc !== 0) w.py += this._localPx * pw.tc;\n            }\n\n            if (recalc & 4) {\n                w.ta = this._localTa * pw.ta;\n                w.tb = this._localTd * pw.tb;\n                w.tc = this._localTa * pw.tc;\n                w.td = this._localTd * pw.td;\n\n                if (this._isComplex) {\n                    w.ta += this._localTc * pw.tb;\n                    w.tb += this._localTb * pw.ta;\n                    w.tc += this._localTc * pw.td;\n                    w.td += this._localTb * pw.tc;\n                }\n            }\n\n            // Update render coords/alpha.\n            const pr = this._parent._renderContext;\n            if (this._parent._hasRenderContext()) {\n                const init = this._renderContext === this._worldContext;\n                if (init) {\n                    // First render context build: make sure that it is fully initialized correctly.\n                    // Otherwise, if we get into bounds later, the render context would not be initialized correctly.\n                    this._renderContext = new ElementCoreContext();\n                }\n\n                const r = this._renderContext;\n\n                // Update world coords/alpha.\n                if (init || (recalc & 1)) {\n                    r.alpha = pr.alpha * this._localAlpha;\n\n                    if (r.alpha < 1e-14) {\n                        r.alpha = 0;\n                    }\n                }\n\n                if (init || (recalc & 6)) {\n                    r.px = pr.px + this._localPx * pr.ta;\n                    r.py = pr.py + this._localPy * pr.td;\n                    if (pr.tb !== 0) r.px += this._localPy * pr.tb;\n                    if (pr.tc !== 0) r.py += this._localPx * pr.tc;\n                }\n\n                if (init) {\n                    // We set the recalc toggle, because we must make sure that the scissor is updated.\n                    recalc |= 2;\n                }\n\n                if (init || (recalc & 4)) {\n                    r.ta = this._localTa * pr.ta;\n                    r.tb = this._localTd * pr.tb;\n                    r.tc = this._localTa * pr.tc;\n                    r.td = this._localTd * pr.td;\n\n                    if (this._isComplex) {\n                        r.ta += this._localTc * pr.tb;\n                        r.tb += this._localTb * pr.ta;\n                        r.tc += this._localTc * pr.td;\n                        r.td += this._localTb * pr.tc;\n                    }\n                }\n            } else {\n                this._renderContext = this._worldContext;\n            }\n\n            if (this.ctx.updateTreeOrder === -1) {\n                this.ctx.updateTreeOrder = this._updateTreeOrder + 1;\n            } else {\n                this._updateTreeOrder = this.ctx.updateTreeOrder++;\n            }\n\n            // Determine whether we must use a 'renderTexture'.\n            const useRenderToTexture = this._renderToTextureEnabled && this._texturizer.mustRenderToTexture();\n            if (this._useRenderToTexture !== useRenderToTexture) {\n                // Coords must be changed.\n                this._recalc |= 2 + 4;\n\n                // Scissor may change: force update.\n                recalc |= 2;\n\n                if (!this._useRenderToTexture) {\n                    // We must release the texture.\n                    this._texturizer.release();\n                }\n            }\n            this._useRenderToTexture = useRenderToTexture;\n\n            const r = this._renderContext;\n\n            const bboxW = this._dimsUnknown ? 2048 : this._w;\n            const bboxH = this._dimsUnknown ? 2048 : this._h;\n\n            // Calculate a bbox for this element.\n            let sx, sy, ex, ey;\n            const rComplex = (r.tb !== 0) || (r.tc !== 0) || (r.ta < 0) || (r.td < 0);\n            if (rComplex) {\n                sx = Math.min(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                ex = Math.max(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                sy = Math.min(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n                ey = Math.max(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n            } else {\n                sx = r.px;\n                ex = r.px + r.ta * bboxW;\n                sy = r.py;\n                ey = r.py + r.td * bboxH;\n            }\n\n            if (this._dimsUnknown && (rComplex || this._localTa < 1 || this._localTb < 1)) {\n                // If we are dealing with a non-identity matrix, we must extend the bbox so that withinBounds and\n                //  scissors will include the complete range of (positive) dimensions up to ,lh.\n                const nx = this._x * pr.ta + this._y * pr.tb + pr.px;\n                const ny = this._x * pr.tc + this._y * pr.td + pr.py;\n                if (nx < sx) sx = nx;\n                if (ny < sy) sy = ny;\n                if (nx > ex) ex = nx;\n                if (ny > ey) ey = ny;\n            }\n\n            if (recalc & 6 || !this._scissor /* initial */) {\n                // Determine whether we must 'clip'.\n                if (this._clipping && r.isSquare()) {\n                    // If the parent renders to a texture, it's scissor should be ignored;\n                    const area = this._parent._useRenderToTexture ? this._parent._viewport : this._parent._scissor;\n                    if (area) {\n                        // Merge scissor areas.\n                        const lx = Math.max(area[0], sx);\n                        const ly = Math.max(area[1], sy);\n                        this._scissor = [\n                            lx,\n                            ly,\n                            Math.min(area[2] + area[0], ex) - lx,\n                            Math.min(area[3] + area[1], ey) - ly\n                        ];\n                    } else {\n                        this._scissor = [sx, sy, ex - sx, ey - sy];\n                    }\n                } else {\n                    // No clipping: reuse parent scissor.\n                    this._scissor = this._parent._useRenderToTexture ? this._parent._viewport : this._parent._scissor;\n                }\n            }\n\n            // Calculate the outOfBounds margin.\n            if (this._boundsMargin) {\n                this._recBoundsMargin = this._boundsMargin;\n            } else {\n                this._recBoundsMargin = this._parent._recBoundsMargin;\n            }\n\n            if (this._onAfterCalcs) {\n                // After calcs may change render coords, scissor and/or recBoundsMargin.\n                if (this._onAfterCalcs(this.element)) {\n                    // Recalculate bbox.\n                    if (rComplex) {\n                        sx = Math.min(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                        ex = Math.max(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                        sy = Math.min(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n                        ey = Math.max(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n                    } else {\n                        sx = r.px;\n                        ex = r.px + r.ta * bboxW;\n                        sy = r.py;\n                        ey = r.py + r.td * bboxH;\n                    }\n\n                    if (this._dimsUnknown && (rComplex || this._localTa < 1 || this._localTb < 1)) {\n                        const nx = this._x * pr.ta + this._y * pr.tb + pr.px;\n                        const ny = this._x * pr.tc + this._y * pr.td + pr.py;\n                        if (nx < sx) sx = nx;\n                        if (ny < sy) sy = ny;\n                        if (nx > ex) ex = nx;\n                        if (ny > ey) ey = ny;\n                    }\n                }\n            }\n\n            if (this._parent._outOfBounds === 2) {\n                // Inherit parent out of boundsness.\n                this._outOfBounds = 2;\n\n                if (this._withinBoundsMargin) {\n                    this._withinBoundsMargin = false;\n                    this.element._disableWithinBoundsMargin();\n                }\n            } else {\n                if (recalc & 6) {\n                    // Recheck if element is out-of-bounds (all settings that affect this should enable recalc bit 2 or 4).\n                    this._outOfBounds = 0;\n                    let withinMargin = true;\n\n                    // Offscreens are always rendered as long as the parent is within bounds.\n                    if (!this._renderToTextureEnabled || !this._texturizer || !this._texturizer.renderOffscreen) {\n                        if (this._scissor && (this._scissor[2] <= 0 || this._scissor[3] <= 0)) {\n                            // Empty scissor area.\n                            this._outOfBounds = 2;\n                        } else {\n                            // Use bbox to check out-of-boundness.\n                            if ((this._scissor[0] > ex) ||\n                                (this._scissor[1] > ey) ||\n                                (sx > (this._scissor[0] + this._scissor[2])) ||\n                                (sy > (this._scissor[1] + this._scissor[3]))\n                            ) {\n                                this._outOfBounds = 1;\n                            }\n\n                            if (this._outOfBounds) {\n                                if (this._clipping || this._useRenderToTexture || (this._clipbox && (bboxW && bboxH))) {\n                                    this._outOfBounds = 2;\n                                }\n                            }\n                        }\n\n                        withinMargin = (this._outOfBounds === 0);\n                        if (!withinMargin) {\n                            // Re-test, now with margins.\n                            if (this._recBoundsMargin) {\n                                withinMargin = !((ex < this._scissor[0] - this._recBoundsMargin[2]) ||\n                                    (ey < this._scissor[1] - this._recBoundsMargin[3]) ||\n                                    (sx > this._scissor[0] + this._scissor[2] + this._recBoundsMargin[0]) ||\n                                    (sy > this._scissor[1] + this._scissor[3] + this._recBoundsMargin[1]));\n                            } else {\n                                withinMargin = !((ex < this._scissor[0] - 100) ||\n                                    (ey < this._scissor[1] - 100) ||\n                                    (sx > this._scissor[0] + this._scissor[2] + 100) ||\n                                    (sy > this._scissor[1] + this._scissor[3] + 100));\n                            }\n                            if (withinMargin && this._outOfBounds === 2) {\n                                // Children must be visited because they may contain elements that are within margin, so must be visible.\n                                this._outOfBounds = 1;\n                            }\n                        }\n                    }\n\n                    if (this._withinBoundsMargin !== withinMargin) {\n                        this._withinBoundsMargin = withinMargin;\n\n                        if (this._withinBoundsMargin) {\n                            // This may update things (txLoaded events) in the element itself, but also in descendants and ancestors.\n\n                            // Changes in ancestors should be executed during the next call of the stage update. But we must\n                            // take care that the _recalc and _hasUpdates flags are properly registered. That's why we clear\n                            // both before entering the children, and use _pRecalc to transfer inherited updates instead of\n                            // _recalc directly.\n\n                            // Changes in descendants are automatically executed within the current update loop, though we must\n                            // take care to not update the hasUpdates flag unnecessarily in ancestors. We achieve this by making\n                            // sure that the hasUpdates flag of this element is turned on, which blocks it for ancestors.\n                            this._hasUpdates = true;\n\n                            const recalc = this._recalc;\n                            this._recalc = 0;\n                            this.element._enableWithinBoundsMargin();\n\n                            if (this._recalc) {\n                                // This element needs to be re-updated now, because we want the dimensions (and other changes) to be updated.\n                                return this.update();\n                            }\n\n                            this._recalc = recalc;\n                        } else {\n                            this.element._disableWithinBoundsMargin();\n                        }\n                    }\n                }\n            }\n\n            if (this._useRenderToTexture) {\n                // Set viewport necessary for children scissor calculation.\n                if (this._viewport) {\n                    this._viewport[2] = bboxW;\n                    this._viewport[3] = bboxH;\n                } else {\n                    this._viewport = [0, 0, bboxW, bboxH];\n                }\n            }\n\n            // Filter out bits that should not be copied to the children (currently all are).\n            this._pRecalc = (this._recalc & 135);\n\n            // Clear flags so that future updates are properly detected.\n            this._recalc = 0;\n            this._hasUpdates = false;\n\n            if (this._outOfBounds < 2) {\n                if (this._useRenderToTexture) {\n                    if (this._worldContext.isIdentity()) {\n                        // Optimization.\n                        // The world context is already identity: use the world context as render context to prevents the\n                        // ancestors from having to update the render context.\n                        this._renderContext = this._worldContext;\n                    } else {\n                        // Temporarily replace the render coord attribs by the identity matrix.\n                        // This allows the children to calculate the render context.\n                        this._renderContext = ElementCoreContext.IDENTITY;\n                    }\n                }\n\n                if (this._children) {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        this._children[i].update();\n                    }\n                }\n\n                if (this._useRenderToTexture) {\n                    this._renderContext = r;\n                }\n            } else {\n                if (this._children) {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        if (this._children[i]._hasUpdates) {\n                            this._children[i].update();\n                        } else {\n                            // Make sure we don't lose the 'inherited' updates.\n                            this._children[i]._recalc |= this._pRecalc;\n                            this._children[i].updateOutOfBounds();\n                        }\n                    }\n                }\n            }\n\n            if (this._onAfterUpdate) {\n                this._onAfterUpdate(this.element);\n            }\n        } else {\n            if (this.ctx.updateTreeOrder === -1 || this._updateTreeOrder >= this.ctx.updateTreeOrder) {\n                // If new tree order does not interfere with the current (gaps allowed) there's no need to traverse the branch.\n                this.ctx.updateTreeOrder = -1;\n            } else {\n                this.updateTreeOrder();\n            }\n        }\n    }\n\n    _applyRelativeDimFuncs() {\n        if (this._optFlags & 1) {\n            const x = this._funcX(this._parent.w);\n            if (x !== this._x) {\n                this._localPx += (x - this._x);\n                this._x = x;\n            }\n        }\n        if (this._optFlags & 2) {\n            const y = this._funcY(this._parent.h);\n            if (y !== this._y) {\n                this._localPy += (y - this._y);\n                this._y = y;\n            }\n        }\n\n        let changedDims = false;\n        if (this._optFlags & 4) {\n            const w = this._funcW(this._parent.w);\n            if (w !== this._w) {\n                this._w = w;\n                changedDims = true;\n            }\n        }\n        if (this._optFlags & 8) {\n            const h = this._funcH(this._parent.h);\n            if (h !== this._h) {\n                this._h = h;\n                changedDims = true;\n            }\n        }\n\n        if (changedDims) {\n            // Recalc mount, scale position.\n            this._recalcLocalTranslate();\n\n            this.element.onDimensionsChanged(this._w, this._h);\n        }\n    }\n\n    updateOutOfBounds() {\n        // Propagate outOfBounds flag to descendants (necessary because of z-indexing).\n        // Invisible elements are not drawn anyway. When alpha is updated, so will _outOfBounds.\n        if (this._outOfBounds !== 2 && this._renderContext.alpha > 0) {\n\n            // Inherit parent out of boundsness.\n            this._outOfBounds = 2;\n\n            if (this._withinBoundsMargin) {\n                this._withinBoundsMargin = false;\n                this.element._disableWithinBoundsMargin();\n            }\n\n            if (this._children) {\n                for (let i = 0, n = this._children.length; i < n; i++) {\n                    this._children[i].updateOutOfBounds();\n                }\n            }\n        }\n    }\n\n    updateTreeOrder() {\n        if (this._localAlpha && (this._outOfBounds !== 2)) {\n            this._updateTreeOrder = this.ctx.updateTreeOrder++;\n\n            if (this._children) {\n                for (let i = 0, n = this._children.length; i < n; i++) {\n                    this._children[i].updateTreeOrder();\n                }\n            }\n        }\n    }\n\n    _renderSimple() {\n        this._hasRenderUpdates = 0;\n\n        if (this._zSort) {\n            this.sortZIndexedChildren();\n        }\n\n        if (this._outOfBounds < 2 && this._renderContext.alpha) {\n            let renderState = this.renderState;\n\n            if ((this._outOfBounds === 0) && this._displayedTextureSource) {\n                renderState.setShader(this.activeShader, this._shaderOwner);\n                renderState.setScissor(this._scissor);\n                this.renderState.addQuad(this);\n            }\n\n            // Also add children to the VBO.\n            if (this._children) {\n                if (this._zContextUsage) {\n                    for (let i = 0, n = this._zIndexedChildren.length; i < n; i++) {\n                        this._zIndexedChildren[i].render();\n                    }\n                } else {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        if (this._children[i]._zIndex === 0) {\n                            // If zIndex is set, this item already belongs to a zIndexedChildren array in one of the ancestors.\n                            this._children[i].render();\n                        }\n\n                    }\n                }\n            }\n        }\n    }\n\n    _renderAdvanced() {\n        const hasRenderUpdates = this._hasRenderUpdates;\n\n        // We must clear the hasRenderUpdates flag before rendering, because updating result textures in combination\n        // with z-indexing may trigger render updates on a render branch that is 'half done'.\n        // We need to ensure that the full render branch is marked for render updates, not only half (leading to freeze).\n        this._hasRenderUpdates = 0;\n\n        if (this._zSort) {\n            this.sortZIndexedChildren();\n        }\n\n        if (this._outOfBounds < 2 && this._renderContext.alpha) {\n            let renderState = this.renderState;\n\n            let mustRenderChildren = true;\n            let renderTextureInfo;\n            let prevRenderTextureInfo;\n            if (this._useRenderToTexture) {\n                if (this._w === 0 || this._h === 0) {\n                    // Ignore this branch and don't draw anything.\n                    return;\n                } else if (!this._texturizer.hasRenderTexture() || (hasRenderUpdates >= 3)) {\n                    // Tell the renderer we're rendering a renderToTexture element in this frame\n                    this.ctx.renderToTextureCount++;\n                    // Switch to default shader for building up the render texture.\n                    renderState.setShader(renderState.defaultShader, this);\n\n                    prevRenderTextureInfo = renderState.renderTextureInfo;\n\n                    renderTextureInfo = {\n                        nativeTexture: null,\n                        offset: 0,  // Set by CoreRenderState.\n                        w: this._w,\n                        h: this._h,\n                        empty: true,\n                        cleared: false,\n                        ignore: false,\n                        cache: false\n                    };\n\n                    if (this._texturizer.hasResultTexture() || (!renderState.isCachingTexturizer && (hasRenderUpdates < 3))) {\n                        /**\n                         * We don't always cache render textures.\n                         *\n                         * The rule is, that caching for a specific render texture is only enabled if:\n                         * - There is a result texture to be updated.\n                         * - There were no render updates -within the contents- since last frame (ElementCore.hasRenderUpdates < 3)\n                         * - AND there are no ancestors that are being cached during this frame (CoreRenderState.isCachingTexturizer)\n                         *   If an ancestor is cached anyway, it's probably not necessary to keep deeper caches. If the top level is to\n                         *   change while a lower one is not, that lower level will be cached instead.\n                         *\n                         * In case of the fast blur element, this prevents having to cache all blur levels and stages, saving a huge amount\n                         * of GPU memory!\n                         *\n                         * Especially when using multiple stacked layers of the same dimensions that are RTT this will have a very\n                         * noticable effect on performance as less render textures need to be allocated.\n                         */\n                        renderTextureInfo.cache = true;\n                        renderState.isCachingTexturizer = true;\n                    }\n\n                    if (!this._texturizer.hasResultTexture()) {\n                        // We can already release the current texture to the pool, as it will be rebuild anyway.\n                        // In case of multiple layers of 'filtering', this may save us from having to create one\n                        //  render-to-texture layer.\n                        // Notice that we don't do this when there is a result texture, as any other element may rely on\n                        //  that result texture being filled.\n                        this._texturizer.releaseRenderTexture();\n                    }\n\n                    renderState.setRenderTextureInfo(renderTextureInfo);\n                    renderState.setScissor(null);\n\n                    if (this._displayedTextureSource) {\n                        let r = this._renderContext;\n\n                        // Use an identity context for drawing the displayed texture to the render texture.\n                        this._renderContext = ElementCoreContext.IDENTITY;\n\n                        // Add displayed texture source in local coordinates.\n                        this.renderState.addQuad(this);\n\n                        this._renderContext = r;\n                    }\n                } else {\n                    mustRenderChildren = false;\n                }\n            } else {\n                if ((this._outOfBounds === 0) && this._displayedTextureSource) {\n                    renderState.setShader(this.activeShader, this._shaderOwner);\n                    renderState.setScissor(this._scissor);\n                    this.renderState.addQuad(this);\n                }\n            }\n\n            // Also add children to the VBO.\n            if (mustRenderChildren && this._children) {\n                if (this._zContextUsage) {\n                    for (let i = 0, n = this._zIndexedChildren.length; i < n; i++) {\n                        this._zIndexedChildren[i].render();\n                    }\n                } else {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        if (this._children[i]._zIndex === 0) {\n                            // If zIndex is set, this item already belongs to a zIndexedChildren array in one of the ancestors.\n                            this._children[i].render();\n                        }\n                    }\n                }\n            }\n\n            if (this._useRenderToTexture) {\n                let updateResultTexture = false;\n                if (mustRenderChildren) {\n                    // Finished refreshing renderTexture.\n                    renderState.finishedRenderTexture();\n\n                    // If nothing was rendered, we store a flag in the texturizer and prevent unnecessary\n                    //  render-to-texture and filtering.\n                    this._texturizer.empty = renderTextureInfo.empty;\n\n                    if (renderTextureInfo.empty) {\n                        // We ignore empty render textures and do not draw the final quad.\n\n                        // The following cleans up memory and enforces that the result texture is also cleared.\n                        this._texturizer.releaseRenderTexture();\n                    } else if (renderTextureInfo.nativeTexture) {\n                        // If nativeTexture is set, we can reuse that directly instead of creating a new render texture.\n                        this._texturizer.reuseTextureAsRenderTexture(renderTextureInfo.nativeTexture);\n\n                        renderTextureInfo.ignore = true;\n                    } else {\n                        if (this._texturizer.renderTextureReused) {\n                            // Quad operations must be written to a render texture actually owned.\n                            this._texturizer.releaseRenderTexture();\n                        }\n                        // Just create the render texture.\n                        renderTextureInfo.nativeTexture = this._texturizer.getRenderTexture();\n                    }\n\n                    // Restore the parent's render texture.\n                    renderState.setRenderTextureInfo(prevRenderTextureInfo);\n\n                    updateResultTexture = true;\n                }\n\n                if (!this._texturizer.empty) {\n                    let resultTexture = this._texturizer.getResultTexture();\n                    if (updateResultTexture) {\n                        if (resultTexture) {\n                            // Logging the update frame can be handy for userland.\n                            resultTexture.update = renderState.stage.frameCounter;\n                        }\n                        this._texturizer.updateResultTexture();\n                    }\n\n                    if (!this._texturizer.renderOffscreen) {\n                        // Render result texture to the actual render target.\n                        renderState.setShader(this.activeShader, this._shaderOwner);\n                        renderState.setScissor(this._scissor);\n\n                        // If no render texture info is set, the cache can be reused.\n                        const cache = !renderTextureInfo || renderTextureInfo.cache;\n\n                        renderState.setTexturizer(this._texturizer, cache);\n                        this._stashTexCoords();\n                        if (!this._texturizer.colorize) this._stashColors();\n                        this.renderState.addQuad(this, true);\n                        if (!this._texturizer.colorize) this._unstashColors();\n                        this._unstashTexCoords();\n                        renderState.setTexturizer(null);\n                    }\n                }\n            }\n\n            if (renderTextureInfo && renderTextureInfo.cache) {\n                // Allow siblings to cache.\n                renderState.isCachingTexturizer = false;\n            }\n        }\n    }\n\n    get zSort() {\n        return this._zSort;\n    }\n\n    sortZIndexedChildren() {\n        /**\n         * We want to avoid resorting everything. Instead, we do a single pass of the full array:\n         * - filtering out elements with a different zParent than this (were removed)\n         * - filtering out, but also gathering (in a temporary array) the elements that have zIndexResort flag\n         * - then, finally, we merge-sort both the new array and the 'old' one\n         * - element may have been added 'double', so when merge-sorting also check for doubles.\n         * - if the old one is larger (in size) than it should be, splice off the end of the array.\n         */\n\n        const n = this._zIndexedChildren.length;\n        let ptr = 0;\n        const a = this._zIndexedChildren;\n\n        // Notice that items may occur multiple times due to z-index changing.\n        const b = [];\n        for (let i = 0; i < n; i++) {\n            if (a[i]._zParent === this) {\n                if (a[i]._zIndexResort) {\n                    b.push(a[i]);\n                } else {\n                    if (ptr !== i) {\n                        a[ptr] = a[i];\n                    }\n                    ptr++;\n                }\n            }\n        }\n\n        const m = b.length;\n        if (m) {\n            for (let j = 0; j < m; j++) {\n                b[j]._zIndexResort = false;\n            }\n\n            b.sort(ElementCore.sortZIndexedChildren);\n            const n = ptr;\n            if (!n) {\n                ptr = 0;\n                let j = 0;\n                do {\n                    a[ptr++] = b[j++];\n                } while (j < m);\n\n                if (a.length > ptr) {\n                    // Slice old (unnecessary) part off array.\n                    a.splice(ptr);\n                }\n            } else {\n                a.splice(n); // Remove items that were sorted in b array, so that we can sort a\n+               // Beware that the function passed here to Array.sort must be stable\n+               a.sort(ElementCore.sortZIndexedChildren); // Needed because items with same _zIndex may not be ordered by _updateTreeOrder\n                // Merge-sort arrays;\n                ptr = 0;\n                let i = 0;\n                let j = 0;\n                const mergeResult = [];\n                do {\n                    const v = (a[i]._zIndex === b[j]._zIndex ? a[i]._updateTreeOrder - b[j]._updateTreeOrder : a[i]._zIndex - b[j]._zIndex);\n\n                    const add = v > 0 ? b[j++] : a[i++];\n\n                    if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\n                        mergeResult[ptr++] = add;\n                    }\n\n                    if (i >= n) {\n                        do {\n                            const add = b[j++];\n                            if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\n                                mergeResult[ptr++] = add;\n                            }\n                        } while (j < m);\n                        break;\n                    } else if (j >= m) {\n                        do {\n                            const add = a[i++];\n                            if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\n                                mergeResult[ptr++] = add;\n                            }\n                        } while (i < n);\n                        break;\n                    }\n                } while (true);\n\n                this._zIndexedChildren = mergeResult;\n            }\n        } else {\n            if (a.length > ptr) {\n                // Slice old (unnecessary) part off array.\n                a.splice(ptr);\n            }\n        }\n\n        this._zSort = false;\n    };\n\n    get localTa() {\n        return this._localTa;\n    };\n\n    get localTb() {\n        return this._localTb;\n    };\n\n    get localTc() {\n        return this._localTc;\n    };\n\n    get localTd() {\n        return this._localTd;\n    };\n\n    get element() {\n        return this._element;\n    }\n\n    get renderUpdates() {\n        return this._hasRenderUpdates;\n    }\n\n    get texturizer() {\n        if (!this._texturizer) {\n            this._texturizer = new ElementTexturizer(this);\n        }\n        return this._texturizer;\n    }\n\n    getCornerPoints() {\n        let w = this._worldContext;\n\n        return [\n            w.px,\n            w.py,\n            w.px + this._w * w.ta,\n            w.py + this._w * w.tc,\n            w.px + this._w * w.ta + this._h * w.tb,\n            w.py + this._w * w.tc + this._h * w.td,\n            w.px + this._h * w.tb,\n            w.py + this._h * w.td\n        ];\n    };\n\n    getRenderTextureCoords(relX, relY) {\n        let r = this._renderContext;\n        return [\n            r.px + r.ta * relX + r.tb * relY,\n            r.py + r.tc * relX + r.td * relY\n        ];\n    }\n\n    getAbsoluteCoords(relX, relY) {\n        let w = this._renderContext;\n        return [\n            w.px + w.ta * relX + w.tb * relY,\n            w.py + w.tc * relX + w.td * relY\n        ];\n    }\n\n    collectAtCoord(x, y, children) {\n        // return when branch is hidden\n        if (this._renderContext.alpha === 0) {\n            return;\n        }\n\n        if (this.inBound(x, y)) {\n            if (this._scissor) {\n                if (this.inScissor()) {\n                    children.push(this);\n                }\n            } else {\n                children.push(this);\n            }\n        }\n\n        if (this._children) {\n            const j = this._children.length;\n            for (let i = 0; i < j; i++) {\n                this._children[i].collectAtCoord(x, y, children);\n            }\n        }\n\n        return children.sort(ElementCore.sortZIndexedChildren);\n    }\n\n    inBound(tx, ty) {\n        const c = this.getCornerPoints();\n        return tx > c[0] && tx < c[2] && ty > c[1] && ty < c[7];\n    }\n\n    inScissor() {\n        const sc = this._scissor;\n        const c = this.getCornerPoints();\n\n        return c[2] >= sc[0] && c[0] <= sc[0] + sc[2] && c[7] >= sc[1] && c[1] <= sc[1] + sc[3];\n    }\n\n    get layout() {\n        this._ensureLayout();\n        return this._layout;\n    }\n\n    get flex() {\n        return this._layout ? this._layout.flex : null;\n    }\n\n    set flex(v) {\n        this.layout.flex = v;\n    }\n\n    get flexItem() {\n        return this._layout ? this._layout.flexItem : null;\n    }\n\n    set flexItem(v) {\n        this.layout.flexItem = v;\n    }\n\n    isFlexItem() {\n        return !!this._layout && this._layout.isFlexItemEnabled();\n    }\n\n    isFlexContainer() {\n        return !!this._layout && this._layout.isFlexEnabled();\n    }\n\n    enableFlexLayout() {\n        this._ensureLayout();\n    }\n\n    _ensureLayout() {\n        if (!this._layout) {\n            this._layout = new FlexTarget(this);\n        }\n    }\n\n    disableFlexLayout() {\n        this._triggerRecalcTranslate();\n    }\n\n    hasFlexLayout() {\n        return (this._layout && this._layout.isEnabled());\n    }\n\n    setLayout(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this._updateDimensions(w, h);\n    }\n\n    triggerLayout() {\n        this._setRecalc(256);\n    }\n\n    _triggerRecalcTranslate() {\n        this._setRecalc(2);\n    }\n\n}\n\nclass ElementCoreContext {\n\n    constructor() {\n        this.alpha = 1;\n\n        this.px = 0;\n        this.py = 0;\n\n        this.ta = 1;\n        this.tb = 0;\n        this.tc = 0;\n        this.td = 1;\n    }\n\n    isIdentity() {\n        return this.alpha === 1 &&\n            this.px === 0 &&\n            this.py === 0 &&\n            this.ta === 1 &&\n            this.tb === 0 &&\n            this.tc === 0 &&\n            this.td === 1;\n    }\n\n    isSquare() {\n        return this.tb === 0 && this.tc === 0;\n    }\n\n}\n\nElementCoreContext.IDENTITY = new ElementCoreContext();\nElementCore.sortZIndexedChildren = function (a, b) {\n    return (a._zIndex === b._zIndex ? a._updateTreeOrder - b._updateTreeOrder : a._zIndex - b._zIndex);\n};\n\nimport ElementTexturizer from \"./ElementTexturizer.mjs\";\nimport Utils from \"../Utils.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This is a partial (and more efficient) implementation of the event emitter.\n * It attempts to maintain a one-to-one mapping between events and listeners, skipping an array lookup.\n * Only if there are multiple listeners, they are combined in an array.\n */\nexport default class EventEmitter {\n\n    constructor() {\n        // This is set (and kept) to true when events are used at all.\n        this._hasEventListeners = false;\n    }\n\n    on(name, listener) {\n        if (!this._hasEventListeners) {\n            this._eventFunction = {}\n            this._eventListeners = {}\n            this._hasEventListeners = true;\n        }\n\n        const current = this._eventFunction[name];\n        if (!current) {\n            this._eventFunction[name] = listener;\n        } else {\n            if (this._eventFunction[name] !== EventEmitter.combiner) {\n                this._eventListeners[name] = [this._eventFunction[name], listener];\n                this._eventFunction[name] = EventEmitter.combiner;\n            } else {\n                this._eventListeners[name].push(listener);\n            }\n        }\n    }\n\n    once(name, listener) {\n        const wrapper = (arg1, arg2, arg3) => {\n            listener(arg1, arg2, arg3);\n            this.off(name, wrapper);\n        }\n        wrapper.__originalFunc = listener;\n        this.on(name, wrapper);\n    }\n\n    has(name, listener) {\n        if (this._hasEventListeners) {\n            const current = this._eventFunction[name];\n            if (current) {\n                if (current === EventEmitter.combiner) {\n                    const listeners = this._eventListeners[name];\n                    for (const l of listeners) {\n                        if (l === listener || l.__originalFunc == listener) {\n                            return true;\n                        }\n                    }\n                } else if (this._eventFunction[name] === listener || this._eventFunction[name].__originalFunc === listener) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    off(name, listener) {\n        if (this._hasEventListeners) {\n            const current = this._eventFunction[name];\n            if (current) {\n                if (current === EventEmitter.combiner) {\n                    const listeners = this._eventListeners[name];\n                    let index = listeners.indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                    index = listeners.map((l) => l.__originalFunc).indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                    if (listeners.length === 1) {\n                        this._eventFunction[name] = listeners[0];\n                        this._eventListeners[name] = undefined;\n                    }\n                } else if (this._eventFunction[name] === listener || this._eventFunction[name].__originalFunc === listener) {\n                    this._eventFunction[name] = undefined;\n                }\n            }\n        }\n    }\n\n    removeListener(name, listener) {\n        this.off(name, listener);\n    }\n\n    emit(name, arg1, arg2, arg3) {\n        if (this._hasEventListeners) {\n            const func = this._eventFunction[name];\n            if (func) {\n                if (func === EventEmitter.combiner) {\n                    func(this, name, arg1, arg2, arg3);\n                } else {\n                    func(arg1, arg2, arg3);\n                }\n            }\n        }\n    }\n\n    listenerCount(name) {\n        if (this._hasEventListeners) {\n            const func = this._eventFunction[name];\n            if (func) {\n                if (func === EventEmitter.combiner) {\n                    return this._eventListeners[name].length;\n                } else {\n                    return 1;\n                }\n            }\n        }\n        return 0;\n    }\n\n    removeAllListeners(name) {\n        if (this._hasEventListeners) {\n            delete this._eventFunction[name];\n            delete this._eventListeners[name];\n        }\n    }\n\n}\n\nEventEmitter.combiner = function(object, name, arg1, arg2, arg3) {\n    const listeners = object._eventListeners[name];\n    if (listeners) {\n        /* Because listener may detach itself while being invoked and therefore invalidate the iterator,\n           we need to create a copy to loop over it */\n        for (const listener of [...listeners]) {\n            listener(arg1, arg2, arg3);\n        }\n    }\n}\n\nEventEmitter.addAsMixin = function(cls) {\n    cls.prototype.on = EventEmitter.prototype.on;\n    cls.prototype.once = EventEmitter.prototype.once;\n    cls.prototype.has = EventEmitter.prototype.has;\n    cls.prototype.off = EventEmitter.prototype.off;\n    cls.prototype.removeListener = EventEmitter.prototype.removeListener;\n    cls.prototype.emit = EventEmitter.prototype.emit;\n    cls.prototype.listenerCount = EventEmitter.prototype.listenerCount;\n    cls.prototype.removeAllListeners = EventEmitter.prototype.removeAllListeners;\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"./Utils.mjs\";\nimport Base from \"./Base.mjs\";\n\nexport default class Shader {\n\n    constructor(coreContext) {\n        this._initialized = false;\n\n        this.ctx = coreContext;\n\n        /**\n         * The (enabled) elements that use this shader.\n         * @type {Set<ElementCore>}\n         */\n        this._elements = new Set();\n    }\n\n    static create(stage, v) {\n        let shader;\n        if (Utils.isObjectLiteral(v)) {\n            if (v.type) {\n                shader = stage.renderer.createShader(stage.ctx, v);\n            } else {\n                shader = this.shader;\n            }\n\n            if (shader) {\n                Base.patchObject(shader, v);\n            }\n        } else if (v === null) {\n            shader = stage.ctx.renderState.defaultShader;\n        } else if (v === undefined) {\n            shader = null;\n        } else {\n            if (v.isShader) {\n                if (!stage.renderer.isValidShaderType(v.constructor)) {\n                    console.error(\"[Lightning] Invalid shader type\");\n                    v = null;\n                }\n                shader = v;\n            } else {\n                console.error(\"[Lightning] Please specify a shader type.\");\n                return;\n            }\n        }\n\n        return shader;\n    }\n\n    static getWebGL() {\n        return undefined;\n    }\n\n    static getC2d() {\n        return undefined;\n    }\n\n    addElement(elementCore) {\n        this._elements.add(elementCore);\n    }\n\n    removeElement(elementCore) {\n        this._elements.delete(elementCore);\n        if (!this._elements) {\n            this.cleanup();\n        }\n    }\n\n    redraw() {\n        this._elements.forEach(elementCore => {\n            elementCore.setHasRenderUpdates(2);\n        });\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n    useDefault() {\n        // Should return true if this shader is configured (using it's properties) to not have any effect.\n        // This may allow the render engine to avoid unnecessary shader program switches or even texture copies.\n        return false;\n    }\n\n    addEmpty() {\n        // Draws this shader even if there are no quads to be added.\n        // This is handy for custom shaders.\n        return false;\n    }\n\n    cleanup() {\n        // Called when no more enabled elements have this shader.\n    }\n\n    get isShader() {\n        return true;\n    }\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Texture {\n\n    /**\n     * @param {Stage} stage\n     */\n    constructor(stage) {\n        this.stage = stage;\n\n        this.manager = this.stage.textureManager;\n\n        this.id = Texture.id++;\n\n        /**\n         * All enabled elements that use this texture object (either as texture or displayedTexture).\n         * @type {Set<Element>}\n         */\n        this.elements = new Set();\n\n        /**\n         * The number of enabled elements that are active.\n         * @type {number}\n         */\n        this._activeCount = 0;\n\n        /**\n         * The associated texture source.\n         * Should not be changed.\n         * @type {TextureSource}\n         */\n        this._source = null;\n\n        /**\n         * A resize mode can be set to cover or contain a certain area.\n         * It will reset the texture clipping settings.\n         * When manual texture clipping is performed, the resizeMode is reset.\n         * @type {{type: string, width: number, height: number}}\n         * @private\n         */\n        this._resizeMode = null;\n\n        /**\n         * The texture clipping x-offset.\n         * @type {number}\n         */\n        this._x = 0;\n\n        /**\n         * The texture clipping y-offset.\n         * @type {number}\n         */\n        this._y = 0;\n\n        /**\n         * The texture clipping width. If 0 then full width.\n         * @type {number}\n         */\n        this._w = 0;\n\n        /**\n         * The texture clipping height. If 0 then full height.\n         * @type {number}\n         */\n        this._h = 0;\n\n        /**\n         * Render precision (0.5 = fuzzy, 1 = normal, 2 = sharp even when scaled twice, etc.).\n         * @type {number}\n         * @private\n         */\n        this._precision = 1;\n\n        /**\n         * The (maximum) expected texture source width. Used for within bounds determination while texture is not yet loaded.\n         * If not set, 2048 is used by ElementCore.update.\n         * @type {number}\n         */\n        this.mw = 0;\n\n        /**\n         * The (maximum) expected texture source height. Used for within bounds determination while texture is not yet loaded.\n         * If not set, 2048 is used by ElementCore.update.\n         * @type {number}\n         */\n        this.mh = 0;\n\n        /**\n         * Indicates if Texture.prototype.texture uses clipping.\n         * @type {boolean}\n         */\n        this.clipping = false;\n\n        /**\n         * Indicates whether this texture must update (when it becomes used again).\n         * @type {boolean}\n         * @private\n         */\n        this._mustUpdate = true;\n\n    }\n\n    get source() {\n        if (this._mustUpdate || this.stage.hasUpdateSourceTexture(this)) {\n            this._performUpdateSource(true);\n            this.stage.removeUpdateSourceTexture(this);\n        }\n        return this._source;\n    }\n\n    addElement(v) {\n        if (!this.elements.has(v)) {\n            this.elements.add(v);\n\n            if (this.elements.size === 1) {\n                if (this._source) {\n                    this._source.addTexture(this);\n                }\n            }\n\n            if (v.active) {\n                this.incActiveCount();\n            }\n        }\n    }\n\n    removeElement(v) {\n        if (this.elements.delete(v)) {\n            if (this.elements.size === 0) {\n                if (this._source) {\n                    this._source.removeTexture(this);\n                }\n            }\n\n            if (v.active) {\n                this.decActiveCount();\n            }\n        }\n    }\n\n    incActiveCount() {\n        // Ensure that texture source's activeCount has transferred ownership.\n        const source = this.source;\n\n        if (source) {\n            this._checkForNewerReusableTextureSource();\n        }\n\n        this._activeCount++;\n        if (this._activeCount === 1) {\n            this.becomesUsed();\n        }\n    }\n\n    decActiveCount() {\n        const source = this.source; // Force updating the source.\n        this._activeCount--;\n        if (!this._activeCount) {\n            this.becomesUnused();\n        }\n    }\n\n    becomesUsed() {\n        if (this.source) {\n            this.source.incActiveTextureCount();\n        }\n    }\n\n    onLoad() {\n        if (this._resizeMode) {\n            this._applyResizeMode();\n        }\n\n        this.elements.forEach(element => {\n            if (element.active) {\n                element.onTextureSourceLoaded();\n            }\n        });\n    }\n\n    _checkForNewerReusableTextureSource() {\n        // When this source became unused and cleaned up, it may have disappeared from the reusable texture map.\n        // In the meantime another texture may have been generated loaded with the same lookup id.\n        // If this is the case, use that one instead to make sure only one active texture source per lookup id exists.\n        const source = this.source;\n        if (!source.isLoaded()) {\n            const reusable = this._getReusableTextureSource();\n            if (reusable && reusable.isLoaded() && (reusable !== source)) {\n                this._replaceTextureSource(reusable);\n            }\n        } else {\n            if (this._resizeMode) {\n                this._applyResizeMode();\n            }\n        }\n    }\n\n    becomesUnused() {\n        if (this.source) {\n            this.source.decActiveTextureCount();\n        }\n    }\n\n    isUsed() {\n        return this._activeCount > 0;\n    }\n\n    /**\n     * Returns the lookup id for the current texture settings, to be able to reuse it.\n     * @returns {string|null}\n     */\n    _getLookupId() {\n        // Default: do not reuse texture.\n        return null;\n    }\n\n    /**\n     * Generates a loader function that is able to generate the texture for the current settings of this texture.\n     * It should return a function that receives a single callback argument.\n     * That callback should be called with the following arguments:\n     *   - err\n     *   - options: object\n     *     - source: ArrayBuffer|WebGlTexture|ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|ImageBitmap\n     *     - w: Number\n     *     - h: Number\n     *     - permanent: Boolean\n     *     - hasAlpha: boolean\n     *     - permultiplyAlpha: boolean\n     *     - flipBlueRed: boolean\n     *     - renderInfo: object\n     * The loader itself may return a Function that is called when loading of the texture is cancelled. This can be used\n     * to stop fetching an image when it is no longer in element, for example.\n     */\n    _getSourceLoader() {\n        throw new Error(\"Texture.generate must be implemented.\");\n    }\n\n    get isValid() {\n        return this._getIsValid();\n    }\n\n    /**\n     * If texture is not 'valid', no source can be created for it.\n     * @returns {boolean}\n     */\n    _getIsValid() {\n        return true;\n    }\n\n    /**\n     * This must be called when the texture source must be re-generated.\n     */\n    _changed() {\n        // If no element is actively using this texture, ignore it altogether.\n        if (this.isUsed()) {\n            this._updateSource();\n        } else {\n            this._mustUpdate = true;\n        }\n    }\n\n    _updateSource() {\n        // We delay all updateSource calls to the next drawFrame, so that we can bundle them.\n        // Otherwise we may reload a texture more often than necessary, when, for example, patching multiple text\n        // properties.\n        this.stage.addUpdateSourceTexture(this);\n    }\n\n    _performUpdateSource(force = false) {\n        // If, in the meantime, the texture was no longer used, just remember that it must update until it becomes used\n        // again.\n        if (force || this.isUsed()) {\n            this._mustUpdate = false;\n            let source = this._getTextureSource();\n            this._replaceTextureSource(source);\n        }\n    }\n\n    _getTextureSource() {\n        let source = null;\n        if (this._getIsValid()) {\n            const lookupId = this._getLookupId();\n            source = this._getReusableTextureSource(lookupId);\n            if (!source) {\n                source = this.manager.getTextureSource(this._getSourceLoader(), lookupId);\n            }\n        }\n        return source;\n    }\n\n    _getReusableTextureSource(lookupId = this._getLookupId()) {\n        if (this._getIsValid()) {\n            if (lookupId) {\n                return this.manager.getReusableTextureSource(lookupId);\n            }\n        }\n        return null;\n    }\n\n    _replaceTextureSource(newSource = null) {\n        let oldSource = this._source;\n\n        this._source = newSource;\n\n        if (this.elements.size) {\n            if (oldSource) {\n                if (this._activeCount) {\n                    oldSource.decActiveTextureCount();\n                }\n\n                oldSource.removeTexture(this);\n\n                // free up unused TextTextures immediately as they are not reused anyway\n                if(this['text'] && !oldSource.isUsed()) {\n                    this.manager.freeTextureSource(oldSource);\n                }\n            }\n\n            if (newSource) {\n                // Must happen before setDisplayedTexture to ensure sprite map texcoords are used.\n                newSource.addTexture(this);\n                if (this._activeCount) {\n                    newSource.incActiveTextureCount();\n                }\n            }\n        }\n\n        if (this.isUsed()) {\n            if (newSource) {\n                if (newSource.isLoaded()) {\n\n                    // Apply resizeMode\n                    if (this._resizeMode) {\n                        this._applyResizeMode();\n                    }\n\n                    this.elements.forEach(element => {\n                        if (element.active) {\n                            element._setDisplayedTexture(this);\n                        }\n                    });\n                } else {\n                    const loadError = newSource.loadError;\n                    if (loadError) {\n                        this.elements.forEach(element => {\n                            if (element.active) {\n                                element.onTextureSourceLoadError(loadError);\n                            }\n                        });\n                    }\n                }\n            } else {\n                this.elements.forEach(element => {\n                    if (element.active) {\n                        element._setDisplayedTexture(null);\n                    }\n                });\n            }\n        }\n    }\n\n    load() {\n        // Make sure that source is up to date.\n        if (this.source) {\n            if (!this.isLoaded()) {\n                this.source.load(true);\n            }\n        }\n    }\n\n    isLoaded() {\n        return this._source && this._source.isLoaded();\n    }\n\n    get loadError() {\n        return this._source && this._source.loadError;\n    }\n\n    free() {\n        if (this._source) {\n            this._source.free();\n        }\n    }\n\n    set resizeMode({type = \"cover\", w = 0, h = 0, clipX = 0.5, clipY = 0.5}) {\n        this._resizeMode = {type, w, h, clipX, clipY};\n        if (this.isLoaded()) {\n            this._applyResizeMode();\n        }\n    }\n\n    get resizeMode() {\n        return this._resizeMode;\n    }\n\n    _clearResizeMode() {\n        this._resizeMode = null;\n    }\n\n    _applyResizeMode() {\n        if (this._resizeMode.type === \"cover\") {\n            this._applyResizeCover();\n        } else if (this._resizeMode.type === \"contain\") {\n            this._applyResizeContain();\n        }\n        this._updatePrecision();\n        this._updateClipping();\n    }\n\n    _applyResizeCover() {\n        const scaleX = this._resizeMode.w / this._source.w;\n        const scaleY = this._resizeMode.h / this._source.h;\n        let scale = Math.max(scaleX, scaleY);\n        if (!scale) return;\n        this._precision = 1/scale;\n        if (scaleX && scaleX < scale) {\n            const desiredSize = this._precision * this._resizeMode.w;\n            const choppedOffPixels = this._source.w - desiredSize;\n            this._x = choppedOffPixels * this._resizeMode.clipX;\n            this._w = this._source.w - choppedOffPixels;\n        }\n        if (scaleY && scaleY < scale) {\n            const desiredSize = this._precision * this._resizeMode.h;\n            const choppedOffPixels = this._source.h - desiredSize;\n            this._y = choppedOffPixels * this._resizeMode.clipY;\n            this._h = this._source.h - choppedOffPixels;\n        }\n    }\n\n    _applyResizeContain() {\n        const scaleX = this._resizeMode.w / this._source.w;\n        const scaleY = this._resizeMode.h / this._source.h;\n        let scale = scaleX;\n        if (!scale || scaleY < scale) {\n            scale = scaleY;\n        }\n        if (!scale) return;\n        this._precision = 1/scale;\n    }\n\n    enableClipping(x, y, w, h) {\n        this._clearResizeMode();\n\n        x *= this._precision;\n        y *= this._precision;\n        w *= this._precision;\n        h *= this._precision;\n        if (this._x !== x || this._y !== y || this._w !== w || this._h !== h) {\n            this._x = x;\n            this._y = y;\n            this._w = w;\n            this._h = h;\n\n            this._updateClipping(true);\n        }\n    }\n\n    disableClipping() {\n        this._clearResizeMode();\n\n        if (this._x || this._y || this._w || this._h) {\n            this._x = 0;\n            this._y = 0;\n            this._w = 0;\n            this._h = 0;\n\n            this._updateClipping();\n        }\n    }\n\n    _updateClipping() {\n        this.clipping = !!(this._x || this._y || this._w || this._h);\n\n        let self = this;\n        this.elements.forEach(function(element) {\n            // Ignore if not the currently displayed texture.\n            if (element.displayedTexture === self) {\n                element.onDisplayedTextureClippingChanged();\n            }\n        });\n    }\n\n    _updatePrecision() {\n        let self = this;\n        this.elements.forEach(function(element) {\n            // Ignore if not the currently displayed texture.\n            if (element.displayedTexture === self) {\n                element.onPrecisionChanged();\n            }\n        });\n    }\n\n    getNonDefaults() {\n        let nonDefaults = {};\n        nonDefaults['type'] = this.constructor.name;\n        if (this.x !== 0) nonDefaults['x'] = this.x;\n        if (this.y !== 0) nonDefaults['y'] = this.y;\n        if (this.w !== 0) nonDefaults['w'] = this.w;\n        if (this.h !== 0) nonDefaults['h'] = this.h;\n        if (this.precision !== 1) nonDefaults['precision'] = this.precision;\n        return nonDefaults;\n    }\n\n    get px() {\n        return this._x;\n    }\n\n    get py() {\n        return this._y;\n    }\n\n    get pw() {\n        return this._w;\n    }\n\n    get ph() {\n        return this._h;\n    }\n\n    get x() {\n        return this._x / this._precision;\n    }\n    set x(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._x !== v) {\n            this._x = v;\n            this._updateClipping();\n        }\n    }\n\n    get y() {\n        return this._y / this._precision;\n    }\n    set y(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._y !== v) {\n            this._y = v;\n            this._updateClipping();\n        }\n    }\n\n    get w() {\n        return this._w / this._precision;\n    }\n\n    set w(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._w !== v) {\n            this._w = v;\n            this._updateClipping();\n        }\n    }\n\n    get h() {\n        return this._h / this._precision;\n    }\n\n    set h(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._h !== v) {\n            this._h = v;\n            this._updateClipping();\n        }\n    }\n\n    get precision() {\n        return this._precision;\n    }\n\n    set precision(v) {\n        this._clearResizeMode();\n        if (this._precision !== v) {\n            this._precision = v;\n            this._updatePrecision();\n        }\n    }\n\n    isAutosizeTexture() {\n        return true;\n    }\n\n    getRenderWidth() {\n        if (!this.isAutosizeTexture()) {\n            // In case of the rectangle texture, we'd prefer to not cause a 1x1 w,h as it would interfere with flex layout fit-to-contents.\n            return 0;\n        }\n\n        // If dimensions are unknown (texture not yet loaded), use maximum width as a fallback as render width to allow proper bounds checking.\n        return (this._w || (this._source ? this._source.getRenderWidth() - this._x : 0)) / this._precision;\n    }\n\n    getRenderHeight() {\n        if (!this.isAutosizeTexture()) {\n            // In case of the rectangle texture, we'd prefer to not cause a 1x1 w,h as it would interfere with flex layout fit-to-contents.\n            return 0;\n        }\n\n        return (this._h || (this._source ? this._source.getRenderHeight() - this._y : 0)) / this._precision;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n}\n\nTexture.prototype.isTexture = true;\n\nTexture.id = 0;\n\nimport Base from \"./Base.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class ImageTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n\n        this._src = undefined;\n        this._hasAlpha = false;\n    }\n\n    get src() {\n        return this._src;\n    }\n\n    set src(v) {\n        if (this._src !== v) {\n            this._src = v;\n            this._changed();\n        }\n    }\n\n    get hasAlpha() {\n        return this._hasAlpha;\n    }\n\n    set hasAlpha(v) {\n        if (this._hasAlpha !== v) {\n            this._hasAlpha = v;\n            this._changed();\n        }\n    }\n\n    _getIsValid() {\n        return !!this._src;\n    }\n\n    _getLookupId() {\n        return this._src;\n    }\n\n    _getSourceLoader() {\n        let src = this._src;\n        let hasAlpha = this._hasAlpha;\n        if (this.stage.getOption('srcBasePath')) {\n            var fc = src.charCodeAt(0);\n            if ((src.indexOf(\"//\") === -1) && ((fc >= 65 && fc <= 90) || (fc >= 97 && fc <= 122) || fc == 46)) {\n                // Alphabetical or dot: prepend base path.\n                src = this.stage.getOption('srcBasePath') + src;\n            }\n        }\n\n        return (cb) => {\n            return this.stage.platform.loadSrcTexture({src: src, hasAlpha: hasAlpha}, cb);\n        }\n    }\n\n    getNonDefaults() {\n        const obj = super.getNonDefaults();\n        if (this._src) {\n            obj.src = this._src;\n        }\n        return obj;\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns CSS font setting string for use in canvas context.\n *\n * @param fontFace\n * @param fontStyle\n * @param fontSize\n * @param precision\n * @param defaultFontFace\n * @returns\n */\nexport function getFontSetting(\n    fontFace: string | string[],\n    fontStyle: string,\n    fontSize: number,\n    precision: number,\n    defaultFontFace: string\n): string {\n    let ff = fontFace;\n\n    if (!Array.isArray(ff)) {\n        ff = [ff];\n    }\n\n    let ffs = [];\n    for (let i = 0, n = ff.length; i < n; i++) {\n        let curFf = ff[i];\n        // Replace the default font face `null` with the actual default font face set\n        // on the stage.\n        if (curFf == null) {\n            curFf = defaultFontFace;\n        }\n        if (curFf.indexOf(' ') < 0) {\n            ffs.push(curFf);\n        } else {\n            ffs.push(`\"${curFf}\"`);\n        }\n    }\n\n    return `${fontStyle} ${fontSize * precision}px ${ffs.join(\",\")}`\n}\n\n/**\n * Returns true if the given character is a zero-width space.\n *\n * @param space\n */\nexport function isZeroWidthSpace(space: string): boolean {\n    return space === '' || space === '\\u200B';\n}\n\n/**\n * Returns true if the given character is a zero-width space or a regular space.\n *\n * @param space\n */\nexport function isSpace(space: string): boolean {\n    return isZeroWidthSpace(space) || space === ' ';\n}\n\n/**\n * Converts a string into an array of tokens and the words between them.\n *\n * @param tokenRegex\n * @param text\n */\nexport function tokenizeString(tokenRegex: RegExp, text: string): string[] {\n    const delimeters = text.match(tokenRegex) || [];\n    const words = text.split(tokenRegex) || [];\n\n    let final: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        final.push(words[i]!, delimeters[i]!)\n    }\n    final.pop()\n    return final.filter((word) => word != '');\n}\n\n/**\n * Measure the width of a string accounting for letter spacing.\n *\n * @param context\n * @param word\n * @param space\n */\nexport function measureText(context: CanvasRenderingContext2D, word: string, space: number = 0): number {\n    if (!space) {\n        return context.measureText(word).width;\n    }\n    return word.split('').reduce((acc, char) => {\n        // Zero-width spaces should not include letter spacing.\n        // And since we know the width of a zero-width space is 0, we can skip\n        // measuring it.\n        if (isZeroWidthSpace(char)) {\n            return acc;\n        }\n        return acc + context.measureText(char).width + space;\n    }, 0);\n}\n\nexport interface WrapTextResult {\n    l: string[];\n    n: number[];\n}\n\n/**\n * Applies newlines to a string to have it optimally fit into the horizontal\n * bounds set by the Text object's wordWrapWidth property.\n *\n * @param context\n * @param text\n * @param wordWrapWidth\n * @param letterSpacing\n * @param indent\n */\nexport function wrapText(\n    context: CanvasRenderingContext2D,\n    text: string,\n    wordWrapWidth: number,\n    letterSpacing: number,\n    indent: number\n): WrapTextResult {\n    // Greedy wrapping algorithm that will wrap words as the line grows longer.\n    // than its horizontal bounds.\n    const spaceRegex = / |\\u200B/g;\n    let lines = text.split(/\\r?\\n/g);\n    let allLines: string[] = [];\n    let realNewlines: number[] = [];\n    for (let i = 0; i < lines.length; i++) {\n        let resultLines: string[] = [];\n        let result = '';\n        let spaceLeft = wordWrapWidth - indent;\n        let words = lines[i]!.split(spaceRegex);\n        let spaces = lines[i]!.match(spaceRegex) || [];\n        for (let j = 0; j < words.length; j++) {\n            const space = spaces[j - 1] || '';\n            const word = words[j]!;\n            const wordWidth = measureText(context, word, letterSpacing);\n            const wordWidthWithSpace = wordWidth + measureText(context, space, letterSpacing);\n            if (j === 0 || wordWidthWithSpace > spaceLeft) {\n                // Skip printing the newline if it's the first word of the line that is.\n                // greater than the word wrap width.\n                if (j > 0) {\n                    resultLines.push(result);\n                    result = '';\n                }\n                result += word;\n                spaceLeft = wordWrapWidth - wordWidth - (j === 0 ? indent : 0);\n            }\n            else {\n                spaceLeft -= wordWidthWithSpace;\n                result += space + word;\n            }\n        }\n\n        resultLines.push(result);\n        result = '';\n\n        allLines = allLines.concat(resultLines);\n\n        if (i < lines.length - 1) {\n            realNewlines.push(allLines.length);\n        }\n    }\n\n    return {l: allLines, n: realNewlines};\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport { getFontSetting, measureText, wrapText } from \"./TextTextureRendererUtils.mjs\";\n\nexport default class TextTextureRenderer {\n\n    constructor(stage, canvas, settings) {\n        this._stage = stage;\n        this._canvas = canvas;\n        this._context = this._canvas.getContext('2d');\n        this._settings = settings;\n    }\n\n    getPrecision() {\n        return this._settings.precision;\n    };\n\n    setFontProperties() {\n        this._context.font = getFontSetting(\n            this._settings.fontFace,\n            this._settings.fontStyle,\n            this._settings.fontSize,\n            this.getPrecision(),\n            this._stage.getOption('defaultFontFace'),\n        );\n        this._context.textBaseline = this._settings.textBaseline;\n        this._context.direction = this._settings.rtl ? \"rtl\" : \"ltr\";\n    };\n\n    _load() {\n        if (Utils.isWeb && document.fonts) {\n            const fontSetting = getFontSetting(\n                this._settings.fontFace,\n                this._settings.fontStyle,\n                this._settings.fontSize,\n                this.getPrecision(),\n                this._stage.getOption('defaultFontFace')\n            );\n            try {\n                if (!document.fonts.check(fontSetting, this._settings.text)) {\n                    // Use a promise that waits for loading.\n                    return document.fonts.load(fontSetting, this._settings.text).catch(err => {\n                        // Just load the fallback font.\n                        console.warn('[Lightning] Font load error', err, fontSetting);\n                    }).then(() => {\n                        if (!document.fonts.check(fontSetting, this._settings.text)) {\n                            console.warn('[Lightning] Font not found', fontSetting);\n                        }\n                    });\n                }\n            } catch(e) {\n                console.warn(\"[Lightning] Can't check font loading for \" + fontSetting);\n            }\n        }\n    }\n\n    draw() {\n        // We do not use a promise so that loading is performed syncronous when possible.\n        const loadPromise = this._load();\n        if (!loadPromise) {\n            return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n        } else {\n            return loadPromise.then(() => {\n                return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n            });\n        }\n    }\n\n    _calculateRenderInfo() {\n        let renderInfo = {};\n\n        const precision = this.getPrecision();\n\n        const paddingLeft = this._settings.paddingLeft * precision;\n        const paddingRight = this._settings.paddingRight * precision;\n        const fontSize = this._settings.fontSize * precision;\n        let offsetY = this._settings.offsetY === null ? null : (this._settings.offsetY * precision);\n        let lineHeight = this._settings.lineHeight * precision;\n        const w = this._settings.w * precision;\n        const h = this._settings.h * precision;\n        let wordWrapWidth = this._settings.wordWrapWidth * precision;\n        const cutSx = this._settings.cutSx * precision;\n        const cutEx = this._settings.cutEx * precision;\n        const cutSy = this._settings.cutSy * precision;\n        const cutEy = this._settings.cutEy * precision;\n        const letterSpacing = (this._settings.letterSpacing || 0) * precision;\n        const textIndent = this._settings.textIndent * precision;\n\n        // Set font properties.\n        this.setFontProperties();\n\n        // Total width.\n        let width = w || this._stage.getOption('w');\n\n        // Inner width.\n        let innerWidth = width - (paddingLeft);\n        if (innerWidth < 10) {\n            width += (10 - innerWidth);\n            innerWidth = 10;\n        }\n\n        if (!wordWrapWidth) {\n            wordWrapWidth = innerWidth\n        }\n\n        // Text overflow\n        if (this._settings.textOverflow && !this._settings.wordWrap) {\n            let suffix;\n            switch (this._settings.textOverflow) {\n                case 'clip':\n                    suffix = '';\n                    break;\n                case 'ellipsis':\n                    suffix = this._settings.maxLinesSuffix;\n                    break;\n                default:\n                    suffix = this._settings.textOverflow;\n            }\n            this._settings.text = this.wrapWord(this._settings.text, wordWrapWidth - textIndent, suffix)\n        }\n\n        // word wrap\n        // preserve original text\n        let linesInfo;\n        if (this._settings.wordWrap) {\n            linesInfo = this.wrapText(this._settings.text, wordWrapWidth, letterSpacing, textIndent);\n        } else {\n            linesInfo = {l: this._settings.text.split(/(?:\\r\\n|\\r|\\n)/), n: []};\n            let i, n = linesInfo.l.length;\n            for (let i = 0; i < n - 1; i++) {\n                linesInfo.n.push(i);\n            }\n        }\n        let lines = linesInfo.l;\n\n        if (this._settings.maxLines && lines.length > this._settings.maxLines) {\n            let usedLines = lines.slice(0, this._settings.maxLines);\n\n            let otherLines = null;\n            if (this._settings.maxLinesSuffix) {\n                // Wrap again with max lines suffix enabled.\n                let w = this._settings.maxLinesSuffix ? this.measureText(this._settings.maxLinesSuffix) : 0;\n                let al = this.wrapText(usedLines[usedLines.length - 1], wordWrapWidth - w, letterSpacing, textIndent);\n                usedLines[usedLines.length - 1] = al.l[0] + this._settings.maxLinesSuffix;\n                otherLines = [al.l.length > 1 ? al.l[1] : ''];\n            } else {\n                otherLines = [''];\n            }\n\n            // Re-assemble the remaining text.\n            let i, n = lines.length;\n            let j = 0;\n            let m = linesInfo.n.length;\n            for (i = this._settings.maxLines; i < n; i++) {\n                otherLines[j] += (otherLines[j] ? \" \" : \"\") + lines[i];\n                if (i + 1 < m && linesInfo.n[i + 1]) {\n                    j++;\n                }\n            }\n\n            renderInfo.remainingText = otherLines.join(\"\\n\");\n\n            renderInfo.moreTextLines = true;\n\n            lines = usedLines;\n        } else {\n            renderInfo.moreTextLines = false;\n            renderInfo.remainingText = \"\";\n        }\n\n        // calculate text width\n        let maxLineWidth = 0;\n        let lineWidths = [];\n        for (let i = 0; i < lines.length; i++) {\n            let lineWidth = this.measureText(lines[i], letterSpacing) + (i === 0 ? textIndent : 0);\n            lineWidths.push(lineWidth);\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n\n        renderInfo.lineWidths = lineWidths;\n\n        if (!w) {\n            // Auto-set width to max text length.\n            width = maxLineWidth + paddingLeft + paddingRight;\n            innerWidth = maxLineWidth;\n        }\n\n        // calculate text height\n        lineHeight = lineHeight || fontSize;\n\n        let height;\n        if (h) {\n            height = h;\n        } else {\n            const baselineOffset = (this._settings.textBaseline != 'bottom') ? 0.5 * fontSize : 0;\n            height = lineHeight * (lines.length - 1) + baselineOffset + Math.max(lineHeight, fontSize) + offsetY;\n        }\n\n        if (offsetY === null) {\n            offsetY = fontSize;\n        }\n\n        renderInfo.w = width;\n        renderInfo.h = height;\n        renderInfo.lines = lines;\n        renderInfo.precision = precision;\n\n        if (!width) {\n            // To prevent canvas errors.\n            width = 1;\n        }\n\n        if (!height) {\n            // To prevent canvas errors.\n            height = 1;\n        }\n\n        if (cutSx || cutEx) {\n            width = Math.min(width, cutEx - cutSx);\n        }\n\n        if (cutSy || cutEy) {\n            height = Math.min(height, cutEy - cutSy);\n        }\n\n        renderInfo.width = width;\n        renderInfo.innerWidth = innerWidth;\n        renderInfo.height = height;\n        renderInfo.fontSize = fontSize;\n        renderInfo.cutSx = cutSx;\n        renderInfo.cutSy = cutSy;\n        renderInfo.cutEx = cutEx;\n        renderInfo.cutEy = cutEy;\n        renderInfo.lineHeight = lineHeight;\n        renderInfo.lineWidths = lineWidths;\n        renderInfo.offsetY = offsetY;\n        renderInfo.paddingLeft = paddingLeft;\n        renderInfo.paddingRight = paddingRight;\n        renderInfo.letterSpacing = letterSpacing;\n        renderInfo.textIndent = textIndent;\n\n        return renderInfo;\n    }\n\n    _draw() {\n        const renderInfo = this._calculateRenderInfo();\n        const precision = this.getPrecision();\n\n        // Add extra margin to prevent issue with clipped text when scaling.\n        this._canvas.width = Math.ceil(renderInfo.width + this._stage.getOption('textRenderIssueMargin'));\n        this._canvas.height = Math.ceil(renderInfo.height);\n\n        // Canvas context has been reset.\n        this.setFontProperties();\n\n        if (renderInfo.fontSize >= 128) {\n            // WpeWebKit bug: must force compositing because cairo-traps-compositor will not work with text first.\n            this._context.globalAlpha = 0.01;\n            this._context.fillRect(0, 0, 0.01, 0.01);\n            this._context.globalAlpha = 1.0;\n        }\n\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(-renderInfo.cutSx, -renderInfo.cutSy);\n        }\n\n        let linePositionX;\n        let linePositionY;\n\n        let drawLines = [];\n\n        // Draw lines line by line.\n        for (let i = 0, n = renderInfo.lines.length; i < n; i++) {\n            linePositionX = i === 0 ? renderInfo.textIndent : 0;\n\n            // By default, text is aligned to top\n            linePositionY = (i * renderInfo.lineHeight) + renderInfo.offsetY;\n\n            if (this._settings.verticalAlign == 'middle') {\n                linePositionY += (renderInfo.lineHeight - renderInfo.fontSize) / 2;\n            } else if (this._settings.verticalAlign == 'bottom') {\n                linePositionY += renderInfo.lineHeight - renderInfo.fontSize;\n            }\n\n            if (this._settings.textAlign === 'right') {\n                linePositionX += (renderInfo.innerWidth - renderInfo.lineWidths[i]);\n            } else if (this._settings.textAlign === 'center') {\n                linePositionX += ((renderInfo.innerWidth - renderInfo.lineWidths[i]) / 2);\n            }\n            linePositionX += renderInfo.paddingLeft;\n            if (this._settings.rtl) {\n                linePositionX += renderInfo.lineWidths[i];\n            }\n\n            drawLines.push({text: renderInfo.lines[i], x: linePositionX, y: linePositionY, w: renderInfo.lineWidths[i]});\n        }\n\n        // Highlight.\n        if (this._settings.highlight) {\n            let color = this._settings.highlightColor || 0x00000000;\n\n            let hlHeight = (this._settings.highlightHeight * precision || renderInfo.fontSize * 1.5);\n            const offset = this._settings.highlightOffset * precision;\n            const hlPaddingLeft = (this._settings.highlightPaddingLeft !== null ? this._settings.highlightPaddingLeft * precision : renderInfo.paddingLeft);\n            const hlPaddingRight = (this._settings.highlightPaddingRight !== null ? this._settings.highlightPaddingRight * precision : renderInfo.paddingRight);\n\n            this._context.fillStyle = StageUtils.getRgbaString(color);\n            for (let i = 0; i < drawLines.length; i++) {\n                let drawLine = drawLines[i];\n                this._context.fillRect((drawLine.x - hlPaddingLeft), (drawLine.y - renderInfo.offsetY + offset), (drawLine.w + hlPaddingRight + hlPaddingLeft), hlHeight);\n            }\n        }\n\n        // Text shadow.\n        let prevShadowSettings = null;\n        if (this._settings.shadow) {\n            prevShadowSettings = [this._context.shadowColor, this._context.shadowOffsetX, this._context.shadowOffsetY, this._context.shadowBlur];\n\n            this._context.shadowColor = StageUtils.getRgbaString(this._settings.shadowColor);\n            this._context.shadowOffsetX = this._settings.shadowOffsetX * precision;\n            this._context.shadowOffsetY = this._settings.shadowOffsetY * precision;\n            this._context.shadowBlur = this._settings.shadowBlur * precision;\n        }\n\n        this._context.fillStyle = StageUtils.getRgbaString(this._settings.textColor);\n        for (let i = 0, n = drawLines.length; i < n; i++) {\n            let drawLine = drawLines[i];\n\n            if (renderInfo.letterSpacing === 0) {\n                this._context.fillText(drawLine.text, drawLine.x, drawLine.y);\n            } else {\n                const textSplit = drawLine.text.split('');\n                let x = drawLine.x;\n                for (let i = 0, j = textSplit.length; i < j; i++) {\n                    this._context.fillText(textSplit[i], x, drawLine.y);\n                    x += this.measureText(textSplit[i], renderInfo.letterSpacing);\n                }\n            }\n        }\n\n        if (prevShadowSettings) {\n            this._context.shadowColor = prevShadowSettings[0];\n            this._context.shadowOffsetX = prevShadowSettings[1];\n            this._context.shadowOffsetY = prevShadowSettings[2];\n            this._context.shadowBlur = prevShadowSettings[3];\n        }\n\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(renderInfo.cutSx, renderInfo.cutSy);\n        }\n\n        this.renderInfo = renderInfo;\n    };\n\n    wrapWord(word, wordWrapWidth, suffix) {\n        const suffixWidth = this.measureText(suffix);\n        const wordLen = word.length\n        const wordWidth = this.measureText(word);\n\n        /* If word fits wrapWidth, do nothing */\n        if (wordWidth <= wordWrapWidth) {\n            return word;\n        }\n\n        /* Make initial guess for text cuttoff */\n        let cutoffIndex = Math.floor((wordWrapWidth * wordLen) / wordWidth);\n        let truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n\n        /* In case guess was overestimated, shrink it letter by letter. */\n        if (truncWordWidth > wordWrapWidth) {\n            while (cutoffIndex > 0) {\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n                if (truncWordWidth > wordWrapWidth) {\n                    cutoffIndex -= 1;\n                } else {\n                    break;\n                }\n            }\n\n        /* In case guess was underestimated, extend it letter by letter. */\n        } else {\n            while (cutoffIndex < wordLen) {\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n                if (truncWordWidth < wordWrapWidth) {\n                    cutoffIndex += 1;\n                } else {\n                    // Finally, when bound is crossed, retract last letter.\n                    cutoffIndex -=1;\n                    break;\n                }\n            }\n        }\n\n        /* If wrapWidth is too short to even contain suffix alone, return empty string */\n        return word.substring(0, cutoffIndex) + (wordWrapWidth >= suffixWidth ? suffix : '');\n    }\n\n    /**\n     * See {@link wrapText}\n     *\n     * @param {string} text\n     * @param {number} wordWrapWidth\n     * @param {number} letterSpacing\n     * @param {number} indent\n     * @returns\n     */\n    wrapText(text, wordWrapWidth, letterSpacing, indent = 0) {\n        return wrapText(this._context, text, wordWrapWidth, letterSpacing, indent);\n    };\n\n    /**\n     * See {@link measureText}\n     *\n     * @param {string} word\n     * @param {number} space\n     * @returns {number}\n     */\n    measureText(word, space = 0) {\n        return measureText(this._context, word, space);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport { getFontSetting, isSpace, measureText, tokenizeString } from \"./TextTextureRendererUtils.mjs\";\n\nexport default class TextTextureRendererAdvanced {\n\n    constructor(stage, canvas, settings) {\n        this._stage = stage;\n        this._canvas = canvas;\n        this._context = this._canvas.getContext('2d');\n        this._settings = settings;\n    }\n\n    getPrecision() {\n        return this._settings.precision;\n    };\n\n    setFontProperties() {\n        const font = getFontSetting(\n            this._settings.fontFace,\n            this._settings.fontStyle,\n            this._settings.fontSize,\n            this.getPrecision(),\n            this._stage.getOption('defaultFontFace')\n        );\n        this._context.font = font;\n        this._context.textBaseline = this._settings.textBaseline;\n        return font;\n    };\n\n    _load() {\n        if (Utils.isWeb && document.fonts) {\n            const fontSetting = getFontSetting(\n                this._settings.fontFace,\n                this._settings.fontStyle,\n                this._settings.fontSize,\n                this.getPrecision(),\n                this._stage.getOption('defaultFontFace')\n            );\n            try {\n                if (!document.fonts.check(fontSetting, this._settings.text)) {\n                    // Use a promise that waits for loading.\n                    return document.fonts.load(fontSetting, this._settings.text).catch(err => {\n                        // Just load the fallback font.\n                        console.warn('Font load error', err, fontSetting);\n                    }).then(() => {\n                        if (!document.fonts.check(fontSetting, this._settings.text)) {\n                            console.warn('Font not found', fontSetting);\n                        }\n                    });\n                }\n            } catch(e) {\n                console.warn(\"Can't check font loading for \" + fontSetting);\n            }\n        }\n    }\n\n    draw() {\n        // We do not use a promise so that loading is performed syncronous when possible.\n        const loadPromise = this._load();\n        if (!loadPromise) {\n            return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n        } else {\n            return loadPromise.then(() => {\n                return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n            });\n        }\n    }\n\n    _calculateRenderInfo() {\n        let renderInfo = {};\n\n        const precision = this.getPrecision();\n\n        const paddingLeft = this._settings.paddingLeft * precision;\n        const paddingRight = this._settings.paddingRight * precision;\n        const fontSize = this._settings.fontSize * precision;\n        // const offsetY = this._settings.offsetY === null ? null : (this._settings.offsetY * precision);\n        const lineHeight = this._settings.lineHeight * precision || fontSize;\n        const w = this._settings.w != 0 ? this._settings.w * precision : this._stage.getOption('w');\n        // const h = this._settings.h * precision;\n        const wordWrapWidth = this._settings.wordWrapWidth * precision;\n        const cutSx = this._settings.cutSx * precision;\n        const cutEx = this._settings.cutEx * precision;\n        const cutSy = this._settings.cutSy * precision;\n        const cutEy = this._settings.cutEy * precision;\n        const letterSpacing = this._settings.letterSpacing || 0;\n\n        // Set font properties.\n        renderInfo.baseFont = this.setFontProperties();\n\n        renderInfo.w = w;\n        renderInfo.width = w;\n        renderInfo.text = this._settings.text;\n        renderInfo.precision = precision;\n        renderInfo.fontSize = fontSize;\n        renderInfo.fontBaselineRatio = this._settings.fontBaselineRatio;\n        renderInfo.lineHeight = lineHeight;\n        renderInfo.letterSpacing = letterSpacing;\n        renderInfo.textAlign = this._settings.textAlign;\n        renderInfo.textColor = this._settings.textColor;\n        renderInfo.verticalAlign = this._settings.verticalAlign;\n        renderInfo.highlight = this._settings.highlight;\n        renderInfo.highlightColor = this._settings.highlightColor;\n        renderInfo.highlightHeight = this._settings.highlightHeight;\n        renderInfo.highlightPaddingLeft = this._settings.highlightPaddingLeft;\n        renderInfo.highlightPaddingRight = this._settings.highlightPaddingRight;\n        renderInfo.highlightOffset = this._settings.highlightOffset;\n        renderInfo.paddingLeft = this._settings.paddingLeft;\n        renderInfo.paddingRight = this._settings.paddingRight;\n        renderInfo.maxLines = this._settings.maxLines;\n        renderInfo.maxLinesSuffix = this._settings.maxLinesSuffix;\n        renderInfo.textOverflow = this._settings.textOverflow;\n        renderInfo.wordWrap = this._settings.wordWrap;\n        renderInfo.wordWrapWidth = wordWrapWidth;\n        renderInfo.shadow = this._settings.shadow;\n        renderInfo.shadowColor = this._settings.shadowColor;\n        renderInfo.shadowOffsetX = this._settings.shadowOffsetX;\n        renderInfo.shadowOffsetY = this._settings.shadowOffsetY;\n        renderInfo.shadowBlur = this._settings.shadowBlur;\n        renderInfo.cutSx = cutSx;\n        renderInfo.cutEx = cutEx;\n        renderInfo.cutSy = cutSy;\n        renderInfo.cutEy = cutEy;\n        renderInfo.textIndent = this._settings.textIndent * precision;\n        renderInfo.wordBreak = this._settings.wordBreak;\n\n        let text = renderInfo.text;\n        let wrapWidth = renderInfo.wordWrap ? (renderInfo.wordWrapWidth || renderInfo.width) : renderInfo.width;\n\n        // Text overflow\n        if (renderInfo.textOverflow && !renderInfo.wordWrap) {\n            let suffix;\n            switch (this._settings.textOverflow) {\n                case 'clip':\n                    suffix = '';\n                    break;\n                case 'ellipsis':\n                    suffix = this._settings.maxLinesSuffix;\n                    break;\n                default:\n                    suffix = this._settings.textOverflow;\n            }\n            text = this.wrapWord(text, wordWrapWidth || renderInfo.w, suffix);\n        }\n\n        text = this.tokenize(text);\n        text = this.parse(text);\n        text = this.measure(text, letterSpacing, renderInfo.baseFont);\n\n        if (renderInfo.textIndent) {\n            text = this.indent(text, renderInfo.textIndent);\n        }\n\n        if (renderInfo.wordBreak) {\n            text = text.reduce((acc, t) => acc.concat(this.wordBreak(t, wrapWidth, renderInfo.baseFont)), [])\n            this.resetFontStyle()\n        }\n\n        // Calculate detailed drawing information\n        let x = paddingLeft;\n        let lineNo = 0;\n\n        for (const t of text) {\n            // Wrap text\n            if (renderInfo.wordWrap && x + t.width > wrapWidth || t.text == '\\n') {\n                x = paddingLeft;\n                lineNo += 1;\n            }\n            t.lineNo = lineNo;\n\n            if (t.text == '\\n') {\n                continue;\n            }\n\n            t.x = x;\n            x += t.width;\n        }\n        renderInfo.lineNum = lineNo + 1;\n\n        if (this._settings.h) {\n            renderInfo.h = this._settings.h;\n        } else if (renderInfo.maxLines && renderInfo.maxLines < renderInfo.lineNum) {\n            renderInfo.h = renderInfo.maxLines * renderInfo.lineHeight + fontSize / 2;\n        } else {\n            renderInfo.h = renderInfo.lineNum * renderInfo.lineHeight + fontSize / 2;\n        }\n\n        // This calculates the baseline offset in pixels from the font size.\n        // To retrieve this ratio, you would do this calculation:\n        //     (FontUnitsPerEm − hhea.Ascender − hhea.Descender) / (2 × FontUnitsPerEm)\n        //\n        // This give you the ratio for the baseline, which is then used to figure out\n        // where the baseline is relative to the bottom of the text bounding box.\n        const baselineOffsetInPx = renderInfo.fontBaselineRatio * renderInfo.fontSize;\n\n        // Vertical align\n        let vaOffset = 0;\n        if (renderInfo.verticalAlign == 'top' && this._context.textBaseline == 'alphabetic') {\n            vaOffset = -baselineOffsetInPx;\n        } else if (renderInfo.verticalAlign == 'middle') {\n            vaOffset = (renderInfo.lineHeight - renderInfo.fontSize - baselineOffsetInPx) / 2;\n        } else if (this._settings.verticalAlign == 'bottom') {\n            vaOffset = renderInfo.lineHeight - renderInfo.fontSize;\n        }\n\n        // Calculate lines information\n        renderInfo.lines = []\n        for (let i = 0; i < renderInfo.lineNum; i++) {\n            renderInfo.lines[i] = {\n                width: 0,\n                x: 0,\n                y: renderInfo.lineHeight * i + vaOffset,\n                text: [],\n            }\n        }\n\n        for (let t of text) {\n            renderInfo.lines[t.lineNo].text.push(t);\n        }\n\n        // Filter out white spaces at beginning and end of each line\n        for (const l of renderInfo.lines) {\n            if (l.text.length == 0) {\n                continue;\n            }\n\n            const firstWord = l.text[0].text;\n            const lastWord = l.text[l.text.length - 1].text;\n\n            if (firstWord == '\\n') {\n                l.text.shift();\n            }\n            if (isSpace(lastWord) || lastWord == '\\n') {\n                l.text.pop();\n            }\n        }\n\n\n        // Calculate line width\n        for (let l of renderInfo.lines) {\n            l.width = l.text.reduce((acc, t) => acc + t.width, 0);\n        }\n\n        renderInfo.width = this._settings.w != 0 ? this._settings.w * precision : Math.max(...renderInfo.lines.map((l) => l.width)) + paddingRight;\n        renderInfo.w = renderInfo.width;\n\n        // Apply maxLinesSuffix\n        if (renderInfo.maxLines && renderInfo.lineNum > renderInfo.maxLines && renderInfo.maxLinesSuffix) {\n            const index = renderInfo.maxLines - 1;\n            let lastLineText = text.filter((t) => t.lineNo == index)\n            let suffix = renderInfo.maxLinesSuffix;\n            suffix = this.tokenize(suffix);\n            suffix = this.parse(suffix);\n            suffix = this.measure(suffix, renderInfo.letterSpacing, renderInfo.baseFont);\n            for (const s of suffix) {\n                s.lineNo = index;\n                s.x = 0;\n                lastLineText.push(s)\n            }\n\n            const spl = suffix.length + 1\n            let _w = lastLineText.reduce((acc, t) => acc + t.width, 0);\n            while (_w > renderInfo.width || isSpace(lastLineText[lastLineText.length - spl].text)) {\n                lastLineText.splice(lastLineText.length - spl, 1);\n                _w = lastLineText.reduce((acc, t) => acc + t.width, 0);\n                if (lastLineText.length < spl) {\n                    break;\n                }\n            }\n            this.alignLine(lastLineText, lastLineText[0].x)\n\n            renderInfo.lines[index].text = lastLineText;\n            renderInfo.lines[index].width = _w;\n        }\n\n        // Horizontal alignment offset\n        if (renderInfo.textAlign == 'center') {\n            for (let l of renderInfo.lines) {\n                l.x = (renderInfo.width - l.width - paddingLeft) / 2;\n            }\n        } else if (renderInfo.textAlign == 'right') {\n            for (let l of renderInfo.lines) {\n                l.x = renderInfo.width - l.width - paddingLeft;\n            }\n        }\n\n        return renderInfo;\n    }\n\n    _draw() {\n        const renderInfo = this._calculateRenderInfo();\n        const precision = this.getPrecision();\n        const paddingLeft = renderInfo.paddingLeft * precision;\n\n        // Set canvas dimensions\n        let canvasWidth = renderInfo.w || renderInfo.width;\n        if (renderInfo.cutSx || renderInfo.cutEx) {\n            canvasWidth = Math.min(renderInfo.w, renderInfo.cutEx - renderInfo.cutSx);\n        }\n\n        let canvasHeight = renderInfo.h;\n        if (renderInfo.cutSy || renderInfo.cutEy) {\n            canvasHeight = Math.min(renderInfo.h, renderInfo.cutEy - renderInfo.cutSy);\n        }\n\n        this._canvas.width = Math.ceil(canvasWidth + this._stage.getOption('textRenderIssueMargin'));\n        this._canvas.height = Math.ceil(canvasHeight);\n\n        // Canvas context has been reset.\n        this.setFontProperties();\n\n        if (renderInfo.fontSize >= 128) {\n            // WpeWebKit bug: must force compositing because cairo-traps-compositor will not work with text first.\n            this._context.globalAlpha = 0.01;\n            this._context.fillRect(0, 0, 0.01, 0.01);\n            this._context.globalAlpha = 1.0;\n        }\n\n        // Cut\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(-renderInfo.cutSx, -renderInfo.cutSy);\n        }\n\n        // Highlight\n        if (renderInfo.highlight) {\n            const hlColor = renderInfo.highlightColor || 0x00000000;\n            const hlHeight = renderInfo.highlightHeight ? renderInfo.highlightHeight * precision :  renderInfo.fontSize * 1.5;\n            const hlOffset = renderInfo.highlightOffset ? renderInfo.highlightOffset * precision : 0;\n            const hlPaddingLeft = (renderInfo.highlightPaddingLeft !== null ? renderInfo.highlightPaddingLeft * precision : renderInfo.paddingLeft);\n            const hlPaddingRight = (renderInfo.highlightPaddingRight !== null ? renderInfo.highlightPaddingRight * precision : renderInfo.paddingRight);\n\n            this._context.fillStyle = StageUtils.getRgbaString(hlColor);\n            const lineNum = renderInfo.maxLines ? Math.min(renderInfo.maxLines, renderInfo.lineNum) : renderInfo.lineNum;\n            for (let i = 0; i < lineNum; i++) {\n                const l = renderInfo.lines[i];\n                this._context.fillRect(l.x - hlPaddingLeft + paddingLeft, l.y + hlOffset, l.width + hlPaddingLeft + hlPaddingRight, hlHeight);\n            }\n        }\n\n        // Text shadow.\n        let prevShadowSettings = null;\n        if (this._settings.shadow) {\n            prevShadowSettings = [this._context.shadowColor, this._context.shadowOffsetX, this._context.shadowOffsetY, this._context.shadowBlur];\n\n            this._context.shadowColor = StageUtils.getRgbaString(this._settings.shadowColor);\n            this._context.shadowOffsetX = this._settings.shadowOffsetX * precision;\n            this._context.shadowOffsetY = this._settings.shadowOffsetY * precision;\n            this._context.shadowBlur = this._settings.shadowBlur * precision;\n        }\n\n        // Draw text\n        const defaultColor = StageUtils.getRgbaString(this._settings.textColor);\n        let currentColor = defaultColor;\n        this._context.fillStyle = defaultColor;\n        for (const line of renderInfo.lines) {\n            for (const t of line.text) {\n                let lx = 0;\n\n                if (t.text == '\\n') {\n                    continue;\n                }\n\n                if (renderInfo.maxLines && t.lineNo >= renderInfo.maxLines) {\n                    continue;\n                }\n\n                if (t.color != currentColor) {\n                    currentColor = t.color;\n                    this._context.fillStyle = currentColor;\n                }\n\n                this._context.font = t.fontStyle;\n\n                // Draw with letter spacing\n                if (t.letters) {\n                    for (let l of t.letters) {\n                        const _x = renderInfo.lines[t.lineNo].x + t.x + lx;\n                        this._context.fillText(l.text, _x, renderInfo.lines[t.lineNo].y + renderInfo.fontSize);\n                        lx += l.width;\n                    }\n                // Standard drawing\n                } else {\n                    const _x = renderInfo.lines[t.lineNo].x + t.x;\n                    this._context.fillText(t.text, _x, renderInfo.lines[t.lineNo].y + renderInfo.fontSize);\n                }\n            }\n        }\n\n        // Reset text shadow\n        if (prevShadowSettings) {\n            this._context.shadowColor = prevShadowSettings[0];\n            this._context.shadowOffsetX = prevShadowSettings[1];\n            this._context.shadowOffsetY = prevShadowSettings[2];\n            this._context.shadowBlur = prevShadowSettings[3];\n        }\n\n        // Reset cut translation\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(renderInfo.cutSx, renderInfo.cutSy);\n        }\n\n        // Postprocess renderInfo.lines to be compatible with standard version\n        renderInfo.lines = renderInfo.lines.map((l) => l.text.reduce((acc, v) => acc + v.text, ''));\n        if (renderInfo.maxLines) {\n            renderInfo.lines = renderInfo.lines.slice(0, renderInfo.maxLines);\n        }\n\n\n        this.renderInfo = renderInfo;\n\n    };\n\n    /**\n     * See {@link measureText}\n     *\n     * @param {string} word\n     * @param {number} space\n     * @returns {number}\n     */\n    measureText(word, space = 0) {\n        return measureText(this._context, word, space);\n    }\n\n    tokenize(text) {\n        return tokenizeString(/ |\\u200B|\\n|<i>|<\\/i>|<b>|<\\/b>|<color=0[xX][0-9a-fA-F]{8}>|<\\/color>/g, text);\n    }\n\n    parse(tokens) {\n        let italic = 0;\n        let bold = 0;\n        let colorStack = [StageUtils.getRgbaString(this._settings.textColor)];\n        let color = 0;\n\n        const colorRegexp = /<color=(0[xX][0-9a-fA-F]{8})>/;\n\n        return tokens.map((t) => {\n            if (t == '<i>') {\n                italic += 1;\n                t = '';\n            } else if (t == '</i>' && italic > 0) {\n                italic -= 1;\n                t = '';\n            } else if (t == '<b>') {\n                bold += 1;\n                t = '';\n            } else if (t == '</b>' && bold > 0) {\n                bold -= 1;\n                t = '';\n            } else if (t == '</color>') {\n                if (colorStack.length > 1) {\n                    color -= 1;\n                    colorStack.pop();\n                }\n                t = '';\n            } else if (colorRegexp.test(t)) {\n                const matched = colorRegexp.exec(t);\n                colorStack.push(\n                    StageUtils.getRgbaString(parseInt(matched[1]))\n                );\n                color += 1;\n                t = '';\n\n            }\n\n            return {\n                text: t,\n                italic: italic,\n                bold: bold,\n                color: colorStack[color],\n            }\n        })\n        .filter((o) => o.text != '');\n    }\n\n    applyFontStyle(word, baseFont) {\n        let font = baseFont;\n        if (word.bold) {\n            font = 'bold ' + font;\n        }\n        if (word.italic) {\n            font = 'italic ' + font;\n        }\n        this._context.font = font\n        word.fontStyle = font;\n    }\n\n    resetFontStyle(baseFont) {\n        this._context.font = baseFont;\n    }\n\n    measure(parsed, letterSpacing = 0, baseFont) {\n        for (const p of parsed) {\n            this.applyFontStyle(p, baseFont);\n            p.width = this.measureText(p.text, letterSpacing);\n\n            // Letter by letter detail for letter spacing\n            if (letterSpacing > 0) {\n                p.letters = p.text.split('').map((l) => {return {text: l}});\n                for (let l of p.letters) {\n                    l.width = this.measureText(l.text, letterSpacing);\n                }\n            }\n\n        }\n        this.resetFontStyle(baseFont);\n        return parsed;\n    }\n\n    indent(parsed, textIndent) {\n        parsed.splice(0, 0, {text: \"\", width: textIndent});\n        return parsed;\n    }\n\n    wrapWord(word, wordWrapWidth, suffix) {\n        const suffixWidth = this.measureText(suffix);\n        const wordLen = word.length\n        const wordWidth = this.measureText(word);\n\n        /* If word fits wrapWidth, do nothing */\n        if (wordWidth <= wordWrapWidth) {\n            return word;\n        }\n\n        /* Make initial guess for text cuttoff */\n        let cutoffIndex = Math.floor((wordWrapWidth * wordLen) / wordWidth);\n        let truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n\n        /* In case guess was overestimated, shrink it letter by letter. */\n        if (truncWordWidth > wordWrapWidth) {\n            while (cutoffIndex > 0) {\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n                if (truncWordWidth > wordWrapWidth) {\n                    cutoffIndex -= 1;\n                } else {\n                    break;\n                }\n            }\n\n        /* In case guess was underestimated, extend it letter by letter. */\n        } else {\n            while (cutoffIndex < wordLen) {\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n                if (truncWordWidth < wordWrapWidth) {\n                    cutoffIndex += 1;\n                } else {\n                    // Finally, when bound is crossed, retract last letter.\n                    cutoffIndex -=1;\n                    break;\n                }\n            }\n        }\n\n        /* If wrapWidth is too short to even contain suffix alone, return empty string */\n        return word.substring(0, cutoffIndex) + (wordWrapWidth >= suffixWidth ? suffix : '')\n    }\n\n    _getBreakIndex(word, width) {\n        const wordLen = word.length;\n        const wordWidth = this.measureText(word);\n\n        if (wordWidth <= width) {\n            return {breakIndex: word.length, truncWordWidth: wordWidth};\n        }\n\n        let breakIndex = Math.floor((width * wordLen) / wordWidth);\n        let truncWordWidth = this.measureText(word.substring(0, breakIndex))\n\n        /* In case guess was overestimated, shrink it letter by letter. */\n        if (truncWordWidth > width) {\n            while (breakIndex > 0) {\n                truncWordWidth = this.measureText(word.substring(0, breakIndex));\n                if (truncWordWidth > width) {\n                    breakIndex -= 1;\n                } else {\n                    break;\n                }\n            }\n\n        /* In case guess was underestimated, extend it letter by letter. */\n        } else {\n            while (breakIndex < wordLen) {\n                truncWordWidth = this.measureText(word.substring(0, breakIndex));\n                if (truncWordWidth < width) {\n                    breakIndex += 1;\n                } else {\n                    // Finally, when bound is crossed, retract last letter.\n                    breakIndex -=1;\n                    truncWordWidth = this.measureText(word.substring(0, breakIndex));\n                    break;\n                }\n            }\n        }\n        return {breakIndex, truncWordWidth};\n\n    }\n\n    wordBreak(word, width, baseFont) {\n        if (!word.text) {\n            return word\n        }\n        this.applyFontStyle(word, baseFont)\n        const parts = [];\n        let text = word.text;\n        if (!word.letters) {\n            while (true) {\n                const {breakIndex, truncWordWidth} = this._getBreakIndex(text, width);\n                parts.push({...word});\n                parts[parts.length - 1].text = text.slice(0, breakIndex);\n                parts[parts.length - 1].width = truncWordWidth;\n\n                if (breakIndex === text.length) {\n                    break;\n                }\n\n                text = text.slice(breakIndex);\n            }\n        } else {\n            let totalWidth = 0;\n            let letters = [];\n            let breakIndex = 0;\n            for (const l of word.letters) {\n                if (totalWidth + l.width >= width) {\n                    parts.push({...word});\n                    parts[parts.length - 1].text = text.slice(0, breakIndex);\n                    parts[parts.length - 1].width = totalWidth;\n                    parts[parts.length - 1].letters = letters;\n                    text = text.slice(breakIndex);\n                    totalWidth = 0;\n                    letters = [];\n                    breakIndex = 0;\n\n                } else {\n                    breakIndex += 1;\n                    letters.push(l);\n                    totalWidth += l.width;\n                }\n            }\n\n            if (totalWidth > 0) {\n                parts.push({...word});\n                parts[parts.length - 1].text = text.slice(0, breakIndex);\n                parts[parts.length - 1].width = totalWidth;\n                parts[parts.length - 1].letters = letters;\n            }\n        }\n\n        return parts;\n    }\n\n    alignLine(parsed, initialX = 0) {\n        let prevWidth = 0;\n        let prevX = initialX;\n        for (const word of parsed) {\n            if (word.text == '\\n') {\n                continue;\n            }\n            word.x = prevX + prevWidth;\n            prevX = word.x;\n            prevWidth = word.width;\n        }\n\n    }\n}","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class TextTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n\n        // We use the stage precision as the default precision in case of a text texture.\n        this._precision = this.stage.getOption('precision');\n    }\n\n    static renderer(stage, canvas, settings) {\n        if (settings.advancedRenderer) {\n            return new TextTextureRendererAdvanced(stage, canvas, settings);\n        } else {\n            return new TextTextureRenderer(stage, canvas, settings);\n        }\n    }\n\n    get text() {\n        return this._text;\n    }\n\n    set text(v) {\n        if (this._text !== v) {\n            this._text = \"\" + v;\n            this._changed();\n        }\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    set w(v) {\n        if (this._w !== v) {\n            this._w = v;\n            this._changed();\n        }\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    set h(v) {\n        if (this._h !== v) {\n            this._h = v;\n            this._changed();\n        }\n    }\n\n    get fontStyle() {\n        return this._fontStyle;\n    }\n\n    set fontStyle(v) {\n        if (this._fontStyle !== v) {\n            this._fontStyle = v;\n            this._changed();\n        }\n    }\n\n    get fontBaselineRatio() {\n        return this._fontBaselineRatio;\n    }\n    \n    set fontBaselineRatio(v) {\n        if (this._fontBaselineRatio !== v) {\n            this._fontBaselineRatio = v;\n            this._changed();\n        }\n    }\n\n    get fontSize() {\n        return this._fontSize;\n    }\n\n    set fontSize(v) {\n        if (this._fontSize !== v) {\n            this._fontSize = v;\n            this._changed();\n        }\n    }\n\n    get fontFace() {\n        return this._fontFace;\n    }\n\n    set fontFace(v) {\n        if (this._fontFace !== v) {\n            this._fontFace = v;\n            this._changed();\n        }\n    }\n\n    get wordWrap() {\n        return this._wordWrap;\n    }\n\n    set wordWrap(v) {\n        if (this._wordWrap !== v) {\n            this._wordWrap = v;\n            this._changed();\n        }\n    }\n\n    get wordWrapWidth() {\n        return this._wordWrapWidth;\n    }\n\n    set wordWrapWidth(v) {\n        if (this._wordWrapWidth !== v) {\n            this._wordWrapWidth = v;\n            this._changed();\n        }\n    }\n\n    get wordBreak() {\n        return this._wordBreak;\n    }\n\n    set wordBreak(v) {\n        if (this._wordBreak !== v) {\n            this._wordBreak = v;\n            this._changed();\n        }\n    }\n\n    get textOverflow() {\n        return this._textOverflow;\n    }\n\n    set textOverflow(v) {\n        if (v != this._textOverflow) {\n            this._textOverflow = v;\n            this._changed();\n        }\n    }\n\n    get lineHeight() {\n        return this._lineHeight;\n    }\n\n    set lineHeight(v) {\n        if (this._lineHeight !== v) {\n            this._lineHeight = v;\n            this._changed();\n        }\n    }\n\n    get textBaseline() {\n        return this._textBaseline;\n    }\n\n    set textBaseline(v) {\n        if (this._textBaseline !== v) {\n            this._textBaseline = v;\n            this._changed();\n        }\n    }\n\n    get textAlign() {\n        return this._textAlign;\n    }\n\n    set textAlign(v) {\n        if (this._textAlign !== v) {\n            this._textAlign = v;\n            this._changed();\n        }\n    }\n\n    get verticalAlign() {\n        return this._verticalAlign;\n    }\n\n    set verticalAlign(v) {\n        if (this._verticalAlign !== v) {\n            this._verticalAlign = v;\n            this._changed();\n        }\n    }\n\n    get offsetY() {\n        return this._offsetY;\n    }\n\n    set offsetY(v) {\n        if (this._offsetY !== v) {\n            this._offsetY = v;\n            this._changed();\n        }\n    }\n\n    get maxLines() {\n        return this._maxLines;\n    }\n\n    set maxLines(v) {\n        if (this._maxLines !== v) {\n            this._maxLines = v;\n            this._changed();\n        }\n    }\n\n    get maxLinesSuffix() {\n        return this._maxLinesSuffix;\n    }\n\n    set maxLinesSuffix(v) {\n        if (this._maxLinesSuffix !== v) {\n            this._maxLinesSuffix = v;\n            this._changed();\n        }\n    }\n\n    get textColor() {\n        return this._textColor;\n    }\n\n    set textColor(v) {\n        if (this._textColor !== v) {\n            this._textColor = v;\n            this._changed();\n        }\n    }\n\n    get paddingLeft() {\n        return this._paddingLeft;\n    }\n\n    set paddingLeft(v) {\n        if (this._paddingLeft !== v) {\n            this._paddingLeft = v;\n            this._changed();\n        }\n    }\n\n    get paddingRight() {\n        return this._paddingRight;\n    }\n\n    set paddingRight(v) {\n        if (this._paddingRight !== v) {\n            this._paddingRight = v;\n            this._changed();\n        }\n    }\n\n    get shadow() {\n        return this._shadow;\n    }\n\n    set shadow(v) {\n        if (this._shadow !== v) {\n            this._shadow = v;\n            this._changed();\n        }\n    }\n\n    get shadowColor() {\n        return this._shadowColor;\n    }\n\n    set shadowColor(v) {\n        if (this._shadowColor !== v) {\n            this._shadowColor = v;\n            this._changed();\n        }\n    }\n\n    get shadowOffsetX() {\n        return this._shadowOffsetX;\n    }\n\n    set shadowOffsetX(v) {\n        if (this._shadowOffsetX !== v) {\n            this._shadowOffsetX = v;\n            this._changed();\n        }\n    }\n\n    get shadowOffsetY() {\n        return this._shadowOffsetY;\n    }\n\n    set shadowOffsetY(v) {\n        if (this._shadowOffsetY !== v) {\n            this._shadowOffsetY = v;\n            this._changed();\n        }\n    }\n\n    get shadowBlur() {\n        return this._shadowBlur;\n    }\n\n    set shadowBlur(v) {\n        if (this._shadowBlur !== v) {\n            this._shadowBlur = v;\n            this._changed();\n        }\n    }\n\n    get highlight() {\n        return this._highlight;\n    }\n\n    set highlight(v) {\n        if (this._highlight !== v) {\n            this._highlight = v;\n            this._changed();\n        }\n    }\n\n    get highlightHeight() {\n        return this._highlightHeight;\n    }\n\n    set highlightHeight(v) {\n        if (this._highlightHeight !== v) {\n            this._highlightHeight = v;\n            this._changed();\n        }\n    }\n\n    get highlightColor() {\n        return this._highlightColor;\n    }\n\n    set highlightColor(v) {\n        if (this._highlightColor !== v) {\n            this._highlightColor = v;\n            this._changed();\n        }\n    }\n\n    get highlightOffset() {\n        return this._highlightOffset;\n    }\n\n    set highlightOffset(v) {\n        if (this._highlightOffset !== v) {\n            this._highlightOffset = v;\n            this._changed();\n        }\n    }\n\n    get highlightPaddingLeft() {\n        return this._highlightPaddingLeft;\n    }\n\n    set highlightPaddingLeft(v) {\n        if (this._highlightPaddingLeft !== v) {\n            this._highlightPaddingLeft = v;\n            this._changed();\n        }\n    }\n\n    get highlightPaddingRight() {\n        return this._highlightPaddingRight;\n    }\n\n    set highlightPaddingRight(v) {\n        if (this._highlightPaddingRight !== v) {\n            this._highlightPaddingRight = v;\n            this._changed();\n        }\n    }\n\n    get cutSx() {\n        return this._cutSx;\n    }\n\n    set cutSx(v) {\n        if (this._cutSx !== v) {\n            this._cutSx = v;\n            this._changed();\n        }\n    }\n\n    get cutEx() {\n        return this._cutEx;\n    }\n\n    set cutEx(v) {\n        if (this._cutEx !== v) {\n            this._cutEx = v;\n            this._changed();\n        }\n    }\n\n    get cutSy() {\n        return this._cutSy;\n    }\n\n    set cutSy(v) {\n        if (this._cutSy !== v) {\n            this._cutSy = v;\n            this._changed();\n        }\n    }\n\n    get cutEy() {\n        return this._cutEy;\n    }\n\n    set cutEy(v) {\n        if (this._cutEy !== v) {\n            this._cutEy = v;\n            this._changed();\n        }\n    }\n\n    get advancedRenderer() {\n        return this._advancedRenderer;\n    }\n\n    set advancedRenderer(v) {\n        if (this._advancedRenderer !== v) {\n            this._advancedRenderer = v;\n            this._changed();\n        }\n    }\n\n    set letterSpacing(v) {\n        if (this._letterSpacing !== v) {\n            this._letterSpacing = v;\n            this._changed();\n        }\n    }\n\n    get letterSpacing() {\n        return this._letterSpacing;\n    }\n\n    set textIndent(v) {\n        if (this._textIndent !== v) {\n            this._textIndent = v;\n            this._changed();\n        }\n    }\n\n    get textIndent() {\n        return this._textIndent;\n    }\n\n    set rtl(v) {\n        if (this._rtl !== v) {\n            this._rtl = v;\n            this._changed();\n        }\n    }\n\n    get rtl() {\n        return this._rtl;\n    }\n\n    get precision() {\n        return super.precision;\n    }\n\n    set precision(v) {\n        // We actually draw differently when the precision changes.\n        if (this.precision !== v) {\n            super.precision = v;\n            this._changed();\n        }\n    }\n\n    _getIsValid() {\n        return !!this.text;\n    }\n\n    _getLookupId() {\n        let parts = [];\n\n        if (this.w !== 0) parts.push(\"w \" + this.w);\n        if (this.h !== 0) parts.push(\"h \" + this.h);\n        if (this.fontStyle !== \"normal\") parts.push(\"fS\" + this.fontStyle);\n        if (this.fontSize !== 40) parts.push(\"fs\" + this.fontSize);\n        if (this.fontBaselineRatio !== 0) parts.push('fb' + this.fontBaselineRatio);\n        if (this.fontFace !== null) parts.push(\"ff\" + (Array.isArray(this.fontFace) ? this.fontFace.join(\",\") : this.fontFace));\n        if (this.wordWrap !== true) parts.push(\"wr\" + (this.wordWrap ? 1 : 0));\n        if (this.wordWrapWidth !== 0) parts.push(\"ww\" + this.wordWrapWidth);\n        if (this.wordBreak !== false) parts.push(\"wb\" + this.wordBreak ? 1 : 0);\n        if (this.textOverflow != \"\") parts.push(\"to\" + this.textOverflow);\n        if (this.lineHeight !== null) parts.push(\"lh\" + this.lineHeight);\n        if (this.textBaseline !== \"alphabetic\") parts.push(\"tb\" + this.textBaseline);\n        if (this.textAlign !== \"left\") parts.push(\"ta\" + this.textAlign);\n        if (this.verticalAlign !== \"top\") parts.push(\"va\" + this.verticalAlign);\n        if (this.offsetY !== null) parts.push(\"oy\" + this.offsetY);\n        if (this.maxLines !== 0) parts.push(\"ml\" + this.maxLines);\n        if (this.maxLinesSuffix !== \"..\") parts.push(\"ms\" + this.maxLinesSuffix);\n        parts.push(\"pc\" + this.precision);\n        if (this.textColor !== 0xffffffff) parts.push(\"co\" + this.textColor.toString(16));\n        if (this.paddingLeft !== 0) parts.push(\"pl\" + this.paddingLeft);\n        if (this.paddingRight !== 0) parts.push(\"pr\" + this.paddingRight);\n        if (this.shadow !== false) parts.push(\"sh\" + (this.shadow ? 1 : 0));\n        if (this.shadowColor !== 0xff000000) parts.push(\"sc\" + this.shadowColor.toString(16));\n        if (this.shadowOffsetX !== 0) parts.push(\"sx\" + this.shadowOffsetX);\n        if (this.shadowOffsetY !== 0) parts.push(\"sy\" + this.shadowOffsetY);\n        if (this.shadowBlur !== 5) parts.push(\"sb\" + this.shadowBlur);\n        if (this.highlight !== false) parts.push(\"hL\" + (this.highlight ? 1 : 0));\n        if (this.highlightHeight !== 0) parts.push(\"hh\" + this.highlightHeight);\n        if (this.highlightColor !== 0xff000000) parts.push(\"hc\" + this.highlightColor.toString(16));\n        if (this.highlightOffset !== null) parts.push(\"ho\" + this.highlightOffset);\n        if (this.highlightPaddingLeft !== null) parts.push(\"hl\" + this.highlightPaddingLeft);\n        if (this.highlightPaddingRight !== null) parts.push(\"hr\" + this.highlightPaddingRight);\n        if (this.letterSpacing !== null) parts.push(\"ls\" + this.letterSpacing);\n        if (this.textIndent !== null) parts.push(\"ti\" + this.textIndent);\n\n        if (this.cutSx) parts.push(\"csx\" + this.cutSx);\n        if (this.cutEx) parts.push(\"cex\" + this.cutEx);\n        if (this.cutSy) parts.push(\"csy\" + this.cutSy);\n        if (this.cutEy) parts.push(\"cey\" + this.cutEy);\n\n        if (this.advancedRenderer) parts.push(\"aR\" + this.advancedRenderer ? 1 : 0);\n\n        let id = \"TX$\" + parts.join(\"|\") + \":\" + this.text;\n        return id;\n    }\n\n    _getSourceLoader() {\n        const args = this.cloneArgs();\n\n        const gl = this.stage.gl;\n\n        return function (cb) {\n            const canvas = this.stage.platform.getDrawingCanvas();\n            const renderer = TextTexture.renderer(this.stage, canvas, args);\n            \n            const p = renderer.draw();\n\n            const texParams = {};\n\n            const sharpCfg = this.stage.getOption('fontSharp');\n            let sharpen = false;\n\n            // Prevent text blur when text texture is downscaled\n            if (Utils.isBoolean(sharpCfg)) {\n                sharpen = sharpCfg;\n            } else if (Utils.isObject(sharpCfg)) {\n                const precision = this.stage.getRenderPrecision();\n                sharpen = precision <= sharpCfg.precision && args.fontSize <= sharpCfg.fontSize;\n            }\n\n            if (gl && sharpen) {\n                texParams[gl.TEXTURE_MAG_FILTER] = gl.NEAREST;\n            }\n\n            if (p) {\n                p.then(() => {\n                    /* FIXME: on some platforms (e.g. RPI), throttling text textures cause artifacts */\n                    cb(null, Object.assign({\n                        renderInfo: renderer.renderInfo,\n                        throttle: false,\n                        texParams: texParams,\n                    }, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas)));\n                }).catch((err) => {\n                    cb(err);\n                });\n            } else {\n                cb(null, Object.assign({\n                    renderInfo: renderer.renderInfo,\n                    throttle: false,\n                    texParams: texParams,\n                }, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas)));\n            }\n        };\n    }\n\n\n    getNonDefaults() {\n        const nonDefaults = super.getNonDefaults();\n        if (this.text !== \"\") nonDefaults['text'] = this.text;\n        if (this.w !== 0) nonDefaults['w'] = this.w;\n        if (this.h !== 0) nonDefaults['h'] = this.h;\n        if (this.fontStyle !== \"normal\") nonDefaults['fontStyle'] = this.fontStyle;\n        if (this.fontSize !== 40) nonDefaults[\"fontSize\"] = this.fontSize;\n        if (this.fontBaselineRatio !== 0) nonDefaults['fontBaselineRatio'] = this.fontBaselineRatio;\n        if (this.fontFace !== null) nonDefaults[\"fontFace\"] = this.fontFace;\n        if (this.wordWrap !== true) nonDefaults[\"wordWrap\"] = this.wordWrap;\n        if (this.wordWrapWidth !== 0) nonDefaults[\"wordWrapWidth\"] = this.wordWrapWidth;\n        if (this.wordBreak !== false) nonDefaults[\"wordBreak\"] = this.wordBreak;\n        if (this.textOverflow != \"\") nonDefaults[\"textOverflow\"] = this.textOverflow;\n        if (this.lineHeight !== null) nonDefaults[\"lineHeight\"] = this.lineHeight;\n        if (this.textBaseline !== \"alphabetic\") nonDefaults[\"textBaseline\"] = this.textBaseline;\n        if (this.textAlign !== \"left\") nonDefaults[\"textAlign\"] = this.textAlign;\n        if (this.verticalAlign !== \"top\") nonDefaults[\"verticalAlign\"] = this.verticalAlign;\n        if (this.offsetY !== null) nonDefaults[\"offsetY\"] = this.offsetY;\n        if (this.maxLines !== 0) nonDefaults[\"maxLines\"] = this.maxLines;\n        if (this.maxLinesSuffix !== \"..\") nonDefaults[\"maxLinesSuffix\"] = this.maxLinesSuffix;\n        if (this.precision !== this.stage.getOption('precision')) nonDefaults[\"precision\"] = this.precision;\n        if (this.textColor !== 0xffffffff) nonDefaults[\"textColor\"] = this.textColor;\n        if (this.paddingLeft !== 0) nonDefaults[\"paddingLeft\"] = this.paddingLeft;\n        if (this.paddingRight !== 0) nonDefaults[\"paddingRight\"] = this.paddingRight;\n        if (this.shadow !== false) nonDefaults[\"shadow\"] = this.shadow;\n        if (this.shadowColor !== 0xff000000) nonDefaults[\"shadowColor\"] = this.shadowColor;\n        if (this.shadowOffsetX !== 0) nonDefaults[\"shadowOffsetX\"] = this.shadowOffsetX;\n        if (this.shadowOffsetY !== 0) nonDefaults[\"shadowOffsetY\"] = this.shadowOffsetY;\n        if (this.shadowBlur !== 5) nonDefaults[\"shadowBlur\"] = this.shadowBlur;\n        if (this.highlight !== false) nonDefaults[\"highlight\"] = this.highlight;\n        if (this.highlightHeight !== 0) nonDefaults[\"highlightHeight\"] = this.highlightHeight;\n        if (this.highlightColor !== 0xff000000) nonDefaults[\"highlightColor\"] = this.highlightColor;\n        if (this.highlightOffset !== 0) nonDefaults[\"highlightOffset\"] = this.highlightOffset;\n        if (this.highlightPaddingLeft !== 0) nonDefaults[\"highlightPaddingLeft\"] = this.highlightPaddingLeft;\n        if (this.highlightPaddingRight !== 0) nonDefaults[\"highlightPaddingRight\"] = this.highlightPaddingRight;\n        if (this.letterSpacing !== 0) nonDefaults[\"letterSpacing\"] = this.letterSpacing;\n        if (this.textIndent !== 0) nonDefaults[\"textIndent\"] = this.textIndent;\n        if (this.rtl !== 0) nonDefaults[\"rtl\"] = this.rtl;\n\n        if (this.cutSx) nonDefaults[\"cutSx\"] = this.cutSx;\n        if (this.cutEx) nonDefaults[\"cutEx\"] = this.cutEx;\n        if (this.cutSy) nonDefaults[\"cutSy\"] = this.cutSy;\n        if (this.cutEy) nonDefaults[\"cutEy\"] = this.cutEy;\n\n        if (this.advancedRenderer) nonDefaults[\"renderer\"] = this.advancedRenderer;\n        return nonDefaults;\n    }\n\n    cloneArgs() {\n        let obj = {};\n        obj.text = this._text;\n        obj.w = this._w;\n        obj.h = this._h;\n        obj.fontStyle = this._fontStyle;\n        obj.fontSize = this._fontSize;\n        obj.fontBaselineRatio = this._fontBaselineRatio;\n        obj.fontFace = this._fontFace;\n        obj.wordWrap = this._wordWrap;\n        obj.wordWrapWidth = this._wordWrapWidth;\n        obj.wordBreak = this._wordBreak;\n        obj.textOverflow = this._textOverflow;\n        obj.lineHeight = this._lineHeight;\n        obj.textBaseline = this._textBaseline;\n        obj.textAlign = this._textAlign;\n        obj.verticalAlign = this._verticalAlign;\n        obj.offsetY = this._offsetY;\n        obj.maxLines = this._maxLines;\n        obj.maxLinesSuffix = this._maxLinesSuffix;\n        obj.precision = this._precision;\n        obj.textColor = this._textColor;\n        obj.paddingLeft = this._paddingLeft;\n        obj.paddingRight = this._paddingRight;\n        obj.shadow = this._shadow;\n        obj.shadowColor = this._shadowColor;\n        obj.shadowOffsetX = this._shadowOffsetX;\n        obj.shadowOffsetY = this._shadowOffsetY;\n        obj.shadowBlur = this._shadowBlur;\n        obj.highlight = this._highlight;\n        obj.highlightHeight = this._highlightHeight;\n        obj.highlightColor = this._highlightColor;\n        obj.highlightOffset = this._highlightOffset;\n        obj.highlightPaddingLeft = this._highlightPaddingLeft;\n        obj.highlightPaddingRight = this._highlightPaddingRight;\n        obj.letterSpacing = this._letterSpacing;\n        obj.textIndent = this._textIndent;\n        obj.rtl = this._rtl;\n        obj.cutSx = this._cutSx;\n        obj.cutEx = this._cutEx;\n        obj.cutSy = this._cutSy;\n        obj.cutEy = this._cutEy;\n        obj.advancedRenderer = this._advancedRenderer;\n        return obj;\n    }\n\n\n}\n\n// Because there are so many properties, we prefer to use the prototype for default values.\n// This causes a decrease in performance, but also a decrease in memory usage.\nlet proto = TextTexture.prototype;\nproto._text = \"\";\nproto._w = 0;\nproto._h = 0;\nproto._fontStyle = \"normal\";\nproto._fontSize = 40;\nproto._fontFace = null;\nproto._wordWrap = true;\nproto._wordWrapWidth = 0;\nproto._wordBreak = false;\nproto._textOverflow = \"\";\nproto._lineHeight = null;\nproto._textBaseline = \"alphabetic\";\nproto._textAlign = \"left\";\nproto._verticalAlign = \"top\";\nproto._offsetY = null;\nproto._maxLines = 0;\nproto._maxLinesSuffix = \"..\";\nproto._textColor = 0xFFFFFFFF;\nproto._paddingLeft = 0;\nproto._paddingRight = 0;\nproto._shadow = false;\nproto._shadowColor = 0xFF000000;\nproto._shadowOffsetX = 0;\nproto._shadowOffsetY = 0;\nproto._shadowBlur = 5;\nproto._highlight = false;\nproto._highlightHeight = 0;\nproto._highlightColor = 0xFF000000;\nproto._highlightOffset = 0;\nproto._highlightPaddingLeft = 0;\nproto._highlightPaddingRight = 0;\nproto._letterSpacing = 0;\nproto._textIndent = 0;\nproto._rtl = 0;\nproto._cutSx = 0;\nproto._cutEx = 0;\nproto._cutSy = 0;\nproto._cutEy = 0;\nproto._advancedRenderer = false;\nproto._fontBaselineRatio = 0;\n\n\nimport TextTextureRenderer from \"./TextTextureRenderer.mjs\";\nimport TextTextureRendererAdvanced from \"./TextTextureRendererAdvanced.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class SourceTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n\n        this._textureSource = undefined;\n    }\n\n    get textureSource() {\n        return this._textureSource;\n    }\n\n    set textureSource(v) {\n        if (v !== this._textureSource) {\n            if (v.isResultTexture) {\n                // In case of a result texture, automatically inherit the precision.\n                this._precision = this.stage.getRenderPrecision();\n            }\n            this._textureSource = v;\n            this._changed();\n        }\n    }\n\n    _getTextureSource() {\n        return this._textureSource;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from \"../EventEmitter.mjs\";\n\nexport default class Transition extends EventEmitter {\n\n    constructor(manager, settings, element, property) {\n        super();\n\n        this.manager = manager;\n\n        this._settings = settings;\n\n        this._element = element;\n\n        this._getter = element.constructor.getGetter(property);\n        this._setter = element.constructor.getSetter(property);\n\n        this._merger = settings.merger;\n\n        if (!this._merger) {\n            this._merger = element.constructor.getMerger(property);\n        }\n\n        this._startValue = this._getter(this._element);\n        this._targetValue = this._startValue;\n\n        this._p = 1;\n        this._delayLeft = 0;\n    }\n\n    start(targetValue) {\n        this._startValue = this._getter(this._element);\n\n        if (!this.isAttached()) {\n            // We don't support transitions on non-attached elements. Just set value without invoking listeners.\n            this._targetValue = targetValue;\n            this._p = 1;\n            this._updateDrawValue();\n        } else {\n            if (targetValue === this._startValue) {\n                this.reset(targetValue, 1);\n            } else {\n                this._targetValue = targetValue;\n                this._p = 0;\n                this._delayLeft = this._settings.delay;\n                this.emit('start');\n                this.add();\n            }\n        }\n    }\n\n    finish() {\n        if (this._p < 1) {\n            // Value setting and will must be invoked (async) upon next transition cycle.\n            this._p = 1;\n        }\n    }\n\n    stop() {\n        // Just stop where the transition is at.\n        this.emit('stop');\n        this.manager.removeActive(this);\n    }\n\n    pause() {\n        this.stop();\n    }\n\n    play() {\n        this.manager.addActive(this);\n    }\n\n    reset(targetValue, p) {\n        if (!this.isAttached()) {\n            // We don't support transitions on non-attached elements. Just set value without invoking listeners.\n            this._startValue = this._getter(this._element);\n            this._targetValue = targetValue;\n            this._p = 1;\n            this._updateDrawValue();\n        } else {\n            this._startValue = this._getter(this._element);\n            this._targetValue = targetValue;\n            this._p = p;\n            this.add();\n        }\n    }\n\n    _updateDrawValue() {\n        this._setter(this._element, this.getDrawValue());\n    }\n\n    add() {\n        this.manager.addActive(this);\n    }\n\n    isAttached() {\n        return this._element.attached;\n    }\n\n    isRunning() {\n        return (this._p < 1.0);\n    }\n\n    progress(dt) {\n        if (!this.isAttached()) {\n            // Skip to end of transition so that it is removed.\n            this._p = 1;\n        }\n\n        if (this.p < 1) {\n            if (this.delayLeft > 0) {\n                this._delayLeft -= dt;\n\n                if (this.delayLeft < 0) {\n                    dt = -this.delayLeft;\n                    this._delayLeft = 0;\n\n                    this.emit('delayEnd');\n                } else {\n                    return;\n                }\n            }\n\n            if (this._settings.duration == 0) {\n                this._p = 1;\n            } else {\n                this._p += dt / this._settings.duration;\n            }\n            if (this._p >= 1) {\n                // Finished!;\n                this._p = 1;\n            }\n        }\n\n        this._updateDrawValue();\n\n        this.invokeListeners();\n    }\n\n    invokeListeners() {\n        this.emit('progress', this.p);\n        if (this.p === 1) {\n            this.emit('finish');\n        }\n    }\n\n    updateTargetValue(targetValue) {\n        let t = this._settings.timingFunctionImpl(this.p);\n        if (t === 1) {\n            this._targetValue = targetValue;\n        } else if (t === 0) {\n            this._startValue = this._targetValue;\n            this._targetValue = targetValue;\n        } else {\n            this._startValue = targetValue - ((targetValue - this._targetValue) / (1 - t));\n            this._targetValue = targetValue;\n        }\n    }\n\n    getDrawValue() {\n        if (this.p >= 1) {\n            return this.targetValue;\n        } else {\n            let v = this._settings._timingFunctionImpl(this.p);\n            return this._merger(this.targetValue, this.startValue, v);\n        }\n    }\n\n    skipDelay() {\n        this._delayLeft = 0;\n    }\n\n    get startValue() {\n        return this._startValue;\n    }\n\n    get targetValue() {\n        return this._targetValue;\n    }\n\n    get p() {\n        return this._p;\n    }\n\n    get delayLeft() {\n        return this._delayLeft;\n    }\n\n    get element() {\n        return this._element;\n    }\n\n    get settings() {\n        return this._settings;\n    }\n\n    set settings(v) {\n        this._settings = v;\n    }\n\n}\n\nTransition.prototype.isTransition = true;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages a list of objects.\n * Objects may be patched. Then, they can be referenced using the 'ref' (string) property.\n */\nexport default class ObjectList {\n\n    constructor() {\n        this._items = [];\n        this._refs = {}\n    }\n\n    get() {\n        return this._items;\n    }\n\n    get first() {\n        return this._items[0];\n    }\n\n    get last() {\n        return this._items.length ? this._items[this._items.length - 1] : undefined;\n    }\n\n    add(item) {\n        this.addAt(item, this._items.length);\n    }\n\n    addAt(item, index) {\n        if (index >= 0 && index <= this._items.length) {\n            let currentIndex = this._items.indexOf(item);\n            if (currentIndex === index) {\n                return item;\n            }\n\n            if (Utils.isObjectLiteral(item)) {\n                const o = item;\n                item = this.createItem(o);\n                item.patch(o);\n            }\n\n            if (currentIndex != -1) {\n                this.setAt(item, index);\n            } else {\n                if (item.ref) {\n                    this._refs[item.ref] = item;\n                }\n                this._items.splice(index, 0, item);\n                this.onAdd(item, index);\n            }\n        } else {\n            throw new Error('addAt: The index ' + index + ' is out of bounds ' + this._items.length);\n        }\n    }\n\n    replaceByRef(item) {\n        if (item.ref) {\n            const existingItem = this.getByRef(item.ref);\n            if (!existingItem) {\n                throw new Error('replaceByRef: no item found with reference: ' + item.ref);\n            }\n            this.replace(item, existingItem);\n        } else {\n            throw new Error('replaceByRef: no ref specified in item');\n        }\n        this.addAt(item, this._items.length);\n\n    }\n\n    replace(item, prevItem) {\n        const index = this.getIndex(prevItem);\n        if (index === -1) {\n            throw new Error('replace: The previous item does not exist');\n        }\n        this.setAt(item, index);\n    }\n\n    setAt(item, index) {\n        if (index >= 0 && index <= this._items.length) {\n\n            if (Utils.isObjectLiteral(item)) {\n                const o = item;\n                item = this.createItem(o);\n                item.patch(o);\n            }\n\n            let currentIndex = this._items.indexOf(item);\n            if (currentIndex != -1) {\n                if (currentIndex !== index) {\n                    const fromIndex = currentIndex;\n                    if (fromIndex !== index) {\n                        this._items.splice(fromIndex, 1);\n                        this._items.splice(index, 0, item);\n                        this.onMove(item, fromIndex, index);\n                    }\n                }\n            } else {\n                if( index < this._items.length){\n\n                    if (this._items[index].ref) {\n                        this._refs[this._items[index].ref] = undefined;\n                    }\n\n                    const prevItem = this._items[index];\n\n                    // Doesn't exist yet: overwrite current.\n                    this._items[index] = item;\n\n                    if (item.ref) {\n                        this._refs[item.ref] = item;\n                    }\n\n                    this.onSet(item, index, prevItem);\n                } else {\n                    throw new Error('setAt: The index ' + index + ' is out of bounds ' + this._items.length);\n                }\n            }\n        } else {\n            throw new Error('setAt: The index ' + index + ' is out of bounds ' + this._items.length);\n        }\n    }\n\n    getAt(index) {\n        return this._items[index];\n    }\n\n    getIndex(item) {\n        return this._items.indexOf(item);\n    }\n\n    remove(item) {\n        let index = this._items.indexOf(item);\n\n        if (index !== -1) {\n            this.removeAt(index);\n        }\n    };\n\n    removeAt(index) {\n        if (index >= 0 && index < this._items.length) {\n            const item = this._items[index];\n\n            if (item.ref) {\n                this._refs[item.ref] = undefined;\n            }\n\n            this._items.splice(index, 1);\n\n            this.onRemove(item, index);\n\n            return item;\n        } else {\n            throw new Error(`removeAt: The index ${index} is out of bounds ${this._items.length - 1}`);\n        }\n    };\n\n    clear() {\n        let n = this._items.length;\n        if (n) {\n            let prev = this._items;\n            this._items = [];\n            this._refs = {}\n            this.onSync(prev, [], []);\n        }\n    };\n\n    a(o) {\n        if (Utils.isObjectLiteral(o)) {\n            let c = this.createItem(o);\n            c.patch(o);\n            this.add(c);\n            return c;\n        } else if (Array.isArray(o)) {\n            for (let i = 0, n = o.length; i < n; i++) {\n                this.a(o[i]);\n            }\n            return null;\n        } else if (this.isItem(o)) {\n            this.add(o);\n            return o;\n        }\n    };\n\n    get length() {\n        return this._items.length;\n    }\n\n    _getRefs() {\n        return this._refs;\n    }\n\n    getByRef(ref) {\n        return this._refs[ref];\n    }\n\n    clearRef(ref) {\n        delete this._refs[ref];\n    }\n\n    setRef(ref, child) {\n        this._refs[ref] = child;\n    }\n\n    patch(settings) {\n        if (Utils.isObjectLiteral(settings)) {\n            this._setByObject(settings);\n        } else if (Array.isArray(settings)) {\n            this._setByArray(settings);\n        }\n    }\n\n    _setByObject(settings) {\n        // Overrule settings of known referenced items.\n        let refs = this._getRefs();\n        let crefs = Object.keys(settings);\n        for (let i = 0, n = crefs.length; i < n; i++) {\n            let cref = crefs[i];\n            let s = settings[cref];\n\n            let c = refs[cref];\n            if (!c) {\n                if (this.isItem(s)) {\n                    // Replace previous item;\n                    s.ref = cref;\n                    this.add(s);\n                } else {\n                    // Create new item.\n                    c = this.createItem(s);\n                    c.ref = cref;\n                    c.patch(s);\n                    this.add(c);\n                }\n            } else {\n                if (this.isItem(s)) {\n                    if (c !== s) {\n                        // Replace previous item;\n                        let idx = this.getIndex(c);\n                        s.ref = cref;\n                        this.setAt(s, idx);\n                    }\n                } else {\n                    c.patch(s);\n                }\n            }\n        }\n    }\n\n    _equalsArray(array) {\n        let same = true;\n        if (array.length === this._items.length) {\n            for (let i = 0, n = this._items.length; (i < n) && same; i++) {\n                same = same && (this._items[i] === array[i]);\n            }\n        } else {\n            same = false;\n        }\n        return same;\n    }\n\n    _setByArray(array) {\n        // For performance reasons, first check if the arrays match exactly and bail out if they do.\n        if (this._equalsArray(array)) {\n            return;\n        }\n\n        for (let i = 0, n = this._items.length; i < n; i++) {\n            this._items[i].marker = true;\n        }\n\n        let refs;\n        let newItems = [];\n        for (let i = 0, n = array.length; i < n; i++) {\n            let s = array[i];\n            if (this.isItem(s)) {\n                s.marker = false;\n                newItems.push(s);\n            } else {\n                let cref = s.ref;\n                let c;\n                if (cref) {\n                    if (!refs) refs = this._getRefs();\n                    c = refs[cref];\n                }\n\n                if (!c) {\n                    // Create new item.\n                    c = this.createItem(s);\n                } else {\n                    c.marker = false;\n                }\n\n                if (Utils.isObjectLiteral(s)) {\n                    c.patch(s);\n                }\n\n                newItems.push(c);\n            }\n        }\n\n        this._setItems(newItems);\n    }\n\n    _setItems(newItems) {\n        let prevItems = this._items;\n        this._items = newItems;\n\n        // Remove the items.\n        let removed = prevItems.filter(item => {let m = item.marker; delete item.marker; return m});\n        let added = newItems.filter(item => (prevItems.indexOf(item) === -1));\n\n        if (removed.length || added.length) {\n            // Recalculate refs.\n            this._refs = {}\n            for (let i = 0, n = this._items.length; i < n; i++) {\n                let ref = this._items[i].ref;\n                if (ref) {\n                    this._refs[ref] = this._items[i];\n                }\n            }\n        }\n\n        this.onSync(removed, added, newItems);\n    }\n\n    sort(f) {\n        const items = this._items.slice();\n        items.sort(f);\n        this._setByArray(items);\n    }\n\n    onAdd(item, index) {\n    }\n\n    onRemove(item, index) {\n    }\n\n    onSync(removed, added, order) {\n    }\n\n    onSet(item, index, prevItem) {\n    }\n\n    onMove(item, fromIndex, toIndex) {\n    }\n\n    createItem(object) {\n        throw new Error(\"ObjectList.createItem must create and return a new object\");\n    }\n\n    isItem(object) {\n        return false;\n    }\n\n    forEach(f) {\n        this.get().forEach(f);\n    }\n\n}\n\nimport Utils from \"./Utils.mjs\";\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages the list of children for an element.\n */\n\nimport ObjectList from \"./ObjectList.mjs\";\n\nexport default class ElementChildList extends ObjectList {\n\n    constructor(element) {\n        super();\n        this._element = element;\n    }\n\n    _connectParent(item) {\n        const prevParent = item.parent;\n        if (prevParent && prevParent !== this._element) {\n            // Cleanup in previous child list, without\n            const prevChildList = item.parent.childList;\n            const index = prevChildList.getIndex(item);\n\n            if (item.ref) {\n                prevChildList._refs[item.ref] = undefined;\n            }\n            prevChildList._items.splice(index, 1);\n\n            // Also clean up element core.\n            prevParent.core.removeChildAt(index);\n\n        }\n\n        item._setParent(this._element);\n\n        // We are expecting the caller to sync it to the core.\n    }\n\n    onAdd(item, index) {\n        this._connectParent(item);\n        this._element.core.addChildAt(index, item.core);\n    }\n\n    onRemove(item, index) {\n        item._setParent(null);\n        this._element.core.removeChildAt(index);\n    }\n\n    onSync(removed, added, order) {\n        for (let i = 0, n = removed.length; i < n; i++) {\n            removed[i]._setParent(null);\n        }\n        for (let i = 0, n = added.length; i < n; i++) {\n            this._connectParent(added[i]);\n        }\n        let gc = i => i.core;\n        this._element.core.syncChildren(removed.map(gc), added.map(gc), order.map(gc));\n    }\n\n    onSet(item, index, prevItem) {\n        prevItem._setParent(null);\n\n        this._connectParent(item);\n        this._element.core.setChildAt(index, item.core);\n    }\n\n    onMove(item, fromIndex, toIndex) {\n        this._element.core.moveChild(fromIndex, toIndex);\n    }\n\n    createItem(object) {\n        if (object.type) {\n            return new object.type(this._element.stage);\n        } else {\n            return this._element.stage.createElement();\n        }\n    }\n\n    isItem(object) {\n        return object.isElement;\n    }\n\n}\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Render tree node.\n */\n\nimport StageUtils from \"./StageUtils.mjs\";\nimport ElementCore from \"./core/ElementCore.mjs\";\nimport Base from \"./Base.mjs\";\n\nimport Utils from \"./Utils.mjs\";\nimport EventEmitter from \"../EventEmitter.mjs\";\nimport Shader from \"./Shader.mjs\";\n\nexport default class Element {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.__id = Element.id++;\n\n        this.__start();\n\n        // EventEmitter constructor.\n        this._hasEventListeners = false;\n\n        this.__core = new ElementCore(this);\n\n        /**\n         * A reference that can be used while merging trees.\n         * @type {string}\n         */\n        this.__ref = null;\n\n        /**\n         * An element is attached if it is a descendant of the stage root.\n         * @type {boolean}\n         */\n        this.__attached = false;\n\n        /**\n         * An element is enabled when it is attached and it is visible (worldAlpha > 0).\n         * @type {boolean}\n         */\n        this.__enabled = false;\n\n        /**\n         * An element is active when it is enabled and it is within bounds.\n         * @type {boolean}\n         */\n        this.__active = false;\n\n        /**\n         * @type {Element}\n         */\n        this.__parent = null;\n\n        /**\n         * The texture that is currently set.\n         * @type {Texture}\n         */\n        this.__texture = null;\n\n        /**\n         * The currently displayed texture. While this.texture is loading, this one may be different.\n         * @type {Texture}\n         */\n        this.__displayedTexture = null;\n\n        /**\n         * Tags that can be used to identify/search for a specific element.\n         * @type {String[]}\n         */\n        this.__tags = null;\n\n        /**\n         * The tree's tags mapping.\n         * This contains all elements for all known tags, at all times.\n         * @type {Map}\n         */\n        this.__treeTags = null;\n\n        /**\n         * Creates a tag context: tagged elements in this branch will not be reachable from ancestors of this elements.\n         * @type {boolean}\n         */\n        this.__tagRoot = false;\n\n        /**\n         * (Lazy-initialised) list of children owned by this elements.\n         * @type {ElementChildList}\n         */\n        this.__childList = null;\n\n        this._w = 0;\n\n        this._h = 0;\n    }\n\n    __start() {\n    }\n\n    get id() {\n        return this.__id;\n    }\n\n    set ref(ref) {\n        if (this.__ref !== ref) {\n            const charcode = ref.charCodeAt(0);\n            if (!Utils.isUcChar(charcode)) {\n                this._throwError(\"Ref must start with an upper case character: \" + ref);\n            }\n            if (this.__ref !== null) {\n                this.removeTag(this.__ref);\n                if (this.__parent) {\n                    this.__parent.__childList.clearRef(this.__ref);\n                }\n            }\n\n            this.__ref = ref;\n\n            if (this.__ref) {\n                this._addTag(this.__ref);\n                if (this.__parent) {\n                    this.__parent.__childList.setRef(this.__ref, this);\n                }\n            }\n        }\n    }\n\n    get ref() {\n        return this.__ref;\n    }\n\n    get core() {\n        return this.__core;\n    }\n\n    setAsRoot() {\n        this.__core.setAsRoot();\n        this._updateAttachedFlag();\n        this._updateEnabledFlag();\n    }\n\n    get isRoot() {\n        return this.__core.isRoot;\n    }\n\n    _setParent(parent) {\n        if (this.__parent === parent) return;\n\n        if (this.__parent) {\n            this._unsetTagsParent();\n        }\n\n        this.__parent = parent;\n\n        if (parent) {\n            this._setTagsParent();\n        }\n\n        this._updateAttachedFlag();\n        this._updateEnabledFlag();\n        this._updateCollision();\n\n        if (this.isRoot && parent) {\n            this._throwError(\"Root should not be added as a child! Results are unspecified!\");\n        }\n    };\n\n    getDepth() {\n        let depth = 0;\n\n        let p = this.__parent;\n        while(p) {\n            depth++;\n            p = p.__parent;\n        }\n\n        return depth;\n    };\n\n    getAncestor(l) {\n        let p = this;\n        while (l > 0 && p.__parent) {\n            p = p.__parent;\n            l--;\n        }\n        return p;\n    };\n\n    getAncestors() {\n        const a = [];\n        let p = this;\n        while (p) {\n            a.push(p);\n            p = p.__parent;\n        }\n        return a;\n    }\n\n    getAncestorAtDepth(depth) {\n        let levels = this.getDepth() - depth;\n        if (levels < 0) {\n            return null;\n        }\n        return this.getAncestor(levels);\n    };\n\n    isAncestorOf(c) {\n        let p = c;\n        while(p = p.parent) {\n            if (this === p) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    getSharedAncestor(c) {\n        let o1 = this;\n        let o2 = c;\n        let l1 = o1.getDepth();\n        let l2 = o2.getDepth();\n        if (l1 > l2) {\n            o1 = o1.getAncestor(l1 - l2);\n        } else if (l2 > l1) {\n            o2 = o2.getAncestor(l2 - l1);\n        }\n\n        do {\n            if (o1 === o2) {\n                return o1;\n            }\n\n            o1 = o1.__parent;\n            o2 = o2.__parent;\n        } while (o1 && o2);\n\n        return null;\n    };\n\n    get attached() {\n        return this.__attached;\n    }\n\n    get enabled() {\n        return this.__enabled;\n    }\n\n    get active() {\n        return this.__active;\n    }\n\n    _isAttached() {\n        return (this.__parent ? this.__parent.__attached : (this.stage.root === this));\n    };\n\n    _isEnabled() {\n        return this.__core.visible && (this.__core.alpha > 0) && (this.__parent ? this.__parent.__enabled : (this.stage.root === this));\n    };\n\n    _isActive() {\n        return this._isEnabled() && this.withinBoundsMargin;\n    };\n\n    /**\n     * Updates the 'attached' flag for this branch.\n     */\n    _updateAttachedFlag() {\n        let newAttached = this._isAttached();\n        if (this.__attached !== newAttached) {\n            this.__attached = newAttached;\n\n            if (newAttached) {\n                this._onSetup();\n            }\n\n            let children = this._children.get();\n            if (children) {\n                let m = children.length;\n                if (m > 0) {\n                    for (let i = 0; i < m; i++) {\n                        children[i]._updateAttachedFlag();\n                    }\n                }\n            }\n\n            if (newAttached) {\n                this._onAttach();\n            } else {\n                this._onDetach();\n            }\n        }\n    };\n\n    /**\n     * Updates the 'enabled' flag for this branch.\n     */\n    _updateEnabledFlag() {\n        let newEnabled = this._isEnabled();\n        if (this.__enabled !== newEnabled) {\n            if (newEnabled) {\n                this._onEnabled();\n                this._setEnabledFlag();\n            } else {\n                this._onDisabled();\n                this._unsetEnabledFlag();\n            }\n\n            let children = this._children.get();\n            if (children) {\n                let m = children.length;\n                if (m > 0) {\n                    for (let i = 0; i < m; i++) {\n                        children[i]._updateEnabledFlag();\n                    }\n                }\n            }\n        }\n    };\n\n    _setEnabledFlag() {\n        this.__enabled = true;\n\n        // Force re-check of texture because dimensions might have changed (cutting).\n        this._updateDimensions();\n        this._updateTextureCoords();\n\n        if (this.__texture) {\n            this.__texture.addElement(this);\n        }\n\n        if (this.withinBoundsMargin) {\n            this._setActiveFlag();\n        }\n\n        if (this.__core.shader) {\n            this.__core.shader.addElement(this.__core);\n        }\n\n    }\n\n    _unsetEnabledFlag() {\n        if (this.__active) {\n            this._unsetActiveFlag();\n        }\n\n        if (this.__texture) {\n            this.__texture.removeElement(this);\n        }\n\n        if (this.__core.shader) {\n            this.__core.shader.removeElement(this.__core);\n        }\n\n        if (this._texturizer) {\n            this.texturizer.filters.forEach(filter => filter.removeElement(this.__core));\n        }\n\n        this.__enabled = false;\n    }\n\n    _setActiveFlag() {\n        this.__active = true;\n\n        // This must happen before enabling the texture, because it may already be loaded or load directly.\n        if (this.__texture) {\n            this.__texture.incActiveCount();\n        }\n\n        if (this.__texture) {\n            this._enableTexture();\n        }\n        this._onActive();\n    }\n\n    _unsetActiveFlag() {\n        if (this.__texture) {\n            this.__texture.decActiveCount();\n        }\n\n        this.__active = false;\n        if (this.__texture) {\n            this._disableTexture();\n        }\n\n        if (this._hasTexturizer()) {\n            this.texturizer.deactivate();\n        }\n\n        this._onInactive();\n    }\n\n    _onSetup() {\n    }\n\n    _onAttach() {\n    }\n\n    _onDetach() {\n    }\n\n    _onEnabled() {\n    }\n\n    _onDisabled() {\n    }\n\n    _onActive() {\n    }\n\n    _onInactive() {\n    }\n\n    _onResize() {\n    }\n\n    _getRenderWidth() {\n        if (this._w) {\n            return this._w;\n        } else if (this.__displayedTexture) {\n            return this.__displayedTexture.getRenderWidth();\n        } else if (this.__texture) {\n            // Texture already loaded, but not yet updated (probably because this element is not active).\n            return this.__texture.getRenderWidth();\n        } else {\n            return 0;\n        }\n    };\n\n    _getRenderHeight() {\n        if (this._h) {\n            return this._h;\n        } else if (this.__displayedTexture) {\n            return this.__displayedTexture.getRenderHeight();\n        } else if (this.__texture) {\n            // Texture already loaded, but not yet updated (probably because this element is not active).\n            return this.__texture.getRenderHeight();\n        } else {\n            return 0;\n        }\n    };\n\n    get renderWidth() {\n        if (this.__enabled) {\n            // Render width is only maintained if this element is enabled.\n            return this.__core.getRenderWidth();\n        } else {\n            return this._getRenderWidth();\n        }\n    }\n\n    get renderHeight() {\n        if (this.__enabled) {\n            return this.__core.getRenderHeight();\n        } else {\n            return this._getRenderHeight();\n        }\n    }\n\n    get finalX() {\n        return this.__core.x;\n    }\n\n    get finalY() {\n        return this.__core.y;\n    }\n\n    get finalW() {\n        return this.__core.w;\n    }\n\n    get finalH() {\n        return this.__core.h;\n    }\n\n    textureIsLoaded() {\n        return this.__texture && this.__texture.isLoaded();\n    }\n\n    loadTexture() {\n        if (this.__texture) {\n            this.__texture.load();\n\n            if (!this.__texture.isUsed() || !this._isEnabled()) {\n                // Loading the texture will have no effect on the dimensions of this element.\n                // Manually update them, so that calcs can be performed immediately in userland.\n                this._updateDimensions();\n            }\n        }\n    }\n\n    _enableTextureError() {\n        // txError event should automatically be re-triggered when a element becomes active.\n        const loadError = this.__texture.loadError;\n        if (loadError) {\n            this.emit('txError', loadError, this.__texture._source);\n        }\n    }\n\n    _enableTexture() {\n        if (this.__texture.isLoaded()) {\n            this._setDisplayedTexture(this.__texture);\n        } else {\n            // We don't want to retain the old 'ghost' image as it wasn't visible anyway.\n            this._setDisplayedTexture(null);\n\n            this._enableTextureError();\n        }\n    }\n\n    _disableTexture() {\n        // We disable the displayed texture because, when the texture changes while invisible, we should use that w, h,\n        // mw, mh for checking within bounds.\n        this._setDisplayedTexture(null);\n    }\n\n    get texture() {\n        return this.__texture;\n    }\n\n    set texture(v) {\n        let texture;\n        if (Utils.isObjectLiteral(v)) {\n            if (v.type) {\n                texture = new v.type(this.stage);\n            } else {\n                texture = this.texture;\n            }\n\n            if (texture) {\n                Base.patchObject(texture, v);\n            }\n        } else if (!v) {\n            texture = null;\n        } else {\n            if (v.isTexture) {\n                texture = v;\n            } else if (v.isTextureSource) {\n                texture = new SourceTexture(this.stage);\n                texture.textureSource = v;\n            } else {\n                console.error(\"[Lightning] Please specify a texture type.\");\n                return;\n            }\n        }\n\n        const prevTexture = this.__texture;\n        if (texture !== prevTexture) {\n            this.__texture = texture;\n\n            if (this.__texture) {\n                if (this.__enabled) {\n                    this.__texture.addElement(this);\n\n                    if (this.withinBoundsMargin) {\n                        if (this.__texture.isLoaded()) {\n                            this._setDisplayedTexture(this.__texture);\n                        } else {\n                            this._enableTextureError();\n                        }\n                    }\n                }\n            } else {\n                // Make sure that current texture is cleared when the texture is explicitly set to null.\n                this._setDisplayedTexture(null);\n            }\n\n            if (prevTexture && prevTexture !== this.__displayedTexture) {\n                prevTexture.removeElement(this);\n            }\n\n            this._updateDimensions();\n        }\n    }\n\n    get displayedTexture() {\n        return this.__displayedTexture;\n    }\n\n    _setDisplayedTexture(v) {\n        let prevTexture = this.__displayedTexture;\n\n        if (prevTexture && (v !== prevTexture)) {\n            if (this.__texture !== prevTexture) {\n                // The old displayed texture is deprecated.\n                prevTexture.removeElement(this);\n            }\n        }\n\n        const prevSource = this.__core.displayedTextureSource;\n        const sourceChanged = (v ? v._source : null) !== prevSource;\n\n        this.__displayedTexture = v;\n        this._updateDimensions();\n\n        if (this.__displayedTexture) {\n            if (sourceChanged) {\n                // We don't need to reference the displayed texture because it was already referenced (this.texture === this.displayedTexture).\n                this._updateTextureCoords();\n                this.__core.setDisplayedTextureSource(this.__displayedTexture._source);\n            }\n        } else {\n            this.__core.setDisplayedTextureSource(null);\n        }\n\n        if (sourceChanged) {\n            if (this.__displayedTexture) {\n                this.stage.removeUpdateSourceTexture(this.__displayedTexture)\n                this.emit('txLoaded', this.__displayedTexture);\n            } else {\n                this.emit('txUnloaded', this.__displayedTexture);\n            }\n        }\n    }\n\n    onTextureSourceLoaded() {\n        // This function is called when element is enabled, but we only want to set displayed texture for active elements.\n        if (this.active) {\n            // We may be dealing with a texture reloading, so we must force update.\n            this._setDisplayedTexture(this.__texture);\n        }\n    };\n\n    onTextureSourceLoadError(e) {\n        this.emit('txError', e, this.__texture._source);\n    };\n\n    forceRenderUpdate() {\n        this.__core.setHasRenderUpdates(3);\n    }\n\n    onDisplayedTextureClippingChanged() {\n        this._updateDimensions();\n        this._updateTextureCoords();\n    };\n\n    onPrecisionChanged() {\n        this._updateDimensions();\n    };\n\n    onDimensionsChanged(w, h) {\n        if (this.texture instanceof TextTexture) {\n            this.texture.w = w;\n            this.texture.h = h;\n            this.w = w;\n            this.h = h;\n        }\n    }\n\n    _updateDimensions() {\n        let w = this._getRenderWidth();\n        let h = this._getRenderHeight();\n\n        let unknownSize = false;\n        if (!w || !h) {\n            if (!this.__displayedTexture && this.__texture) {\n                // We use a 'max width' replacement instead in the ElementCore calcs.\n                // This makes sure that it is able to determine withinBounds.\n                w = w || this.__texture.mw;\n                h = h || this.__texture.mh;\n\n                if ((!w || !h) && this.__texture.isAutosizeTexture()) {\n                    unknownSize = true;\n                }\n            }\n        }\n\n        if (this.__core.setDimensions(w, h, unknownSize)) {\n            this._onResize();\n        }\n    }\n\n    _updateTextureCoords() {\n        if (this.displayedTexture && this.displayedTexture._source) {\n            let displayedTexture = this.displayedTexture;\n            let displayedTextureSource = this.displayedTexture._source;\n\n            let tx1 = 0, ty1 = 0, tx2 = 1.0, ty2 = 1.0;\n            if (displayedTexture.clipping) {\n                // Apply texture clipping.\n                let w = displayedTextureSource.getRenderWidth();\n                let h = displayedTextureSource.getRenderHeight();\n                let iw, ih, rw, rh;\n                iw = 1 / w;\n                ih = 1 / h;\n\n                if (displayedTexture.pw) {\n                    rw = (displayedTexture.pw) * iw;\n                } else {\n                    rw = (w - displayedTexture.px) * iw;\n                }\n\n                if (displayedTexture.ph) {\n                    rh = displayedTexture.ph * ih;\n                } else {\n                    rh = (h - displayedTexture.py) * ih;\n                }\n\n                iw *= (displayedTexture.px);\n                ih *= (displayedTexture.py);\n\n                tx1 = iw;\n                ty1 = ih;\n                tx2 = tx2 * rw + iw;\n                ty2 = ty2 * rh + ih;\n\n                tx1 = Math.max(0, tx1);\n                ty1 = Math.max(0, ty1);\n                tx2 = Math.min(1, tx2);\n                ty2 = Math.min(1, ty2);\n            }\n\n            if (displayedTextureSource._flipTextureY) {\n                let tempty = ty2;\n                ty2 = ty1;\n                ty1 = tempty;\n            }\n            this.__core.setTextureCoords(tx1, ty1, tx2, ty2);\n        }\n    }\n\n    getCornerPoints() {\n        return this.__core.getCornerPoints();\n    }\n\n    _unsetTagsParent() {\n        if (this.__tags) {\n            this.__tags.forEach((tag) => {\n                // Remove from treeTags.\n                let p = this;\n                while (p = p.__parent) {\n                    let parentTreeTags = p.__treeTags.get(tag);\n                    parentTreeTags.delete(this);\n\n                    if (p.__tagRoot) {\n                        break;\n                    }\n                }\n            });\n        }\n\n        let tags = null;\n        let n = 0;\n        if (this.__treeTags) {\n            if (!this.__tagRoot) {\n                tags = Utils.iteratorToArray(this.__treeTags.keys());\n                n = tags.length;\n\n                if (n > 0) {\n                    for (let i = 0; i < n; i++) {\n                        let tagSet = this.__treeTags.get(tags[i]);\n\n                        // Remove from treeTags.\n                        let p = this;\n                        while ((p = p.__parent)) {\n                            let parentTreeTags = p.__treeTags.get(tags[i]);\n\n                            tagSet.forEach(function (comp) {\n                                parentTreeTags.delete(comp);\n                            });\n\n                            if (p.__tagRoot) {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    _setTagsParent() {\n        // Just copy over the 'local' tags.\n        if (this.__tags) {\n            this.__tags.forEach((tag) => {\n                let p = this;\n                while (p = p.__parent) {\n                    if (!p.__treeTags) {\n                        p.__treeTags = new Map();\n                    }\n\n                    let s = p.__treeTags.get(tag);\n                    if (!s) {\n                        s = new Set();\n                        p.__treeTags.set(tag, s);\n                    }\n\n                    s.add(this);\n\n                    if (p.__tagRoot) {\n                        break;\n                    }\n                }\n            });\n        }\n\n        if (this.__treeTags && this.__treeTags.size) {\n            if (!this.__tagRoot) {\n                this.__treeTags.forEach((tagSet, tag) => {\n                    let p = this;\n                    while (!p.__tagRoot && (p = p.__parent)) {\n                        if (p.__tagRoot) {\n                            // Do not copy all subs.\n                        }\n                        if (!p.__treeTags) {\n                            p.__treeTags = new Map();\n                        }\n\n                        let s = p.__treeTags.get(tag);\n                        if (!s) {\n                            s = new Set();\n                            p.__treeTags.set(tag, s);\n                        }\n\n                        tagSet.forEach(function (comp) {\n                            s.add(comp);\n                        });\n                    }\n                });\n            }\n        }\n    };\n\n\n    _getByTag(tag) {\n        if (!this.__treeTags) {\n            return [];\n        }\n        let t = this.__treeTags.get(tag);\n        return t ? Utils.setToArray(t) : [];\n    };\n\n    getTags() {\n        return this.__tags ? this.__tags : [];\n    };\n\n    setTags(tags) {\n        tags = tags.reduce((acc, tag) => {\n            return acc.concat(tag.split(' '));\n        }, []);\n\n        if (this.__ref) {\n            tags.push(this.__ref);\n        }\n\n        let i, n = tags.length;\n        let removes = [];\n        let adds = [];\n        for (i = 0; i < n; i++) {\n            if (!this.hasTag(tags[i])) {\n                adds.push(tags[i]);\n            }\n        }\n\n        let currentTags = this.tags || [];\n        n = currentTags.length;\n        for (i = 0; i < n; i++) {\n            if (tags.indexOf(currentTags[i]) == -1) {\n                removes.push(currentTags[i]);\n            }\n        }\n\n        for (i = 0; i < removes.length; i++) {\n            this.removeTag(removes[i]);\n        }\n\n        for (i = 0; i < adds.length; i++) {\n            this.addTag(adds[i]);\n        }\n    }\n\n    addTag(tag) {\n        if (tag.indexOf(' ') === -1) {\n            if (Utils.isUcChar(tag.charCodeAt(0))) {\n                this._throwError(\"Tag may not start with an upper case character.\");\n            }\n\n            this._addTag(tag);\n        } else {\n            const tags = tag.split(' ');\n            for (let i = 0, m = tags.length; i < m; i++) {\n                const tag = tags[i];\n\n                if (Utils.isUcChar(tag.charCodeAt(0))) {\n                    this._throwError(\"Tag may not start with an upper case character.\");\n                }\n\n                this._addTag(tag);\n            }\n        }\n    }\n\n    _addTag(tag) {\n        if (!this.__tags) {\n            this.__tags = [];\n        }\n        if (this.__tags.indexOf(tag) === -1) {\n            this.__tags.push(tag);\n\n            // Add to treeTags hierarchy.\n            let p = this.__parent;\n            if (p) {\n                do {\n                    if (!p.__treeTags) {\n                        p.__treeTags = new Map();\n                    }\n\n                    let s = p.__treeTags.get(tag);\n                    if (!s) {\n                        s = new Set();\n                        p.__treeTags.set(tag, s);\n                    }\n\n                    s.add(this);\n\n                } while (!p.__tagRoot && (p = p.__parent));\n            }\n        }\n    }\n\n    removeTag(tag) {\n        let i = this.__tags.indexOf(tag);\n        if (i !== -1) {\n            this.__tags.splice(i, 1);\n\n            // Remove from treeTags hierarchy.\n            let p = this.__parent;\n            if (p) {\n                do {\n                    let list = p.__treeTags.get(tag);\n                    if (list) {\n                        list.delete(this);\n                    }\n                } while (!p.__tagRoot && (p = p.__parent));\n            }\n        }\n    }\n\n    hasTag(tag) {\n        return (this.__tags && (this.__tags.indexOf(tag) !== -1));\n    }\n\n    /**\n     * Returns one of the elements from the subtree that have this tag.\n     * @param {string} tag\n     * @returns {Element}\n     */\n    _tag(tag) {\n        if (tag.indexOf(\".\") !== -1) {\n            return this.mtag(tag)[0];\n        } else {\n            if (this.__treeTags) {\n                let t = this.__treeTags.get(tag);\n                if (t) {\n                    const item = t.values().next();\n                    return item ? item.value : undefined;\n                }\n            }\n        }\n    };\n\n    get tag() {\n        return this._tag;\n    }\n\n    set tag(t) {\n        this.tags = t;\n    }\n\n    /**\n     * Returns all elements from the subtree that have this tag.\n     * @param {string} tag\n     * @returns {Element[]}\n     */\n    mtag(tag) {\n        let idx = tag.indexOf(\".\");\n        if (idx >= 0) {\n            let parts = tag.split('.');\n            let res = this._getByTag(parts[0]);\n            let level = 1;\n            let c = parts.length;\n            while (res.length && level < c) {\n                let resn = [];\n                for (let j = 0, n = res.length; j < n; j++) {\n                    resn = resn.concat(res[j]._getByTag(parts[level]));\n                }\n\n                res = resn;\n                level++;\n            }\n            return res;\n        } else {\n            return this._getByTag(tag);\n        }\n    };\n\n    stag(tag, settings) {\n        let t = this.mtag(tag);\n        let n = t.length;\n        for (let i = 0; i < n; i++) {\n            Base.patchObject(t[i], settings);\n        }\n    }\n\n    get tagRoot() {\n        return this.__tagRoot;\n    }\n\n    set tagRoot(v) {\n        if (this.__tagRoot !== v) {\n            if (!v) {\n                this._setTagsParent();\n            } else {\n                this._unsetTagsParent();\n            }\n\n            this.__tagRoot = v;\n        }\n    }\n\n    sel(path) {\n        const results = this.select(path);\n        if (results.length) {\n            return results[0];\n        } else {\n            return undefined;\n        }\n    }\n\n    select(path) {\n        if (path.indexOf(\",\") !== -1) {\n            let selectors = path.split(',');\n            let res = [];\n            for (let i = 0; i < selectors.length; i++) {\n                res = res.concat(this._select(selectors[i]));\n            }\n            return res;\n        } else {\n            return this._select(path);\n        }\n    }\n\n    _select(path) {\n        if (path === \"\") return [this];\n\n\n        let pointIdx = path.indexOf(\".\");\n        let arrowIdx = path.indexOf(\">\");\n        if (pointIdx === -1 && arrowIdx === -1) {\n            // Quick case.\n            return this.mtag(path);\n        }\n\n        // Detect by first char.\n        let isRef;\n        if (arrowIdx === 0) {\n            isRef = true;\n            path = path.substr(1);\n        } else if (pointIdx === 0) {\n            isRef = false;\n            path = path.substr(1);\n        } else {\n            isRef = false;\n        }\n\n        return this._selectChilds(path, isRef);\n    }\n\n    _selectChilds(path, isRef) {\n        const pointIdx = path.indexOf(\".\");\n        const arrowIdx = path.indexOf(\">\");\n\n        if (pointIdx === -1 && arrowIdx === -1) {\n            if (isRef) {\n                const ref = this.getByRef(path);\n                return ref ? [ref] : [];\n            } else {\n                return this.mtag(path);\n            }\n        }\n\n        if ((arrowIdx === -1) || (pointIdx !== -1 && pointIdx < arrowIdx)) {\n            let next;\n            const str = path.substr(0, pointIdx);\n            if (isRef) {\n                const ref = this.getByRef(str);\n                next = ref ? [ref] : [];\n            } else {\n                next = this.mtag(str);\n            }\n            let total = [];\n            const subPath = path.substr(pointIdx + 1);\n            for (let i = 0, n = next.length; i < n; i++) {\n                total = total.concat(next[i]._selectChilds(subPath, false));\n            }\n            return total;\n        } else {\n            let next;\n            const str = path.substr(0, arrowIdx);\n            if (isRef) {\n                const ref = this.getByRef(str);\n                next = ref ? [ref] : [];\n            } else {\n                next = this.mtag(str);\n            }\n            let total = [];\n            const subPath = path.substr(arrowIdx + 1);\n            for (let i = 0, n = next.length; i < n; i++) {\n                total = total.concat(next[i]._selectChilds(subPath, true));\n            }\n            return total;\n        }\n    }\n\n    getByRef(ref) {\n        return this.childList.getByRef(ref);\n    }\n\n    getLocationString() {\n        let i;\n        i = this.__parent ? this.__parent._children.getIndex(this) : \"R\";\n        let localTags = this.getTags();\n        let str = this.__parent ? this.__parent.getLocationString(): \"\";\n        if (this.ref) {\n            str += \":[\" + i + \"]\" + this.ref;\n        } else if (localTags.length) {\n            str += \":[\" + i + \"]\" + localTags.join(\",\");\n        } else {\n            str += \":[\" + i + \"]#\" + this.id;\n        }\n        return str;\n    }\n\n    toString() {\n        let obj = this.getSettings();\n        return Element.getPrettyString(obj, \"\");\n    };\n\n    static getPrettyString(obj, indent) {\n        let children = obj.children;\n        delete obj.children;\n\n\n        // Convert singular json settings object.\n        let colorKeys = [\"color\", \"colorUl\", \"colorUr\", \"colorBl\", \"colorBr\"];\n        let str = JSON.stringify(obj, function (k, v) {\n            if (colorKeys.indexOf(k) !== -1) {\n                return \"COLOR[\" + v.toString(16) + \"]\";\n            }\n            return v;\n        });\n        str = str.replace(/\"COLOR\\[([a-f0-9]{1,8})\\]\"/g, \"0x$1\");\n\n        if (children) {\n            let childStr = \"\";\n            if (Utils.isObjectLiteral(children)) {\n                let refs = Object.keys(children);\n                childStr = \"\";\n                for (let i = 0, n = refs.length; i < n; i++) {\n                    childStr += `\\n${indent}  \"${refs[i]}\":`\n                    delete children[refs[i]].ref;\n                    childStr += Element.getPrettyString(children[refs[i]], indent + \"  \") + (i < n - 1 ? \",\" : \"\");\n                }\n                let isEmpty = (str === \"{}\");\n                str = str.substr(0, str.length - 1) + (isEmpty ? \"\" : \",\") + childStr + \"\\n\" + indent + \"}\";\n            } else {\n                let n = children.length;\n                childStr = \"[\";\n                for (let i = 0; i < n; i++) {\n                    childStr += Element.getPrettyString(children[i], indent + \"  \") + (i < n - 1 ? \",\" : \"\") + \"\\n\";\n                }\n                childStr += indent + \"]}\";\n                let isEmpty = (str === \"{}\");\n                str = str.substr(0, str.length - 1) + (isEmpty ? \"\" : \",\") + \"\\\"children\\\":\\n\" + indent + childStr + \"}\";\n            }\n\n        }\n\n        return str;\n    }\n\n    getSettings() {\n        let settings = this.getNonDefaults();\n\n        let children = this._children.get();\n        if (children) {\n            let n = children.length;\n            if (n) {\n                const childArray = [];\n                let missing = false;\n                for (let i = 0; i < n; i++) {\n                    childArray.push(children[i].getSettings());\n                    missing = missing || !children[i].ref;\n                }\n\n                if (!missing) {\n                    settings.children = {}\n                    childArray.forEach(child => {\n                        settings.children[child.ref] = child;\n                    });\n                } else {\n                    settings.children = childArray;\n                }\n            }\n        }\n\n        settings.id = this.id;\n\n        return settings;\n    }\n\n    getNonDefaults() {\n        let settings = {};\n\n        if (this.constructor !== Element) {\n            settings.type = this.constructor.name;\n        }\n\n        if (this.__ref) {\n            settings.ref = this.__ref;\n        }\n\n        if (this.__tags && this.__tags.length) {\n            settings.tags = this.__tags;\n        }\n\n        if (this.x !== 0) settings.x = this.x;\n        if (this.y !== 0) settings.y = this.y;\n        if (this.w !== 0) settings.w = this.w;\n        if (this.h !== 0) settings.h = this.h;\n\n        if (this.scaleX === this.scaleY) {\n            if (this.scaleX !== 1) settings.scale = this.scaleX;\n        } else {\n            if (this.scaleX !== 1) settings.scaleX = this.scaleX;\n            if (this.scaleY !== 1) settings.scaleY = this.scaleY;\n        }\n\n        if (this.pivotX === this.pivotY) {\n            if (this.pivotX !== 0.5) settings.pivot = this.pivotX;\n        } else {\n            if (this.pivotX !== 0.5) settings.pivotX = this.pivotX;\n            if (this.pivotY !== 0.5) settings.pivotY = this.pivotY;\n        }\n\n        if (this.mountX === this.mountY) {\n            if (this.mountX !== 0) settings.mount = this.mountX;\n        } else {\n            if (this.mountX !== 0) settings.mountX = this.mountX;\n            if (this.mountY !== 0) settings.mountY = this.mountY;\n        }\n\n        if (this.alpha !== 1) settings.alpha = this.alpha;\n\n        if (!this.visible) settings.visible = false;\n\n        if (this.rotation !== 0) settings.rotation = this.rotation;\n\n        if (this.colorUl === this.colorUr && this.colorBl === this.colorBr && this.colorUl === this.colorBl) {\n            if (this.colorUl !== 0xFFFFFFFF) settings.color = this.colorUl.toString(16);\n        } else {\n            if (this.colorUl !== 0xFFFFFFFF) settings.colorUl = this.colorUl.toString(16);\n            if (this.colorUr !== 0xFFFFFFFF) settings.colorUr = this.colorUr.toString(16);\n            if (this.colorBl !== 0xFFFFFFFF) settings.colorBl = this.colorBl.toString(16);\n            if (this.colorBr !== 0xFFFFFFFF) settings.colorBr = this.colorBr.toString(16);\n        }\n\n        if (this.zIndex) settings.zIndex = this.zIndex;\n\n        if (this.forceZIndexContext) settings.forceZIndexContext = true;\n\n        if (this.clipping) settings.clipping = this.clipping;\n\n        if (!this.clipbox) settings.clipbox = this.clipbox;\n\n        if (this.__texture) {\n            let tnd = this.__texture.getNonDefaults();\n            if (Object.keys(tnd).length) {\n                settings.texture = tnd;\n            }\n        }\n\n        if (this.shader && Utils.isFunction(this.shader.getNonDefaults)) {\n            let tnd = this.shader.getNonDefaults();\n            if (Object.keys(tnd).length) {\n                settings.shader = tnd;\n            }\n        }\n\n        if (this._hasTexturizer()) {\n            if (this.texturizer.enabled) {\n                settings.renderToTexture = this.texturizer.enabled;\n            }\n            if (this.texturizer.lazy) {\n                settings.renderToTextureLazy = this.texturizer.lazy;\n            }\n            if (this.texturizer.colorize) {\n                settings.colorizeResultTexture = this.texturizer.colorize;\n            }\n            if (this.texturizer.renderOffscreen) {\n                settings.renderOffscreen = this.texturizer.renderOffscreen;\n            }\n        }\n\n        return settings;\n    };\n\n    static getGetter(propertyPath) {\n        let getter = Element.PROP_GETTERS.get(propertyPath);\n        if (!getter) {\n            getter = new Function('obj', 'return obj.' + propertyPath);\n            Element.PROP_GETTERS.set(propertyPath, getter);\n        }\n        return getter;\n    }\n\n    static getSetter(propertyPath) {\n        let setter = Element.PROP_SETTERS.get(propertyPath);\n        if (!setter) {\n            setter = new Function('obj', 'v', 'obj.' + propertyPath + ' = v');\n            Element.PROP_SETTERS.set(propertyPath, setter);\n        }\n        return setter;\n    }\n\n    get withinBoundsMargin() {\n        return this.__core._withinBoundsMargin;\n    }\n\n    _enableWithinBoundsMargin() {\n        // Iff enabled, this toggles the active flag.\n        if (this.__enabled) {\n            this._setActiveFlag();\n        }\n    }\n\n    _disableWithinBoundsMargin() {\n        // Iff active, this toggles the active flag.\n        if (this.__active) {\n            this._unsetActiveFlag();\n        }\n    }\n\n    set boundsMargin(v) {\n        if (!Array.isArray(v) && v !== null) {\n            throw new Error(\"boundsMargin should be an array of left-top-right-bottom values or null (inherit margin)\");\n        }\n        this.__core.boundsMargin = v;\n    }\n\n    get boundsMargin() {\n        return this.__core.boundsMargin;\n    }\n\n    get x() {\n        return this.__core.offsetX;\n    }\n\n    set x(v) {\n        this.__core.offsetX = v;\n    }\n\n    get y() {\n        return this.__core.offsetY;\n    }\n\n    set y(v) {\n        this.__core.offsetY = v;\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    set w(v) {\n        if (Utils.isFunction(v)) {\n            this._w = 0;\n            this.__core.funcW = v;\n        } else {\n            v = Math.max(v, 0);\n            if (this._w !== v) {\n                this.__core.disableFuncW();\n                this._w = v;\n                this._updateDimensions();\n            }\n        }\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    set h(v) {\n        if (Utils.isFunction(v)) {\n            this._h = 0;\n            this.__core.funcH = v;\n        } else {\n            v = Math.max(v, 0);\n            if (this._h !== v) {\n                this.__core.disableFuncH();\n                this._h = v;\n                this._updateDimensions();\n            }\n        }\n    }\n\n    get collision() {\n        return this._collision;\n    }\n\n    set collision(v) {\n        this._collision = v;\n    }\n\n    _updateCollision() {\n        if (this.collision && this.__parent && this.__parent.collision === undefined) {\n            /**\n             * Mark collision as 2 to indicate atleast one descendant has collision enabled.\n             * This narrows down the search for elements with active collision.\n            */\n            this.__parent.collision = 2;\n        }\n    }\n\n    get scaleX() {\n        return this.__core.scaleX;\n    }\n\n    set scaleX(v) {\n        this.__core.scaleX = v;\n    }\n\n    get scaleY() {\n        return this.__core.scaleY;\n    }\n\n    set scaleY(v) {\n        this.__core.scaleY = v;\n    }\n\n    get scale() {\n        return this.__core.scale;\n    }\n\n    set scale(v) {\n        this.__core.scale = v;\n    }\n\n    get pivotX() {\n        return this.__core.pivotX;\n    }\n\n    set pivotX(v) {\n        this.__core.pivotX = v;\n    }\n\n    get pivotY() {\n        return this.__core.pivotY;\n    }\n\n    set pivotY(v) {\n        this.__core.pivotY = v;\n    }\n\n    get pivot() {\n        return this.__core.pivot;\n    }\n\n    set pivot(v) {\n        this.__core.pivot = v;\n    }\n\n    get mountX() {\n        return this.__core.mountX;\n    }\n\n    set mountX(v) {\n        this.__core.mountX = v;\n    }\n\n    get mountY() {\n        return this.__core.mountY;\n    }\n\n    set mountY(v) {\n        this.__core.mountY = v;\n    }\n\n    get mount() {\n        return this.__core.mount;\n    }\n\n    set mount(v) {\n        this.__core.mount = v;\n    }\n\n    get rotation() {\n        return this.__core.rotation;\n    }\n\n    set rotation(v) {\n        this.__core.rotation = v;\n    }\n\n    get alpha() {\n        return this.__core.alpha;\n    }\n\n    set alpha(v) {\n        this.__core.alpha = v;\n    }\n\n    get visible() {\n        return this.__core.visible;\n    }\n\n    set visible(v) {\n        this.__core.visible = v;\n    }\n    \n    get colorUl() {\n        return this.__core.colorUl;\n    }\n\n    set colorUl(v) {\n        this.__core.colorUl = v;\n    }\n\n    get colorUr() {\n        return this.__core.colorUr;\n    }\n\n    set colorUr(v) {\n        this.__core.colorUr = v;\n    }\n\n    get colorBl() {\n        return this.__core.colorBl;\n    }\n\n    set colorBl(v) {\n        this.__core.colorBl = v;\n    }\n\n    get colorBr() {\n        return this.__core.colorBr;\n    }\n\n    set colorBr(v) {\n        this.__core.colorBr = v;\n    }\n\n    get color() {\n        return this.__core.colorUl;\n    }\n\n    set color(v) {\n        if (this.colorUl !== v || this.colorUr !== v || this.colorBl !== v || this.colorBr !== v) {\n            this.colorUl = v;\n            this.colorUr = v;\n            this.colorBl = v;\n            this.colorBr = v;\n        }\n    }\n\n    get colorTop() {\n        return this.colorUl;\n    }\n\n    set colorTop(v) {\n        if (this.colorUl !== v || this.colorUr !== v) {\n            this.colorUl = v;\n            this.colorUr = v;\n        }\n    }\n\n    get colorBottom() {\n        return this.colorBl;\n    }\n\n    set colorBottom(v) {\n        if (this.colorBl !== v || this.colorBr !== v) {\n            this.colorBl = v;\n            this.colorBr = v;\n        }\n    }\n\n    get colorLeft() {\n        return this.colorUl;\n    }\n\n    set colorLeft(v) {\n        if (this.colorUl !== v || this.colorBl !== v) {\n            this.colorUl = v;\n            this.colorBl = v;\n        }\n    }\n\n    get colorRight() {\n        return this.colorUr;\n    }\n\n    set colorRight(v) {\n        if (this.colorUr !== v || this.colorBr !== v) {\n            this.colorUr = v;\n            this.colorBr = v;\n        }\n    }\n\n    get zIndex() {return this.__core.zIndex}\n    set zIndex(v) {\n        this.__core.zIndex = v;\n    }\n\n    get forceZIndexContext() {return this.__core.forceZIndexContext}\n    set forceZIndexContext(v) {\n        this.__core.forceZIndexContext = v;\n    }\n\n    get clipping() {return this.__core.clipping}\n    set clipping(v) {\n        this.__core.clipping = v;\n    }\n\n    get clipbox() {return this.__core.clipbox}\n    set clipbox(v) {\n        this.__core.clipbox = v;\n    }\n\n    get tags() {\n        return this.getTags();\n    }\n\n    set tags(v) {\n        if (!Array.isArray(v)) v = [v];\n        this.setTags(v);\n    }\n\n    set t(v) {\n        this.tags = v;\n    }\n\n    get _children() {\n        if (!this.__childList) {\n            this.__childList = new ElementChildList(this, false);\n        }\n        return this.__childList;\n    }\n\n    get childList() {\n        if (!this._allowChildrenAccess()) {\n            this._throwError(\"Direct access to children is not allowed in \" + this.getLocationString());\n        }\n        return this._children;\n    }\n\n    hasChildren() {\n        return this._allowChildrenAccess() && this.__childList && (this.__childList.length > 0);\n    }\n\n    _allowChildrenAccess() {\n        return true;\n    }\n\n    get children() {\n        return this.childList.get();\n    }\n\n    set children(children) {\n        this.childList.patch(children);\n    }\n\n    add(o) {\n        return this.childList.a(o);\n    }\n\n    get p() {\n        return this.__parent;\n    }\n\n    get parent() {\n        return this.__parent;\n    }\n\n    get src() {\n        if (this.texture && this.texture instanceof ImageTexture) {\n            return this.texture._src;\n        } else {\n            return undefined;\n        }\n    }\n\n    set src(v) {\n        const texture = new ImageTexture(this.stage);\n        texture.src = v;\n        this.texture = texture;\n    }\n\n    set mw(v) {\n        if (this.texture) {\n            this.texture.mw = v;\n            this._updateDimensions();\n        } else {\n            this._throwError('Please set mw after setting a texture.');\n        }\n    }\n\n    set mh(v) {\n        if (this.texture) {\n            this.texture.mh = v;\n            this._updateDimensions();\n        } else {\n            this._throwError('Please set mh after setting a texture.');\n        }\n    }\n\n    get rect() {\n        return (this.texture === this.stage.rectangleTexture);\n    }\n\n    set rect(v) {\n        if (v) {\n            this.texture = this.stage.rectangleTexture;\n        } else {\n            this.texture = null;\n        }\n    }\n\n    enableTextTexture() {\n        if (!this.texture || !(this.texture instanceof TextTexture)) {\n            this.texture = new TextTexture(this.stage);\n\n            if (!this.texture.w && !this.texture.h) {\n                // Inherit dimensions from element.\n                // This allows userland to set dimensions of the Element and then later specify the text.\n                this.texture.w = this.w;\n                this.texture.h = this.h;\n            }\n        }\n        return this.texture;\n    }\n\n    get text() {\n        if (this.texture && (this.texture instanceof TextTexture)) {\n            return this.texture;\n        } else {\n            return null;\n        }\n    }\n\n    set text(v) {\n        if (!this.texture || !(this.texture instanceof TextTexture)) {\n            this.enableTextTexture();\n        }\n        if (Utils.isString(v)) {\n            this.texture.text = v;\n        } else {\n            this.texture.patch(v);\n        }\n    }\n\n    set onUpdate(f) {\n        this.__core.onUpdate = f;\n    }\n\n    set onAfterCalcs(f) {\n        this.__core.onAfterCalcs = f;\n    }\n\n    set onAfterUpdate(f) {\n        this.__core.onAfterUpdate = f;\n    }\n\n    forceUpdate() {\n        // Make sure that the update loop is run.\n        this.__core._setHasUpdates();\n    }\n\n    get shader() {\n        return this.__core.shader;\n    }\n\n    set shader(v) {\n        if (Utils.isObjectLiteral(v) && !v.type) {\n            // Setting properties on an existing shader.\n            if (this.shader) {\n                this.shader.patch(v);\n            }\n        } else {\n            const shader = Shader.create(this.stage, v);\n\n            if (this.__enabled && this.__core.shader) {\n                this.__core.shader.removeElement(this.__core);\n            }\n\n            this.__core.shader = shader;\n\n            if (this.__enabled && this.__core.shader) {\n                this.__core.shader.addElement(this.__core);\n            }\n        }\n    }\n\n    _hasTexturizer() {\n        return !!this.__core._texturizer;\n    }\n\n    get renderToTexture() {\n        return this.rtt\n    }\n\n    set renderToTexture(v) {\n        this.rtt = v\n    }\n\n    get rtt() {\n        return this._hasTexturizer() && this.texturizer.enabled;\n    }\n\n    set rtt(v) {\n        this.texturizer.enabled = v;\n    }\n\n    get rttLazy() {\n        return this._hasTexturizer() && this.texturizer.lazy;\n    }\n\n    set rttLazy(v) {\n        this.texturizer.lazy = v;\n    }\n\n    get renderOffscreen() {\n        return this._hasTexturizer() && this.texturizer.renderOffscreen;\n    }\n\n    set renderOffscreen(v) {\n        this.texturizer.renderOffscreen = v;\n    }\n\n    get colorizeResultTexture() {\n        return this._hasTexturizer() && this.texturizer.colorize;\n    }\n\n    set colorizeResultTexture(v) {\n        this.texturizer.colorize = v;\n    }\n\n    getTexture() {\n        return this.texturizer._getTextureSource();\n    }\n\n    get texturizer() {\n        return this.__core.texturizer;\n    }\n\n    patch(settings) {\n        let paths = Object.keys(settings);\n\n        for (let i = 0, n = paths.length; i < n; i++) {\n            let path = paths[i];\n            const v = settings[path];\n\n            const firstCharCode = path.charCodeAt(0);\n            if (Utils.isUcChar(firstCharCode)) {\n                // Ref.\n                const child = this.getByRef(path);\n                if (!child) {\n                    if (v !== undefined) {\n                        // Add to list immediately.\n                        let c;\n                        if (Utils.isObjectLiteral(v)) {\n                            // Catch this case to capture createMode flag.\n                            c = this.childList.createItem(v);\n                            c.patch(v);\n                        } else if (Utils.isObject(v)) {\n                            c = v;\n                        }\n                        if (c.isElement) {\n                            c.ref = path;\n                        }\n\n                        this.childList.a(c);\n                    }\n                } else {\n                    if (v === undefined) {\n                        if (child.parent) {\n                            child.parent.childList.remove(child);\n                        }\n                    } else if (Utils.isObjectLiteral(v)) {\n                        child.patch(v);\n                    } else if (v.isElement) {\n                        // Replace element by new element.\n                        v.ref = path;\n                        this.childList.replace(v, child);\n                    } else {\n                        this._throwError(\"Unexpected value for path: \" + path);\n                    }\n                }\n            } else {\n                // Property.\n                Base.patchObjectProperty(this, path, v);\n            }\n        }\n    }\n\n    _throwError(message) {\n        throw new Error(this.constructor.name + \" (\" + this.getLocationString() + \"): \" + message);\n    }\n\n    animation(settings) {\n        return this.stage.animations.createAnimation(this, settings);\n    }\n\n    transition(property, settings = null) {\n        if (settings === null) {\n            return this._getTransition(property);\n        } else {\n            this._setTransition(property, settings);\n            // We do not create/return the transition, because it would undo the 'lazy transition creation' optimization.\n            return null;\n        }\n    }\n\n    set transitions(object) {\n        let keys = Object.keys(object);\n        keys.forEach(property => {\n            this.transition(property, object[property]);\n        });\n    }\n\n    set smooth(object) {\n        let keys = Object.keys(object);\n        keys.forEach(property => {\n            let value = object[property];\n            if (Array.isArray(value)) {\n                this.setSmooth(property, value[0], value[1]);\n            } else {\n                this.setSmooth(property, value);\n            }\n        });\n    }\n\n    fastForward(property) {\n        if (this._transitions) {\n            let t = this._transitions[property];\n            if (t && t.isTransition) {\n                t.finish();\n            }\n        }\n    }\n\n    _getTransition(property) {\n        if (!this._transitions) {\n            this._transitions = {};\n        }\n        let t = this._transitions[property];\n        if (!t) {\n            // Create default transition.\n            t = new Transition(this.stage.transitions, this.stage.transitions.defaultTransitionSettings, this, property);\n        } else if (t.isTransitionSettings) {\n            // Upgrade to 'real' transition.\n            t = new Transition(\n                this.stage.transitions,\n                t,\n                this,\n                property\n            );\n        }\n        this._transitions[property] = t;\n        return t;\n    }\n\n    _setTransition(property, settings) {\n        if (!settings) {\n            this._removeTransition(property);\n        } else {\n            if (Utils.isObjectLiteral(settings)) {\n                // Convert plain object to proper settings object.\n                settings = this.stage.transitions.createSettings(settings);\n            }\n\n            if (!this._transitions) {\n                this._transitions = {};\n            }\n\n            let current = this._transitions[property];\n            if (current && current.isTransition) {\n                // Runtime settings change.\n                current.settings = settings;\n                return current;\n            } else {\n                // Initially, only set the settings and upgrade to a 'real' transition when it is used.\n                this._transitions[property] = settings;\n            }\n        }\n    }\n\n    _removeTransition(property) {\n        if (this._transitions) {\n            delete this._transitions[property];\n        }\n    }\n\n    getSmooth(property, v) {\n        let t = this._getTransition(property);\n        if (t && t.isAttached()) {\n            return t.targetValue;\n        } else {\n            return v;\n        }\n    }\n\n    setSmooth(property, v, settings) {\n        if (settings) {\n            this._setTransition(property, settings);\n        }\n        let t = this._getTransition(property);\n        t.start(v);\n        return t;\n    }\n\n    get flex() {\n        return this.__core.flex;\n    }\n\n    set flex(v) {\n        this.__core.flex = v;\n    }\n\n    get flexItem() {\n        return this.__core.flexItem;\n    }\n\n    set flexItem(v) {\n        this.__core.flexItem = v;\n    }\n\n    static isColorProperty(property) {\n        return property.toLowerCase().indexOf(\"color\") >= 0;\n    }\n\n    static getMerger(property) {\n        if (Element.isColorProperty(property)) {\n            return StageUtils.mergeColors;\n        } else {\n            return StageUtils.mergeNumbers;\n        }\n    }\n\n    toJSON() {\n        const ref = [`${this.constructor.name}`];\n        const tree = {};\n        tree[ref] = {};\n\n        if (this.hasChildren()) {\n            Element.collectChildren(tree[ref], this.__childList);\n        } else {\n            tree[ref] = {...Element.getProperties(this)};\n        }\n        return tree;\n    }\n\n    static collectChildren(tree, children) {\n        const childList = children;\n        for (let i = 0, j = childList.length; i < j; i++) {\n            const element = childList.getAt(i);\n            const ref = `${element.__ref || `Element-${element.id}`}`;\n            const properties = this.getProperties(element);\n\n            tree[ref] = {...properties};\n\n            if (element.hasChildren()) {\n                tree[ref].children = {};\n                this.collectChildren(\n                    tree[ref].children, element.__childList\n                );\n            }\n        }\n    }\n\n    static getProperties(element) {\n        const props = {};\n        const list = [\n            \"alpha\", \"active\", \"attached\", \"boundsMargin\", \"color\", \"clipping\", \"enabled\", \"h\", \"id\", \"isComponent\",\n            \"mount\", \"mountY\", \"mountX\", \"pivot\", \"pivotX\", \"pivotY\", \"ref\", \"renderOffscreen\", \"renderToTexture\", \"scale\",\n            \"scaleX\", \"scaleY\", \"state\", \"tag\", \"visible\", \"w\", \"x\", \"y\", \"zIndex\",\n            \"!!flex\", \"!!flexItem\", \"hasFocus()\", \"hasFinalFocus()\"\n        ];\n        let n = list.length;\n\n        while (n--) {\n            let key = list[n];\n            const getBoolean = /^!{2}/;\n            const isFunction = /\\(\\)$/;\n\n            if (getBoolean.test(key)) {\n                key = key.substring(2, key.length);\n                props[key] = !!element[key];\n            } else if (isFunction.test(key)) {\n                key = key.substring(0, key.length - 2);\n                if (typeof element[key] === \"function\") {\n                    props[key] = element[key]();\n                }\n            } else {\n                props[key] = element[key];\n            }\n        }\n        return {...props, ...element.getNonDefaults()};\n    }\n}\n\n// This gives a slight performance benefit compared to extending EventEmitter.\nEventEmitter.addAsMixin(Element);\n\nElement.prototype.isElement = 1;\n\nElement.id = 1;\n\n// Getters reused when referencing element (subobject) properties by a property path, as used in a transition or animation ('x', 'texture.x', etc).\nElement.PROP_GETTERS = new Map();\n\n// Setters reused when referencing element (subobject) properties by a property path, as used in a transition or animation ('x', 'texture.x', etc).\nElement.PROP_SETTERS = new Map();\n\nimport Texture from \"./Texture.mjs\";\nimport ImageTexture from \"../textures/ImageTexture.mjs\";\nimport TextTexture from \"../textures/TextTexture.mjs\";\nimport SourceTexture from \"../textures/SourceTexture.mjs\";\nimport Transition from \"../animation/Transition.mjs\";\nimport ElementChildList from \"./ElementChildList.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class StateMachine {\n\n    constructor() {\n        StateMachine.setupStateMachine(this);\n    }\n\n    static setupStateMachine(target) {\n        const targetConstructor = target.constructor;\n        const router = StateMachine.create(targetConstructor);\n        Object.setPrototypeOf(target, router.prototype);\n        target.constructor = targetConstructor;\n        target._initStateMachine();\n    }\n\n    /**\n     * Creates a state machine implementation.\n     * It extends the original type and should be used when creating new instances.\n     * The original type is available as static property 'original', and it must be used when subclassing as follows:\n     * const type = StateMachine.create(class YourNewStateMachineClass extends YourBaseStateMachineClass.original {  })\n     * @param {Class} type\n     * @returns {StateMachine}\n     */\n    static create(type) {\n        if (!type.hasOwnProperty('_sm')) {\n            // Only need to run once.\n            const stateMachineType = new StateMachineType(type);\n            type._sm = stateMachineType;\n        }\n\n        return type._sm.router;\n    }\n\n    /**\n     * Calls the specified method if it exists.\n     * @param {string} event\n     * @param {*...} args\n     */\n    fire(event, ...args) {\n        if (this._hasMethod(event)) {\n            return this[event](...args);\n        }\n    }\n\n    /**\n     * Returns the current state path (for example \"Initialized.Loading\").\n     * @returns {string}\n     * @protected\n     */\n    _getState() {\n        return this._state.__path;\n    }\n\n    /**\n     * Returns true iff statePath is (an ancestor of) currentStatePath.\n     * @param {string} statePath\n     * @param {string} currentStatePath\n     * @returns {Boolean}\n     * @protected\n     */\n    _inState(statePath, currentStatePath = this._state.__path) {\n        const state = this._sm.getStateByPath(statePath);\n        const currentState = this._sm.getStateByPath(currentStatePath);\n        const level = state.__level;\n        const stateAtLevel = StateMachine._getStateAtLevel(currentState, level);\n        return (stateAtLevel === state);\n    }\n\n    /**\n     * Returns true if the specified class member is defined for the currently set state.\n     * @param {string} name\n     * @returns {boolean}\n     * @protected\n     */\n    _hasMember(name) {\n        return !!this.constructor.prototype[name];\n    }\n\n    /**\n     * Returns true if the specified class member is a method for the currently set state.\n     * @param {string} name\n     * @returns {boolean}\n     * @protected\n     */\n    _hasMethod(name) {\n        const member = this.constructor.prototype[name];\n        return !!member && (typeof member === \"function\")\n    }\n\n    /**\n     * Switches to the specified state.\n     * @param {string} statePath\n     *   Substates are seperated by a underscores (for example \"Initialized.Loading\").\n     * @param {*[]} [args]\n     *   Args that are supplied in $enter and $exit events.\n     * @protected\n     */\n    _setState(statePath, args) {\n        const setStateId = ++this._setStateCounter;\n        this._setStateId = setStateId;\n\n        if (this._state.__path !== statePath) {\n            // Performance optimization.\n            let newState = this._sm._stateMap[statePath];\n            if (!newState) {\n                // Check for super state.\n                newState = this._sm.getStateByPath(statePath);\n            }\n\n            const prevState = this._state;\n\n            const hasDifferentEnterMethod = (newState.prototype.$enter !== this._state.prototype.$enter);\n            const hasDifferentExitMethod = (newState.prototype.$exit !== this._state.prototype.$exit);\n            if (hasDifferentEnterMethod || hasDifferentExitMethod) {\n                const sharedState = StateMachine._getSharedState(this._state, newState);\n                const context = {\n                    newState: newState.__path,\n                    prevState: prevState.__path,\n                    sharedState: sharedState.__path\n                };\n                const sharedLevel = sharedState.__level;\n\n                if (hasDifferentExitMethod) {\n                    const exitStates = StateMachine._getStatesUntilLevel(this._state, sharedLevel);\n                    for (let i = 0, n = exitStates.length; i < n; i++) {\n                        this.__setState(exitStates[i]);\n                        this._callExit(this._state, args, context);\n                        const stateChangeOverridden = (this._setStateId !== setStateId);\n                        if (stateChangeOverridden) {\n                            return;\n                        }\n                    }\n                }\n\n                if (hasDifferentEnterMethod) {\n                    const enterStates = StateMachine._getStatesUntilLevel(newState, sharedLevel).reverse();\n                    for (let i = 0, n = enterStates.length; i < n; i++) {\n                        this.__setState(enterStates[i]);\n                        this._callEnter(this._state, args, context);\n                        const stateChangeOverridden = (this._setStateId !== setStateId);\n                        if (stateChangeOverridden) {\n                            return;\n                        }\n                    }\n                }\n\n            }\n\n            this.__setState(newState);\n\n            if (this._changedState) {\n                const context = {\n                    newState: newState.__path,\n                    prevState: prevState.__path\n                };\n\n                if (args) {\n                    this._changedState(context, ...args);\n                } else {\n                    this._changedState(context);\n                }\n            }\n\n            if (this._onStateChange) {\n                const context = {\n                    newState: newState.__path,\n                    prevState: prevState.__path\n                };\n                this._onStateChange(context);\n            }\n\n        }\n    }\n\n    _callEnter(state, args = [], context) {\n        const hasParent = !!state.__parent;\n        if (state.prototype.$enter) {\n            if (!hasParent || (state.__parent.prototype.$enter !== state.prototype.$enter)) {\n                state.prototype.$enter.apply(this, [context, ...args]);\n            }\n        }\n    }\n\n    _callExit(state, args = [], context) {\n        const hasParent = !!state.__parent;\n        if (state.prototype.$exit) {\n            if (!hasParent || (state.__parent.prototype.$exit !== state.prototype.$exit)) {\n                state.prototype.$exit.apply(this, [context, ...args]);\n            }\n        }\n    }\n\n    __setState(state) {\n        this._state = state;\n        this._stateIndex = state.__index;\n        this.constructor = state;\n    }\n\n    _initStateMachine() {\n        this._state = null;\n        this._stateIndex = 0;\n        this._setStateCounter = 0;\n        this._sm = this._routedType._sm;\n        this.__setState(this._sm.getStateByPath(\"\"));\n        const context = {newState: \"\", prevState: undefined, sharedState: undefined};\n        this._callEnter(this._state, [], context);\n        this._onStateChange = undefined;\n    }\n\n    /**\n     * Between multiple member names, select the one specified in the deepest state.\n     * If multiple member names are specified in the same deepest state, the first one in the array is returned.\n     * @param {string[]} memberNames\n     * @returns {string|undefined}\n     * @protected\n     */\n    _getMostSpecificHandledMember(memberNames) {\n        let cur = this._state;\n        do {\n            for (let i = 0, n = memberNames.length; i < n; i++) {\n                const memberName = memberNames[i];\n                if (!cur.__parent) {\n                    if (cur.prototype[memberName]) {\n                        return memberName;\n                    }\n                } else {\n                    const alias = StateMachineType.getStateMemberAlias(cur.__path, memberName);\n                    if (this[alias]) {\n                        return memberName;\n                    }\n                }\n            }\n            cur = cur.__parent;\n        } while (cur);\n    }\n\n    static _getStatesUntilLevel(state, level) {\n        const states = [];\n        while (state.__level > level) {\n            states.push(state);\n            state = state.__parent;\n        }\n        return states;\n    }\n\n    static _getSharedState(state1, state2) {\n        const state1Array = StateMachine._getAncestorStates(state1);\n        const state2Array = StateMachine._getAncestorStates(state2);\n        const n = Math.min(state1Array.length, state2Array.length);\n        for (let i = 0; i < n; i++) {\n            if (state1Array[i] !== state2Array[i]) {\n                return state1Array[i - 1];\n            }\n        }\n        return state1Array[n - 1];\n    }\n\n    static _getAncestorStates(state) {\n        const result = [];\n        do {\n            result.push(state);\n        } while(state = state.__parent);\n        return result.reverse();\n    }\n\n    static _getStateAtLevel(state, level) {\n        if (level > state.__level) {\n            return undefined;\n        }\n\n        while(level < state.__level) {\n            state = state.__parent;\n        }\n        return state;\n    }\n}\n\nclass StateMachineType {\n\n    constructor(type) {\n        this._type = type;\n        this._router = null;\n\n        this.init();\n    }\n\n    get router() {\n        return this._router;\n    }\n\n    init() {\n        this._router = this._createRouter();\n\n        this._stateMap = this._getStateMap();\n\n        this._addStateMemberDelegatorsToRouter();\n\n    }\n\n    _createRouter() {\n        const type = this._type;\n\n        const router = class StateMachineRouter extends type {\n            constructor() {\n                super(...arguments);\n                if (!this.constructor.hasOwnProperty('_isRouter')) {\n                    throw new Error(`You need to extend ${type.name}.original instead of ${type.name}.`);\n                }\n            }\n        };\n        router._isRouter = true;\n        router.prototype._routedType = type;\n        router.original = type;\n\n        this._mixinStateMachineMethods(router);\n\n        return router;\n    }\n\n    _mixinStateMachineMethods(router) {\n        // Mixin the state machine methods, so that we reuse the methods instead of re-creating them.\n        const names = Object.getOwnPropertyNames(StateMachine.prototype);\n        for (let i = 0, n = names.length; i < n; i++) {\n            const name = names[i];\n            if (name !== \"constructor\") {\n                const descriptor = Object.getOwnPropertyDescriptor(StateMachine.prototype, name);\n                Object.defineProperty(router.prototype, name, descriptor);\n            }\n        }\n    }\n\n    _addStateMemberDelegatorsToRouter() {\n        const members = this._getAllMemberNames();\n\n        members.forEach(member => {\n            this._addMemberRouter(member);\n        });\n    }\n\n    /**\n     * @note We are generating code because it yields much better performance.\n     */\n    _addMemberRouter(member) {\n        const statePaths = Object.keys(this._stateMap);\n        const descriptors = [];\n        const aliases = [];\n        statePaths.forEach((statePath, index) => {\n            const state = this._stateMap[statePath];\n            const descriptor = this._getDescriptor(state, member);\n            if (descriptor) {\n                descriptors[index] = descriptor;\n\n                // Add to prototype.\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\n                aliases[index] = alias;\n\n                if (!this._router.prototype.hasOwnProperty(alias)) {\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\n                }\n            } else {\n                descriptors[index] = null;\n                aliases[index] = null;\n            }\n        });\n\n        let type = undefined;\n        descriptors.forEach(descriptor => {\n            if (descriptor) {\n                const descType = this._getDescriptorType(descriptor);\n                if (type && (type !== descType)) {\n                    console.warn(`[Lightning] Member ${member} in ${this._type.name} has inconsistent types.`);\n                    return;\n                }\n                type = descType;\n            }\n        });\n\n        switch(type) {\n            case \"method\":\n                this._addMethodRouter(member, descriptors, aliases);\n                break;\n            case \"getter\":\n                this._addGetterSetterRouters(member);\n                break;\n            case \"property\":\n                console.warn(\"[Lightning] Fixed properties are not supported; please use a getter instead!\")\n                break;\n        }\n    }\n\n    _getDescriptor(state, member, isValid = () => true) {\n        let type = state;\n        let curState = state;\n\n        do {\n            const descriptor = Object.getOwnPropertyDescriptor(type.prototype, member);\n            if (descriptor) {\n                if (isValid(descriptor)) {\n                    descriptor._source = curState;\n                    return descriptor;\n                }\n            }\n            type = Object.getPrototypeOf(type);\n            if (type && type.hasOwnProperty('__state')) {\n                curState = type;\n            }\n        } while(type && type.prototype);\n        return undefined;\n    }\n\n    _getDescriptorType(descriptor) {\n        if (descriptor.get || descriptor.set) {\n            return 'getter';\n        } else {\n            if (typeof descriptor.value === \"function\") {\n                return 'method';\n            } else {\n                return 'property';\n            }\n        }\n    }\n\n    static _supportsSpread() {\n        if (this.__supportsSpread === undefined) {\n            this.__supportsSpread = false;\n            try {\n                const func = new Function(\"return [].concat(...arguments);\");\n                func();\n                this.__supportsSpread = true;\n            } catch(e) {}\n        }\n        return this.__supportsSpread;\n    }\n\n    _addMethodRouter(member, descriptors, aliases) {\n        const code = [\n            // The line ensures that, while debugging, your IDE won't open many tabs.\n            \"//@ sourceURL=StateMachineRouter.js\",\n            \"var i = this._stateIndex;\"\n        ];\n        let cur = aliases[0];\n        const supportsSpread = StateMachineType._supportsSpread();\n        for (let i = 1, n = aliases.length; i < n; i++) {\n            const alias = aliases[i];\n            if (alias !== cur) {\n                if (cur) {\n                    if (supportsSpread) {\n                        code.push(`if (i < ${i}) return this[\"${cur}\"](...arguments); else`);\n                    } else {\n                        code.push(`if (i < ${i}) return this[\"${cur}\"].apply(this, arguments); else`);\n                    }\n                } else {\n                    code.push(`if (i < ${i}) return ; else`);\n                }\n            }\n            cur = alias;\n        }\n        if (cur) {\n            if (supportsSpread) {\n                code.push(`return this[\"${cur}\"](...arguments);`);\n            } else {\n                code.push(`return this[\"${cur}\"].apply(this, arguments);`);\n            }\n        } else {\n            code.push(`;`);\n        }\n        const functionBody = code.join(\"\\n\");\n        const router = new Function([], functionBody);\n\n        const descriptor = {value: router};\n        Object.defineProperty(this._router.prototype, member, descriptor);\n    }\n\n    _addGetterSetterRouters(member) {\n        const getter = this._getGetterRouter(member);\n        const setter = this._getSetterRouter(member);\n        const descriptor = {\n            get: getter,\n            set: setter\n        };\n        Object.defineProperty(this._router.prototype, member, descriptor);\n    }\n\n    _getGetterRouter(member) {\n        const statePaths = Object.keys(this._stateMap);\n        const descriptors = [];\n        const aliases = [];\n        statePaths.forEach((statePath, index) => {\n            const state = this._stateMap[statePath];\n            const descriptor = this._getDescriptor(state, member, (descriptor => descriptor.get));\n            if (descriptor) {\n                descriptors[index] = descriptor;\n\n                // Add to prototype.\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\n                aliases[index] = alias;\n\n                if (!this._router.prototype.hasOwnProperty(alias)) {\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\n                }\n            } else {\n                descriptors[index] = null;\n                aliases[index] = null;\n            }\n        });\n\n        const code = [\n            // The line ensures that, while debugging, your IDE won't open many tabs.\n            \"//@ sourceURL=StateMachineRouter.js\",\n            \"var i = this._stateIndex;\"\n        ];\n        let cur = aliases[0];\n        for (let i = 1, n = aliases.length; i < n; i++) {\n            const alias = aliases[i];\n            if (alias !== cur) {\n                if (cur) {\n                    code.push(`if (i < ${i}) return this[\"${cur}\"]; else`);\n                } else {\n                    code.push(`if (i < ${i}) return ; else`);\n                }\n            }\n            cur = alias;\n        }\n        if (cur) {\n            code.push(`return this[\"${cur}\"];`);\n        } else {\n            code.push(`;`);\n        }\n        const functionBody = code.join(\"\\n\");\n        const router = new Function([], functionBody);\n        return router;\n    }\n\n    _getSetterRouter(member) {\n        const statePaths = Object.keys(this._stateMap);\n        const descriptors = [];\n        const aliases = [];\n        statePaths.forEach((statePath, index) => {\n            const state = this._stateMap[statePath];\n            const descriptor = this._getDescriptor(state, member, (descriptor => descriptor.set));\n            if (descriptor) {\n                descriptors[index] = descriptor;\n\n                // Add to prototype.\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\n                aliases[index] = alias;\n\n                if (!this._router.prototype.hasOwnProperty(alias)) {\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\n                }\n            } else {\n                descriptors[index] = null;\n                aliases[index] = null;\n            }\n        });\n\n        const code = [\n            // The line ensures that, while debugging, your IDE won't open many tabs.\n            \"//@ sourceURL=StateMachineRouter.js\",\n            \"var i = this._stateIndex;\"\n        ];\n        let cur = aliases[0];\n        for (let i = 1, n = aliases.length; i < n; i++) {\n            const alias = aliases[i];\n            if (alias !== cur) {\n                if (cur) {\n                    code.push(`if (i < ${i}) this[\"${cur}\"] = arg; else`);\n                } else {\n                    code.push(`if (i < ${i}) ; else`);\n                }\n            }\n            cur = alias;\n        }\n        if (cur) {\n            code.push(`this[\"${cur}\"] = arg;`);\n        } else {\n            code.push(`;`);\n        }\n        const functionBody = code.join(\"\\n\");\n        const router = new Function([\"arg\"], functionBody);\n        return router;\n    }\n\n    static getStateMemberAlias(path, member) {\n        return \"$\" + (path ? path + \".\" : \"\") + member;\n    }\n\n    _getAllMemberNames() {\n        const stateMap = this._stateMap;\n        const map = Object.keys(stateMap);\n        let members = new Set();\n        map.forEach(statePath => {\n            if (statePath === \"\") {\n                // Root state can be skipped: if the method only occurs in the root state, we don't need to re-delegate it based on state.\n                return;\n            }\n            const state = stateMap[statePath];\n            const names = this._getStateMemberNames(state);\n            names.forEach(name => {\n                members.add(name);\n            })\n        });\n        return [...members];\n    }\n\n    _getStateMemberNames(state) {\n        let type = state;\n        let members = new Set();\n        const isRoot = this._type === state;\n        do {\n            const names = this._getStateMemberNamesForType(type);\n            names.forEach(name => {\n                members.add(name)\n            });\n\n            type = Object.getPrototypeOf(type);\n        } while(type && type.prototype && (!type.hasOwnProperty(\"__state\") || isRoot));\n\n        return members;\n    }\n\n    _getStateMemberNamesForType(type) {\n        const memberNames = Object.getOwnPropertyNames(type.prototype);\n        return memberNames.filter(memberName => {\n            return (memberName !== \"constructor\") && !StateMachineType._isStateLocalMember(memberName);\n        });\n    }\n\n    static _isStateLocalMember(memberName) {\n        return (memberName === \"$enter\") || (memberName === \"$exit\");\n    }\n\n    getStateByPath(statePath) {\n        if (this._stateMap[statePath]) {\n            return this._stateMap[statePath];\n        }\n\n        // Search for closest match.\n        const parts = statePath.split(\".\");\n        while(parts.pop()) {\n            const statePath = parts.join(\".\");\n            if (this._stateMap[statePath]) {\n                return this._stateMap[statePath];\n            }\n        }\n    }\n\n    _getStateMap() {\n        if (!this._stateMap) {\n            this._stateMap = this._createStateMap();\n        }\n        return this._stateMap;\n    }\n\n    _createStateMap() {\n        const stateMap = {};\n        this._addState(this._type, null, \"\", stateMap);\n        return stateMap;\n    }\n\n    _addState(state, parentState, name, stateMap) {\n        state.__state = true;\n        state.__name = name;\n\n        this._addStaticStateProperty(state, parentState);\n\n        const parentPath = (parentState ? parentState.__path : \"\");\n        let path = (parentPath ? parentPath + \".\" : \"\") + name;\n        state.__path = path;\n        state.__level = parentState ? parentState.__level + 1 : 0;\n        state.__parent = parentState;\n        state.__index = Object.keys(stateMap).length;\n        stateMap[path] = state;\n\n        const states = state._states;\n        if (states) {\n            const isInheritedFromParent = (parentState && parentState._states === states);\n            if (!isInheritedFromParent) {\n                const subStates = state._states();\n                subStates.forEach(subState => {\n                    const stateName = StateMachineType._getStateName(subState);\n                    this._addState(subState, state, stateName, stateMap);\n                });\n            }\n        }\n    }\n\n    static _getStateName(state) {\n        const name = state.name;\n\n        const index = name.indexOf('$');\n        if (index > 0) {\n            // Strip off rollup name suffix.\n            return name.substr(0, index);\n        }\n\n        return name;\n    }\n\n    _addStaticStateProperty(state, parentState) {\n        if (parentState) {\n            const isClassStateLevel = parentState && !parentState.__parent;\n            if (isClassStateLevel) {\n                this._router[state.__name] = state;\n            } else {\n                parentState[state.__name] = state;\n            }\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Element from \"../tree/Element.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport StateMachine from \"./StateMachine.mjs\";\n\n/**\n * @extends StateMachine\n */\nexport default class Component extends Element {\n\n    constructor(stage, properties) {\n        super(stage);\n\n        // Encapsulate tags to prevent leaking.\n        this.tagRoot = true;\n\n        if (Utils.isObjectLiteral(properties)) {\n            Object.assign(this, properties);\n        }\n\n        this.__initialized = false;\n        this.__firstActive = false;\n        this.__firstEnable = false;\n\n        this.__signals = undefined;\n\n        this.__passSignals = undefined;\n\n        this.__construct();\n\n        // Quick-apply template.\n        const func = this.constructor.getTemplateFunc(this);\n        func.f(this, func.a);\n\n        this._build();\n    }\n\n    __start() {\n        StateMachine.setupStateMachine(this);\n        this._onStateChange = Component.prototype.__onStateChange;\n    }\n\n    get state() {\n        return this._getState();\n    }\n\n    __onStateChange() {\n        /* FIXME: Workaround for case, where application was shut but component still lives */\n        if (this.application) {\n            this.application.updateFocusPath();\n        }\n    }\n\n    _refocus() {\n        /* FIXME: Workaround for case, where application was shut but component still lives */\n        if (this.application) {\n            this.application.updateFocusPath();\n        }\n    }\n\n    static bindProp(name, func = null) {\n        return {__propertyBinding: true, __name: name, __func: func};\n    }\n\n    __bindProperty(propObj, targetObj, targetProp) {\n        // 1. find binding position: find object and property name to be bound\n        const obj = targetObj;\n        const prop = targetProp;\n        const propDependencies = Array.isArray(propObj.__name) ? propObj.__name : [propObj.__name];\n\n        // 2. create setters for every given dependency\n        for (let i = 0; i < propDependencies.length; i++) {\n            const propName = propDependencies[i];\n            const func = propObj.__func ? propObj.__func : (context) => context[propName];\n\n            if (!this.hasOwnProperty(propName)) {\n                this[`__prop_bindings_${propName}`] = [{__obj: obj, __prop: prop, __func: func}];\n                Object.defineProperty(this, propName, {\n                    set: (value) => {\n                        this[`__prop_${propName}`] = value;\n                        for (const {__obj, __prop, __func} of this[`__prop_bindings_${propName}`]) {\n                            __obj[__prop] = __func(this);\n                        }\n                    },\n                    get: () => this[`__prop_${propName}`]\n                });\n            } else {\n                this[`__prop_bindings_${propName}`].push({__obj: obj, __prop: prop, __func: func});\n            }\n        }\n    }\n\n    /**\n     * Returns a high-performance template patcher.\n     */\n    static getTemplateFunc(ctx) {\n        // We need a different template function per patch id.\n        const name = \"_templateFunc\";\n\n        // Be careful with class-based static inheritance.\n        const hasName = '__has' + name;\n        if (this[hasName] !== this) {\n            this[hasName] = this;\n            this[name] = this.parseTemplate(this._template(ctx));\n        }\n        return this[name];\n    }\n\n    static parseTemplate(obj) {\n        const context = {\n            loc: [],\n            store: [],\n            rid: 0\n        };\n\n        this.parseTemplateRec(obj, context, \"element\");\n\n        const code = context.loc.join(\";\\n\");\n        const f = new Function(\"element\", \"store\", code);\n        return {f: f, a: context.store};\n    }\n\n    static parseTemplateRec(obj, context, cursor) {\n        const store = context.store;\n        const loc = context.loc;\n        const keys = Object.keys(obj);\n        keys.forEach(key => {\n            let value = obj[key];\n            if (Utils.isUcChar(key.charCodeAt(0))) {\n                // Value must be expanded as well.\n                if (Utils.isObjectLiteral(value)) {\n                    // Ref.\n                    const childCursor = `r${key.replace(/[^a-z0-9]/gi, \"\") + context.rid}`;\n                    let type = value.type ? value.type : Element;\n                    if (type === Element) {\n                        loc.push(`var ${childCursor} = element.stage.createElement()`);\n                    } else {\n                        store.push(type);\n                        loc.push(`var ${childCursor} = new store[${store.length - 1}](${cursor}.stage)`);\n                    }\n                    loc.push(`${childCursor}.ref = \"${key}\"`);\n                    context.rid++;\n\n                    // Enter sub.\n                    this.parseTemplateRec(value, context, childCursor);\n\n                    loc.push(`${cursor}.childList.add(${childCursor})`);\n                } else if (Utils.isObject(value)) {\n                    // Dynamic assignment.\n                    store.push(value);\n                    loc.push(`${cursor}.childList.add(store[${store.length - 1}])`);\n                }\n            } else {\n                if (key === \"text\") {\n                    const propKey = cursor + \"__text\";\n                    loc.push(`var ${propKey} = ${cursor}.enableTextTexture()`);\n                    if (value.__propertyBinding === true) {\n                        // Allow binding entire objects to text property\n                        store.push(value);\n                        loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                    } else {\n                        this.parseTemplatePropRec(value, context, propKey);\n                    }\n                } else if (key === \"shader\" && Utils.isObjectLiteral(value)) {\n                    const shaderCursor = `${cursor}[\"shader\"]`\n                    store.push(value);\n                    loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\n                    this.parsePropertyBindings(value, context, shaderCursor);\n                } else if (key === \"texture\" && Utils.isObjectLiteral(value)) {\n                    const propKey = cursor + \"__texture\";\n                    const type = value.type;\n                    if (type) {\n                        store.push(type);\n                        loc.push(`var ${propKey} = new store[${store.length - 1}](${cursor}.stage)`);\n                        this.parseTemplatePropRec(value, context, propKey);\n                        loc.push(`${cursor}[\"${key}\"] = ${propKey}`);\n                    } else {\n                        loc.push(`${propKey} = ${cursor}.texture`);\n                        this.parseTemplatePropRec(value, context, propKey);\n                    }\n                } else if (Utils.isObjectLiteral(value) && value.__propertyBinding === true) {\n                    store.push(value);\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                } else {\n                    // Property;\n                    if (Utils.isNumber(value)) {\n                        loc.push(`${cursor}[\"${key}\"] = ${value}`);\n                    } else if (Utils.isBoolean(value)) {\n                        loc.push(`${cursor}[\"${key}\"] = ${value ? \"true\" : \"false\"}`);\n                    } else if (Utils.isObject(value) || Array.isArray(value)) {\n                        // Dynamic assignment.\n                        // Because literal objects may contain dynamics, we store the full object.\n                        store.push(value);\n                        loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\n                    } else {\n                        // String etc.\n                        loc.push(`${cursor}[\"${key}\"] = ${JSON.stringify(value)}`);\n                    }\n                }\n            }\n        });\n    }\n\n    static parseTemplatePropRec(obj, context, cursor) {\n        const store = context.store;\n        const loc = context.loc;\n        const keys = Object.keys(obj);\n        keys.forEach(key => {\n            if (key !== \"type\") {\n                const value = obj[key];\n                if (Utils.isNumber(value)) {\n                    loc.push(`${cursor}[\"${key}\"] = ${value}`);\n                } else if (Utils.isBoolean(value)) {\n                    loc.push(`${cursor}[\"${key}\"] = ${value ? \"true\" : \"false\"}`);\n                } else if (Utils.isObject(value) && value.__propertyBinding === true) {\n                    store.push(value);\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                } else if (Utils.isObject(value) || Array.isArray(value)) {\n                    // Dynamic assignment.\n                    // Because literal objects may contain dynamics, we store the full object.\n                    store.push(value);\n                    loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\n                } else {\n                    // String etc.\n                    loc.push(`${cursor}[\"${key}\"] = ${JSON.stringify(value)}`);\n                }\n            }\n        });\n    }\n\n    static parsePropertyBindings(obj, context, cursor) {\n        const store = context.store;\n        const loc = context.loc;\n        const keys = Object.keys(obj);\n        keys.forEach(key => {\n            if (key !== \"type\") {\n                const value = obj[key];\n                if (Utils.isObjectLiteral(value) && value.__propertyBinding === true) {\n                    store.push(value);\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                }\n            }\n        });\n    }\n\n    _onSetup() {\n        if (!this.__initialized) {\n            this._setup();\n        }\n    }\n\n    _setup() {\n    }\n\n    _onAttach() {\n        if (!this.__initialized) {\n            this.__init();\n            this.__initialized = true;\n        }\n\n        this._attach();\n    }\n\n    _attach() {\n    }\n\n    _onDetach() {\n        this._detach();\n    }\n\n    _detach() {\n    }\n\n    _onEnabled() {\n        if (!this.__firstEnable) {\n            this._firstEnable();\n            this.__firstEnable = true;\n        }\n\n        this._enable();\n    }\n\n    _firstEnable() {\n    }\n\n    _enable() {\n    }\n\n    _onDisabled() {\n        this._disable();\n    }\n\n    _disable() {\n    }\n\n    _onActive() {\n        if (!this.__firstActive) {\n            this._firstActive();\n            this.__firstActive = true;\n        }\n\n        this._active();\n    }\n\n    _firstActive() {\n    }\n\n    _active() {\n    }\n\n    _onInactive() {\n        this._inactive();\n    }\n\n    _inactive() {\n    }\n\n    get application() {\n        return this.stage.application;\n    }\n\n    __construct() {\n        this._construct();\n    }\n\n    _construct() {\n    }\n\n    _build() {\n    }\n\n    __init() {\n        this._init();\n    }\n\n    _init() {\n    }\n\n    _focus(newTarget, prevTarget) {\n    }\n\n    _unfocus(newTarget) {\n    }\n\n    _focusChange(target, newTarget) {\n    }\n\n    _getFocused() {\n        // Override to delegate focus to child components.\n        return this;\n    }\n\n    _setFocusSettings(settings) {\n        // Override to add custom settings. See Application._handleFocusSettings().\n    }\n\n    _handleFocusSettings(settings) {\n        // Override to react on custom settings. See Application._handleFocusSettings().\n    }\n\n    static _template() {\n        return {};\n    }\n\n    hasFinalFocus() {\n        let path = this.application._focusPath;\n        return path && path.length && path[path.length - 1] === this;\n    }\n\n    hasFocus() {\n        let path = this.application._focusPath;\n        return path && (path.indexOf(this) >= 0);\n    }\n\n    get cparent() {\n        return Component.getParent(this);\n    }\n\n    seekAncestorByType(type) {\n        let c = this.cparent;\n        while (c) {\n            if (c.constructor === type) {\n                return c;\n            }\n            c = c.cparent;\n        }\n    }\n\n    getSharedAncestorComponent(element) {\n        let ancestor = this.getSharedAncestor(element);\n        while (ancestor && !ancestor.isComponent) {\n            ancestor = ancestor.parent;\n        }\n        return ancestor;\n    }\n\n    get signals() {\n        return this.__signals;\n    }\n\n    set signals(v) {\n        if (!Utils.isObjectLiteral(v)) {\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\n        }\n        this.__signals = v;\n    }\n\n    set alterSignals(v) {\n        if (!Utils.isObjectLiteral(v)) {\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\n        }\n        if (!this.__signals) {\n            this.__signals = {};\n        }\n        for (let key in v) {\n            const d = v[key];\n            if (d === undefined) {\n                delete this.__signals[key];\n            } else {\n                this.__signals[key] = v;\n            }\n        }\n    }\n\n    get passSignals() {\n        return this.__passSignals || {};\n    }\n\n    set passSignals(v) {\n        this.__passSignals = Object.assign(this.__passSignals || {}, v);\n    }\n\n    set alterPassSignals(v) {\n        if (!Utils.isObjectLiteral(v)) {\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\n        }\n        if (!this.__passSignals) {\n            this.__passSignals = {};\n        }\n        for (let key in v) {\n            const d = v[key];\n            if (d === undefined) {\n                delete this.__passSignals[key];\n            } else {\n                this.__passSignals[key] = v;\n            }\n        }\n    }\n\n    /**\n     * Signals the parent of the specified event.\n     * A parent/ancestor that wishes to handle the signal should set the 'signals' property on this component.\n     * @param {string} event\n     * @param {...*} args\n     */\n    signal(event, ...args) {\n        return this._signal(event, args);\n    }\n\n    _signal(event, args) {\n        const signalParent = this._getParentSignalHandler();\n        if (signalParent) {\n            if (this.__signals) {\n                let fireEvent = this.__signals[event];\n                if (fireEvent === false) {\n                    // Ignore event.\n                    return;\n                }\n                if (fireEvent) {\n                    if (fireEvent === true) {\n                        fireEvent = event;\n                    }\n \n                    if (Utils.isFunction(fireEvent)) {\n                        return fireEvent(...args);\n                    }\n\n                    if (signalParent._hasMethod(fireEvent)) {\n                        return signalParent[fireEvent](...args);\n                    }\n                }\n            }\n\n            let passSignal = (this.__passSignals && this.__passSignals[event]);\n            if (passSignal) {\n                // Bubble up.\n                if (passSignal && passSignal !== true) {\n                    // Replace signal name.\n                    event = passSignal;\n                }\n\n                return signalParent._signal(event, args);\n            }\n        }\n    }\n\n    _getParentSignalHandler() {\n        return this.cparent ? this.cparent._getSignalHandler() : null;\n    }\n\n    _getSignalHandler() {\n        if (this._signalProxy) {\n            return this.cparent ? this.cparent._getSignalHandler() : null;\n        }\n        return this;\n    }\n\n    get _signalProxy() {\n        return false;\n    }\n\n    fireAncestors(name, ...args) {\n        if (!name.startsWith('$')) {\n            throw new Error(\"Ancestor event name must be prefixed by dollar sign.\");\n        }\n\n        const parent = this._getParentSignalHandler();\n        if (parent) {\n            return parent._doFireAncestors(name, args);\n        }\n    }\n\n    _doFireAncestors(name, args) {\n        if (this._hasMethod(name)) {\n            return this.fire(name, ...args);\n        } else {\n            const signalParent = this._getParentSignalHandler();\n            if (signalParent) {\n                return signalParent._doFireAncestors(name, args);\n            }\n        }\n    }\n\n    static collectSubComponents(subs, element) {\n        if (element.hasChildren()) {\n            const childList = element.__childList;\n            for (let i = 0, n = childList.length; i < n; i++) {\n                const child = childList.getAt(i);\n                if (child.isComponent) {\n                    subs.push(child);\n                } else {\n                    Component.collectSubComponents(subs, child);\n                }\n            }\n        }\n    }\n\n    static getComponent(element) {\n        let parent = element;\n        while (parent && !parent.isComponent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n\n    static getParent(element) {\n        return Component.getComponent(element.parent);\n    }\n}\n\nComponent.prototype.isComponent = true;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class CoreQuadList {\n\n    constructor(ctx) {\n\n        this.ctx = ctx;\n\n        this.quadTextures = [];\n\n        this.quadElements = [];\n    }\n\n    get length() {\n        return this.quadTextures.length;\n    }\n\n    reset() {\n        this.quadTextures = [];\n        this.quadElements = [];\n        this.dataLength = 0;\n    }\n\n    getElement(index) {\n        return this.quadElements[index]._element;\n    }\n\n    getElementCore(index) {\n        return this.quadElements[index];\n    }\n\n    getTexture(index) {\n        return this.quadTextures[index];\n    }\n\n    getTextureWidth(index) {\n        let nativeTexture = this.quadTextures[index];\n        if (nativeTexture.w) {\n            // Render texture;\n            return nativeTexture.w;\n        } else {\n            return this.quadElements[index]._displayedTextureSource.w;\n        }\n    }\n\n    getTextureHeight(index) {\n        let nativeTexture = this.quadTextures[index];\n        if (nativeTexture.h) {\n            // Render texture;\n            return nativeTexture.h;\n        } else {\n            return this.quadElements[index]._displayedTextureSource.h;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadList from \"../../tree/core/CoreQuadList.mjs\";\n\nexport default class WebGLCoreQuadList extends CoreQuadList {\n\n    constructor(ctx) {\n        super(ctx);\n\n        // Allocate a fairly big chunk of memory that should be enough to support ~100000 (default) quads.\n        // We do not (want to) handle memory overflow.\n        const byteSize = ctx.stage.getOption('bufferMemory');\n\n        this.dataLength = 0;\n\n        this.data = new ArrayBuffer(byteSize);\n        this.floats = new Float32Array(this.data);\n        this.uints = new Uint32Array(this.data);\n    }\n\n    getAttribsDataByteOffset(index) {\n        // Where this quad can be found in the attribs buffer.\n        return index * 80;\n    }\n\n    getQuadContents() {\n        // Debug: log contents of quad buffer.\n        let floats = this.floats;\n        let uints = this.uints;\n        let lines = [];\n        for (let i = 1; i <= this.length; i++) {\n            let str = 'entry ' + i + ': ';\n            for (let j = 0; j < 4; j++) {\n                let b = i * 20 + j * 4;\n                str += floats[b] + ',' + floats[b+1] + ':' + floats[b+2] + ',' + floats[b+3] + '[' + uints[b+4].toString(16) + '] ';\n            }\n            lines.push(str);\n        }\n\n        return lines;\n    }\n\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport default class CoreQuadOperation {\n\n    constructor(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n\n        this.ctx = ctx;\n        this.shader = shader;\n        this.shaderOwner = shaderOwner;\n        this.renderTextureInfo = renderTextureInfo;\n        this.scissor = scissor;\n        this.index = index;\n        this.length = 0;\n\n    }\n\n    get quads() {\n        return this.ctx.renderState.quads;\n    }\n\n    getTexture(index) {\n        return this.quads.getTexture(this.index + index);\n    }\n\n    getElementCore(index) {\n        return this.quads.getElementCore(this.index + index);\n    }\n\n    getElement(index) {\n        return this.quads.getElement(this.index + index);\n    }\n\n    getElementWidth(index) {\n        return this.getElement(index).renderWidth;\n    }\n\n    getElementHeight(index) {\n        return this.getElement(index).renderHeight;\n    }\n\n    getTextureWidth(index) {\n        return this.quads.getTextureWidth(this.index + index);\n    }\n\n    getTextureHeight(index) {\n        return this.quads.getTextureHeight(this.index + index);\n    }\n\n    getRenderWidth() {\n        if (this.renderTextureInfo) {\n            return this.renderTextureInfo.w;\n        } else {\n            return this.ctx.stage.w;\n        }\n    }\n\n    getRenderHeight() {\n        if (this.renderTextureInfo) {\n            return this.renderTextureInfo.h;\n        } else {\n            return this.ctx.stage.h;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadOperation from \"../../tree/core/CoreQuadOperation.mjs\";\n\nexport default class WebGLCoreQuadOperation extends CoreQuadOperation {\n\n    constructor(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n        super(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\n\n        this.extraAttribsDataByteOffset = 0;\n    }\n\n    getAttribsDataByteOffset(index) {\n        // Where this quad can be found in the attribs buffer.\n        return this.quads.getAttribsDataByteOffset(this.index + index);\n    }\n\n    /**\n     * Returns the relative pixel coordinates in the shader owner to gl position coordinates in the render texture.\n     * @param x\n     * @param y\n     * @return {number[]}\n     */\n    getNormalRenderTextureCoords(x, y) {\n        let coords = this.shaderOwner.getRenderTextureCoords(x, y);\n        coords[0] /= this.getRenderWidth();\n        coords[1] /= this.getRenderHeight();\n        coords[0] = coords[0] * 2 - 1;\n        coords[1] = 1 - coords[1] * 2;\n        return coords;\n    }\n\n    getProjection() {\n        if (this.renderTextureInfo === null) {\n            return this.ctx.renderExec._projection;\n        } else {\n            return this.renderTextureInfo.nativeTexture.projection;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport default class CoreRenderExecutor {\n\n    constructor(ctx) {\n        this.ctx = ctx;\n\n        this.renderState = ctx.renderState;\n\n        this.gl = this.ctx.stage.gl;\n    }\n\n    destroy() {\n        this.ctx = null;\n        this.renderState = null;\n        this.gl = null;\n\n        delete this.ctx;\n        delete this.renderState;\n        delete this.gl;\n    }\n\n    _reset() {\n        this._bindRenderTexture(null);\n        this._setScissor(null);\n        this._clearRenderTexture();\n    }\n\n    execute() {\n        this._reset();\n\n        let qops = this.renderState.quadOperations;\n\n        let i = 0, j = 0, n = qops.length;\n        while (i < n) {\n            this._processQuadOperation(qops[i]);\n            i++;\n        }\n    }\n\n    _processQuadOperation(quadOperation) {\n        if (quadOperation.renderTextureInfo && quadOperation.renderTextureInfo.ignore) {\n            // Ignore quad operations when we are 're-using' another texture as the render texture result.\n            return;\n        }\n\n        this._setupQuadOperation(quadOperation);\n        this._execQuadOperation(quadOperation);\n\n    }\n\n    _setupQuadOperation(quadOperation) {\n    }\n\n    _execQuadOperation(op) {\n        // Set render texture.\n        let nativeTexture = op.renderTextureInfo ? op.renderTextureInfo.nativeTexture : null;\n\n        if (this._renderTexture !== nativeTexture) {\n            this._bindRenderTexture(nativeTexture);\n        }\n\n        if (op.renderTextureInfo && !op.renderTextureInfo.cleared) {\n            this._setScissor(null);\n            this._clearRenderTexture();\n            op.renderTextureInfo.cleared = true;\n            this._setScissor(op.scissor);\n        } else {\n            this._setScissor(op.scissor);\n        }\n\n        this._renderQuadOperation(op);\n    }\n\n    _renderQuadOperation(op) {\n    }\n\n    _bindRenderTexture(renderTexture) {\n        this._renderTexture = renderTexture;\n    }\n\n    _clearRenderTexture(renderTexture) {\n    }\n\n    _setScissor(area) {\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreRenderExecutor from \"../../tree/core/CoreRenderExecutor.mjs\";\n\nexport default class WebGLCoreRenderExecutor extends CoreRenderExecutor {\n\n    constructor(ctx) {\n        super(ctx)\n\n        this.gl = this.ctx.stage.gl;\n\n        this.init();\n    }\n\n    init() {\n        let gl = this.gl;\n\n        // Create new sharable buffer for params.\n        this._attribsBuffer = gl.createBuffer();\n\n        let maxQuads = Math.floor(this.renderState.quads.data.byteLength / 80);\n\n        // Init webgl arrays.\n        let allIndices = new Uint16Array(maxQuads * 6);\n\n        // fill the indices with the quads to draw.\n        for (let i = 0, j = 0; i < maxQuads; i += 6, j += 4) {\n            allIndices[i] = j;\n            allIndices[i + 1] = j + 1;\n            allIndices[i + 2] = j + 2;\n            allIndices[i + 3] = j;\n            allIndices[i + 4] = j + 2;\n            allIndices[i + 5] = j + 3;\n        }\n\n        // The quads buffer can be (re)used to draw a range of quads.\n        this._quadsBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._quadsBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, allIndices, gl.STATIC_DRAW);\n\n        // The matrix that causes the [0,0 - W,H] box to map to [-1,-1 - 1,1] in the end results.\n        this._projection = new Float32Array([2/this.ctx.stage.coordsWidth, -2/this.ctx.stage.coordsHeight]);\n\n    }\n\n    destroy() {\n        super.destroy();\n        this.gl.deleteBuffer(this._attribsBuffer);\n        this.gl.deleteBuffer(this._quadsBuffer);\n\n        this.gl = null;\n        delete this.gl;\n    }\n\n    _reset() {\n        super._reset();\n\n        let gl = this.gl;\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.enable(gl.BLEND);\n        gl.disable(gl.DEPTH_TEST);\n\n        this._stopShaderProgram();\n        this._setupBuffers();\n    }\n\n    _setupBuffers() {\n        let gl = this.gl;\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._quadsBuffer);\n        let element = new Float32Array(this.renderState.quads.data, 0, this.renderState.quads.dataLength);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._attribsBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, element, gl.DYNAMIC_DRAW);\n    }\n\n    _setupQuadOperation(quadOperation) {\n        super._setupQuadOperation(quadOperation);\n        this._useShaderProgram(quadOperation.shader, quadOperation);\n    }\n\n    _renderQuadOperation(op) {\n        let shader = op.shader;\n\n        if (op.length || op.shader.addEmpty()) {\n            shader.beforeDraw(op);\n            shader.draw(op);\n            shader.afterDraw(op);\n        }\n    }\n\n    /**\n     * @param {WebGLShader} shader;\n     * @param {CoreQuadOperation} operation;\n     */\n    _useShaderProgram(shader, operation) {\n        if (!shader.hasSameProgram(this._currentShaderProgram)) {\n            if (this._currentShaderProgram) {\n                this._currentShaderProgram.stopProgram();\n            }\n            shader.useProgram();\n            this._currentShaderProgram = shader;\n        }\n        shader.setupUniforms(operation);\n    }\n\n    _stopShaderProgram() {\n        if (this._currentShaderProgram) {\n            // The currently used shader program should be stopped gracefully.\n            this._currentShaderProgram.stopProgram();\n            this._currentShaderProgram = null;\n        }\n    }\n\n    _bindRenderTexture(renderTexture) {\n        super._bindRenderTexture(renderTexture);\n\n        let gl = this.gl;\n        if (!this._renderTexture) {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            gl.viewport(0,0,this.ctx.stage.w,this.ctx.stage.h);\n        } else {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this._renderTexture.framebuffer);\n            gl.viewport(0,0,this._renderTexture.w, this._renderTexture.h);\n        }\n    }\n\n    _clearRenderTexture() {\n        super._clearRenderTexture();\n        let gl = this.gl;\n        if (!this._renderTexture) {\n            let glClearColor = this.ctx.stage.getClearColor();\n            if (glClearColor) {\n                gl.clearColor(glClearColor[0] * glClearColor[3], glClearColor[1] * glClearColor[3], glClearColor[2] * glClearColor[3], glClearColor[3]);\n                gl.clear(gl.COLOR_BUFFER_BIT);\n            }\n        } else {\n            // Clear texture.\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n    }\n\n    _setScissor(area) {\n        super._setScissor(area);\n\n        if (this._scissor === area) {\n            return;\n        }\n        this._scissor = area;\n\n        let gl = this.gl;\n        if (!area) {\n            gl.disable(gl.SCISSOR_TEST);\n        } else {\n            gl.enable(gl.SCISSOR_TEST);\n            let precision = this.ctx.stage.getRenderPrecision();\n            let y = area[1];\n            if (this._renderTexture === null) {\n                // Flip.\n                y = (this.ctx.stage.h / precision - (area[1] + area[3]));\n            }\n            gl.scissor(Math.round(area[0] * precision), Math.round(y * precision), Math.round(area[2] * precision), Math.round(area[3] * precision));\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class CoreRenderState {\n\n    constructor(ctx) {\n        this.ctx = ctx;\n\n        this.stage = ctx.stage;\n\n        this.defaultShader = this.stage.renderer.getDefaultShader(ctx);\n\n        this.renderer = ctx.stage.renderer;\n\n        this.quads = this.renderer.createCoreQuadList(ctx);\n\n    }\n\n    reset() {\n        this._renderTextureInfo = null;\n\n        this._scissor = null;\n\n        this._shader = null;\n\n        this._shaderOwner = null;\n\n        this._realShader = null;\n\n        this._check = false;\n\n        this.quadOperations = [];\n\n        this._texturizer = null;\n\n        this._texturizerTemporary = false;\n\n        this._quadOperation = null;\n\n        this.quads.reset();\n\n        this._temporaryTexturizers = [];\n        \n        this._isCachingTexturizer = false;\n\n    }\n\n    get length() {\n        return this.quads.quadTextures.length;\n    }\n\n    setShader(shader, owner) {\n        if (this._shaderOwner !== owner || this._realShader !== shader) {\n            // Same shader owner: active shader is also the same.\n            // Prevent any shader usage to save performance.\n\n            this._realShader = shader;\n\n            if (shader.useDefault()) {\n                // Use the default shader when possible to prevent unnecessary program changes.\n                shader = this.defaultShader;\n            }\n            if (this._shader !== shader || this._shaderOwner !== owner) {\n                this._shader = shader;\n                this._shaderOwner = owner;\n                this._check = true;\n            }\n        }\n    }\n\n    get renderTextureInfo() {\n        return this._renderTextureInfo;\n    }\n\n    setScissor(area) {\n        if (this._scissor !== area) {\n            if (area) {\n                this._scissor = area;\n            } else {\n                this._scissor = null;\n            }\n            this._check = true;\n        }\n    }\n\n    getScissor() {\n        return this._scissor;\n    }\n\n    setRenderTextureInfo(renderTextureInfo) {\n        if (this._renderTextureInfo !== renderTextureInfo) {\n            this._renderTextureInfo = renderTextureInfo;\n            this._scissor = null;\n            this._check = true;\n        }\n    }\n\n    /**\n     * Sets the texturizer to be drawn during subsequent addQuads.\n     * @param {ElementTexturizer} texturizer\n     */\n    setTexturizer(texturizer, cache = false) {\n        this._texturizer = texturizer;\n        this._cacheTexturizer = cache;\n    }\n\n    set isCachingTexturizer(v) {\n        this._isCachingTexturizer = v;\n    }\n\n    get isCachingTexturizer() {\n        return this._isCachingTexturizer;\n    }\n\n    addQuad(elementCore) {\n        if (!this._quadOperation) {\n            this._createQuadOperation();\n        } else if (this._check && this._hasChanges()) {\n            this._finishQuadOperation();\n            this._check = false;\n        }\n\n        let nativeTexture = null;\n        if (this._texturizer) {\n            nativeTexture = this._texturizer.getResultTexture();\n\n            if (!this._cacheTexturizer) {\n                // We can release the temporary texture immediately after finalizing this quad operation.\n                this._temporaryTexturizers.push(this._texturizer);\n            }\n        }\n\n        if (!nativeTexture) {\n            nativeTexture = elementCore._displayedTextureSource.nativeTexture;\n        }\n\n        if (this._renderTextureInfo) {\n            if (this._shader === this.defaultShader && this._renderTextureInfo.empty) {\n                // The texture might be reusable under some conditions. We will check them in ElementCore.renderer.\n                this._renderTextureInfo.nativeTexture = nativeTexture;\n                this._renderTextureInfo.offset = this.length;\n            } else {\n                // It is not possible to reuse another texture when there is more than one quad.\n                this._renderTextureInfo.nativeTexture = null;\n            }\n            this._renderTextureInfo.empty = false;\n        }\n\n        this.quads.quadTextures.push(nativeTexture);\n        this.quads.quadElements.push(elementCore);\n\n        this._quadOperation.length++;\n\n        this.renderer.addQuad(this, this.quads, this.length - 1)\n    }\n\n    finishedRenderTexture() {\n        if (this._renderTextureInfo.nativeTexture) {\n            // There was only one texture drawn in this render texture.\n            // Check if we can reuse it so that we can optimize out an unnecessary render texture operation.\n            // (it should exactly span this render texture).\n            if (!this._isRenderTextureReusable()) {\n                this._renderTextureInfo.nativeTexture = null;\n            }\n        }\n    }\n\n    _isRenderTextureReusable() {\n        const offset = this._renderTextureInfo.offset;\n        return (this.quads.quadTextures[offset].w === this._renderTextureInfo.w) &&\n            (this.quads.quadTextures[offset].h === this._renderTextureInfo.h) &&\n            this.renderer.isRenderTextureReusable(this, this._renderTextureInfo)\n    }\n\n    _hasChanges() {\n        let q = this._quadOperation;\n        if (this._shader !== q.shader) return true;\n        if (this._shaderOwner !== q.shaderOwner) return true;\n        if (this._renderTextureInfo !== q.renderTextureInfo) return true;\n        if (this._scissor !== q.scissor) {\n            if ((this._scissor[0] !== q.scissor[0]) || (this._scissor[1] !== q.scissor[1]) || (this._scissor[2] !== q.scissor[2]) || (this._scissor[3] !== q.scissor[3])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    _finishQuadOperation(create = true) {\n        if (this._quadOperation) {\n            if (this._quadOperation.length || this._shader.addEmpty()) {\n                if (!this._quadOperation.scissor || ((this._quadOperation.scissor[2] > 0) && (this._quadOperation.scissor[3] > 0))) {\n                    // Ignore empty clipping regions.\n                    this.quadOperations.push(this._quadOperation);\n                }\n            }\n\n            if (this._temporaryTexturizers.length) {\n                for (let i = 0, n = this._temporaryTexturizers.length; i < n; i++) {\n                    // We can now reuse these render-to-textures in subsequent stages.\n                    // Huge performance benefit when filtering (fast blur).\n                    this._temporaryTexturizers[i].releaseRenderTexture();\n                }\n                this._temporaryTexturizers = [];\n            }\n\n            this._quadOperation = null;\n        }\n\n        if (create) {\n            this._createQuadOperation();\n        }\n    }\n\n    _createQuadOperation() {\n        this._quadOperation = this.renderer.createCoreQuadOperation(\n            this.ctx,\n            this._shader,\n            this._shaderOwner,\n            this._renderTextureInfo,\n            this._scissor,\n            this.length\n        );\n        this._check = false;\n    }\n\n    finish() {\n        if (this._quadOperation) {\n            // Add remaining.\n            this._finishQuadOperation(false);\n        }\n\n        this.renderer.finishRenderState(this);\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Base functionality for shader setup/destroy.\n */\nexport default class WebGLShaderProgram {\n\n    constructor(vertexShaderSource, fragmentShaderSource) {\n\n        this.vertexShaderSource = vertexShaderSource;\n        this.fragmentShaderSource = fragmentShaderSource;\n\n        this._program = null;\n        this.gl = null;\n\n        this._uniformLocations = new Map();\n        this._attributeLocations = new Map();\n\n        this._currentUniformValues = {};\n    }\n\n    compile(gl) {\n        if (this._program) return;\n\n        this.gl = gl;\n\n        this._program = gl.createProgram();\n\n        let glVertShader = this._glCompile(gl.VERTEX_SHADER, this.vertexShaderSource);\n        let glFragShader = this._glCompile(gl.FRAGMENT_SHADER, this.fragmentShaderSource);\n\n        gl.attachShader(this._program, glVertShader);\n        gl.attachShader(this._program, glFragShader);\n        gl.linkProgram(this._program);\n\n        // if linking fails, then log and cleanup\n        if (!gl.getProgramParameter(this._program, gl.LINK_STATUS)) {\n            console.error('[Lightning] Error: Could not initialize shader.');\n            console.error('[Lightning] gl.VALIDATE_STATUS', gl.getProgramParameter(this._program, gl.VALIDATE_STATUS));\n            console.error('[Lightning] gl.getError()', gl.getError());\n\n            // if there is a program info log, log it\n            if (gl.getProgramInfoLog(this._program) !== '') {\n                console.warn('[Lightning] Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(this._program));\n            }\n\n            gl.deleteProgram(this._program);\n            this._program = null;\n        }\n\n        // clean up some shaders\n        gl.deleteShader(glVertShader);\n        gl.deleteShader(glFragShader);\n    }\n\n    _glCompile(type, src) {\n        let shader = this.gl.createShader(type);\n\n        this.gl.shaderSource(shader, src);\n        this.gl.compileShader(shader);\n\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n            console.error('[Lightning]', this.constructor.name, 'Type: ' + (type === this.gl.VERTEX_SHADER ? 'vertex shader' : 'fragment shader') );\n            console.error('[Lightning]', this.gl.getShaderInfoLog(shader));\n            let idx = 0;\n            console.error('[Lightning]', \"========== source ==========\\n\" + src.split(\"\\n\").map(line => \"\" + (++idx) + \": \" + line).join(\"\\n\"));\n            return null;\n        }\n\n        return shader;\n    }\n\n    getUniformLocation(name) {\n        let location = this._uniformLocations.get(name);\n        if (location === undefined) {\n            location = this.gl.getUniformLocation(this._program, name);\n            this._uniformLocations.set(name, location);\n        }\n\n        return location;\n    }\n\n    getAttribLocation(name) {\n        let location = this._attributeLocations.get(name);\n        if (location === undefined) {\n            location = this.gl.getAttribLocation(this._program, name);\n            this._attributeLocations.set(name, location);\n        }\n\n        return location;\n    }\n\n    destroy() {\n        if (this._program) {\n            this.gl.deleteProgram(this._program);\n        }\n\n        this._attributeLocations = null;\n        this._currentUniformValues = null;\n        this.fragmentShaderSource = null;\n        this._program = null;\n        this.gl = null;\n        this._uniformLocations = null;\n        this.vertexShaderSource = null;  \n\n        delete this.vertexShaderSource;\n        delete this._program;        \n        delete this._currentUniformValues;\n        delete this.fragmentShaderSource;\n        delete this.gl;\n        delete this._uniformLocations;\n        delete this._attributeLocations;\n\n    }\n\n    get glProgram() {\n        return this._program;\n    }\n\n    get compiled() {\n        return !!this._program;\n    }\n\n    _valueEquals(v1, v2) {\n        // Uniform value is either a typed array or a numeric value.\n        if (v1.length && v2.length) {\n            for (let i = 0, n = v1.length; i < n; i++) {\n                if (v1[i] !== v2[i]) return false;\n            }\n            return true;\n        } else {\n            return (v1 === v2);\n        }\n    }\n\n    _valueClone(v) {\n        if (v.length) {\n            return v.slice(0);\n        } else {\n            return v;\n        }\n    }\n\n    setUniformValue(name, value, glFunction) {\n        let v = this._currentUniformValues[name];\n        if (v === undefined || !this._valueEquals(v, value)) {\n            let clonedValue = this._valueClone(value);\n            this._currentUniformValues[name] = clonedValue;\n\n            let loc = this.getUniformLocation(name);\n            if (loc) {\n                let isMatrix = (glFunction === this.gl.uniformMatrix2fv || glFunction === this.gl.uniformMatrix3fv || glFunction === this.gl.uniformMatrix4fv);\n                if (isMatrix) {\n                    glFunction.call(this.gl, loc, false, clonedValue);\n                } else {\n                    glFunction.call(this.gl, loc, clonedValue);\n                }\n            }\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLShaderProgram from \"./WebGLShaderProgram.mjs\";\nimport Shader from \"../../tree/Shader.mjs\";\n\nexport default class WebGLShader extends Shader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        const stage = ctx.stage;\n\n        this._program = stage.renderer.shaderPrograms.get(this.constructor);\n        if (!this._program) {\n            this._program = new WebGLShaderProgram(this.constructor.vertexShaderSource, this.constructor.fragmentShaderSource);\n\n            // Let the vbo context perform garbage collection.\n            stage.renderer.shaderPrograms.set(this.constructor, this._program);\n        }\n\n        this.gl = stage.gl;\n    }\n\n    get glProgram() {\n        return this._program.glProgram;\n    }\n\n    _init() {\n        if (!this._initialized) {\n            this.initialize();\n            this._initialized = true;\n        }\n    }\n\n    initialize() {\n        this._program.compile(this.gl);\n    }\n\n    get initialized() {\n        return this._initialized;\n    }\n\n    _uniform(name) {\n        return this._program.getUniformLocation(name);\n    }\n\n    _attrib(name) {\n        return this._program.getAttribLocation(name);\n    }\n\n    _setUniform(name, value, glFunction) {\n        this._program.setUniformValue(name, value, glFunction);\n    }\n\n    useProgram() {\n        this._init();\n        this.gl.useProgram(this.glProgram);\n        this.beforeUsage();\n        this.enableAttribs();\n    }\n\n    stopProgram() {\n        this.afterUsage();\n        this.disableAttribs();\n    }\n\n    hasSameProgram(other) {\n        // For performance reasons, we first check for identical references.\n        return (other && ((other === this) || (other._program === this._program)));\n    }\n\n    beforeUsage() {\n        // Override to set settings other than the default settings (blend mode etc).\n    }\n\n    afterUsage() {\n        // All settings changed in beforeUsage should be reset here.\n    }\n\n    enableAttribs() {\n\n    }\n\n    disableAttribs() {\n\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 0;\n    }\n\n    getVertexAttribPointerOffset(operation) {\n        return operation.extraAttribsDataByteOffset - operation.index * 4 * this.getExtraAttribBytesPerVertex();\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        // Set extra attrib data in in operation.quads.data/floats/uints, starting from\n        // operation.extraAttribsBufferByteOffset.\n    }\n\n    setupUniforms(operation) {\n        // Set all shader-specific uniforms.\n        // Notice that all uniforms should be set, even if they have not been changed within this shader instance.\n        // The uniforms are shared by all shaders that have the same type (and shader program).\n    }\n\n    _getProjection(operation) {\n        return operation.getProjection();\n    }\n\n    getFlipY(operation) {\n        return this._getProjection(operation)[1] < 0;\n    }\n\n    beforeDraw(operation) {\n    }\n\n    draw(operation) {\n    }\n\n    afterDraw(operation) {\n    }\n\n    cleanup() {\n        this._initialized = false;\n        // Program takes little resources, so it is only destroyed when the full stage is destroyed.\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLShader from \"../WebGLShader.mjs\";\n\nexport default class DefaultShader extends WebGLShader {\n\n    enableAttribs() {\n        // Enables the attribs in the shader program.\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aVertexPosition\"), 2, gl.FLOAT, false, 20, 0);\n        gl.enableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.vertexAttribPointer(this._attrib(\"aTextureCoord\"), 2, gl.FLOAT, false, 20, 2 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            // Some shaders may ignore the color.\n            gl.vertexAttribPointer(this._attrib(\"aColor\"), 4, gl.UNSIGNED_BYTE, true, 20, 4 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    disableAttribs() {\n        // Disables the attribs in the shader program.\n        let gl = this.gl;\n        gl.disableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    setupUniforms(operation) {\n        this._setUniform(\"projection\", this._getProjection(operation), this.gl.uniform2fv, false);\n    }\n\n    draw(operation) {\n        let gl = this.gl;\n\n        let length = operation.length;\n\n        if (length) {\n            let glTexture = operation.getTexture(0);\n            let pos = 0;\n            for (let i = 0; i < length; i++) {\n                let tx = operation.getTexture(i);\n                if (glTexture !== tx) {\n                    gl.bindTexture(gl.TEXTURE_2D, glTexture);\n                    gl.drawElements(gl.TRIANGLES, 6 * (i - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n                    glTexture = tx;\n                    pos = i;\n                }\n            }\n            \n            gl.bindTexture(gl.TEXTURE_2D, glTexture);\n            gl.drawElements(gl.TRIANGLES, 6 * (length - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n        }\n    }\n\n}\n\nDefaultShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nDefaultShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Renderer {\n\n    constructor(stage) {\n        this.stage = stage;\n        this._defaultShader = undefined;\n    }\n\n    gc(aggressive) {\n    }\n\n    destroy() {\n    }\n\n    getDefaultShader(ctx = this.stage.ctx) {\n        if (!this._defaultShader) {\n            this._defaultShader = this._createDefaultShader(ctx);\n        }\n        return this._defaultShader;\n    }\n\n    _createDefaultShader(ctx) {\n    }\n\n    isValidShaderType(shaderType) {\n        return (shaderType.prototype instanceof this._getShaderBaseType());\n    }\n\n    createShader(ctx, settings) {\n        const shaderType = settings.type;\n        // If shader type is not correct, use a different platform.\n        if (!this.isValidShaderType(shaderType)) {\n            const convertedShaderType = this._getShaderAlternative(shaderType);\n            if (!convertedShaderType) {\n                console.warn(\"[Lightning] Shader has no implementation for render target: \" + shaderType.name);\n                return this._createDefaultShader(ctx);\n            }\n            return new convertedShaderType(ctx);\n        } else {\n            const shader = new shaderType(ctx);\n            Base.patchObject(this, settings);\n            return shader;\n        }\n    }\n\n    _getShaderBaseType() {\n    }\n\n    _getShaderAlternative(shaderType) {\n        return this.getDefaultShader();\n    }\n\n    copyRenderTexture(renderTexture, nativeTexture, options) {\n        console.warn('[Lightning] copyRenderTexture not supported by renderer');\n    }\n}\n\nimport Base from \"../tree/Base.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../../tree/Utils.mjs\";\nimport StageUtils from \"../../tree/StageUtils.mjs\";\nimport WebGLCoreQuadList from \"./WebGLCoreQuadList.mjs\";\nimport WebGLCoreQuadOperation from \"./WebGLCoreQuadOperation.mjs\";\nimport WebGLCoreRenderExecutor from \"./WebGLCoreRenderExecutor.mjs\";\nimport CoreRenderState from \"../../tree/core/CoreRenderState.mjs\";\nimport DefaultShader from \"./shaders/DefaultShader.mjs\";\nimport WebGLShader from \"./WebGLShader.mjs\";\nimport Renderer from \"../Renderer.mjs\";\n\nexport default class WebGLRenderer extends Renderer {\n\n    constructor(stage) {\n        super(stage);\n        this.shaderPrograms = new Map();\n        this._compressedTextureExtensions = {\n            astc: stage.gl.getExtension('WEBGL_compressed_texture_astc'),\n            etc1: stage.gl.getExtension('WEBGL_compressed_texture_etc1'),\n            s3tc: stage.gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            pvrtc: stage.gl.getExtension('WEBGL_compressed_texture_pvrtc'),\n        }\n    }\n\n    getCompressedTextureExtensions() {\n        return this._compressedTextureExtensions\n    }\n\n    destroy() {\n        this.shaderPrograms.forEach(shaderProgram => shaderProgram.destroy());\n\n        this.shaderPrograms = null;\n        this._compressedTextureExtensions = null;\n\n        delete this.shaderPrograms;\n        delete this._compressedTextureExtensions;\n    }\n\n    _createDefaultShader(ctx) {\n        return new DefaultShader(ctx);\n    }\n\n    _getShaderBaseType() {\n        return WebGLShader\n    }\n\n    _getShaderAlternative(shaderType) {\n        return shaderType.getWebGL && shaderType.getWebGL();\n    }\n\n    createCoreQuadList(ctx) {\n        return new WebGLCoreQuadList(ctx);\n    }\n\n    createCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n        return new WebGLCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\n    }\n\n    createCoreRenderExecutor(ctx) {\n        return new WebGLCoreRenderExecutor(ctx);\n    }\n\n    createCoreRenderState(ctx) {\n        return new CoreRenderState(ctx);\n    }\n\n    createRenderTexture(w, h, pw, ph) {\n        const gl = this.stage.gl;\n        const glTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pw, ph, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        glTexture.params = {};\n        glTexture.params[gl.TEXTURE_MAG_FILTER] = gl.LINEAR;\n        glTexture.params[gl.TEXTURE_MIN_FILTER] = gl.LINEAR;\n        glTexture.params[gl.TEXTURE_WRAP_S] = gl.CLAMP_TO_EDGE;\n        glTexture.params[gl.TEXTURE_WRAP_T] = gl.CLAMP_TO_EDGE;\n        glTexture.options = { format: gl.RGBA, internalFormat: gl.RGBA, type: gl.UNSIGNED_BYTE };\n\n        // We need a specific framebuffer for every render texture.\n        glTexture.framebuffer = gl.createFramebuffer();\n        glTexture.projection = new Float32Array([2 / w, 2 / h]);\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glTexture.framebuffer);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, glTexture, 0);\n\n        return glTexture;\n    }\n\n    freeRenderTexture(glTexture) {\n        let gl = this.stage.gl;\n        gl.deleteFramebuffer(glTexture.framebuffer);\n        gl.deleteTexture(glTexture);\n    }\n\n    _getBytesPerPixel(fmt, type) {\n        const gl = this.stage.gl;\n\n        if (fmt === gl.RGBA) {\n            switch (type) {\n                case gl.UNSIGNED_BYTE:\n                    return 4;\n\n                case gl.UNSIGNED_SHORT_4_4_4_4:\n                    return 2;\n\n                case gl.UNSIGNED_SHORT_5_5_5_1:\n                    return 2;\n\n                default:\n                    throw new Error('Invalid type specified for GL_RGBA format');\n            }\n        }\n        else if (fmt === gl.RGB) {\n            switch (type) {\n                case gl.UNSIGNED_BYTE:\n                    return 3;\n\n                case gl.UNSIGNED_BYTE_5_6_5:\n                    return 2;\n\n                default:\n                    throw new Error('Invalid type specified for GL_RGB format');\n            }\n        }\n        else {\n            throw new Error('Invalid format specified in call to _getBytesPerPixel()');\n        }\n    }\n\n    uploadTextureSource(textureSource, options) {\n        const gl = this.stage.gl;\n\n        const source = options.source;\n        let compressed = false;\n        if (options.renderInfo) {\n            compressed = options.renderInfo.compressed || false\n        }\n\n        const format = {\n            premultiplyAlpha: true,\n            hasAlpha: true\n        };\n\n        if (options && options.hasOwnProperty('premultiplyAlpha')) {\n            format.premultiplyAlpha = options.premultiplyAlpha;\n        }\n\n        if (options && options.hasOwnProperty('flipBlueRed')) {\n            format.flipBlueRed = options.flipBlueRed;\n        }\n\n        if (options && options.hasOwnProperty('hasAlpha')) {\n            format.hasAlpha = options.hasAlpha;\n        }\n\n        if (!format.hasAlpha) {\n            format.premultiplyAlpha = false;\n        }\n\n        format.texParams = options.texParams || {}\n        format.texOptions = options.texOptions || {}\n\n        let glTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, format.premultiplyAlpha);\n\n        if (Utils.isNode) {\n            gl.pixelStorei(gl.UNPACK_FLIP_BLUE_RED, !!format.flipBlueRed);\n        }\n\n        const texParams = format.texParams;\n        if (!texParams[gl.TEXTURE_MAG_FILTER]) texParams[gl.TEXTURE_MAG_FILTER] = gl.LINEAR;\n        if (!texParams[gl.TEXTURE_MIN_FILTER]) texParams[gl.TEXTURE_MIN_FILTER] = gl.LINEAR;\n        if (!texParams[gl.TEXTURE_WRAP_S]) texParams[gl.TEXTURE_WRAP_S] = gl.CLAMP_TO_EDGE;\n        if (!texParams[gl.TEXTURE_WRAP_T]) texParams[gl.TEXTURE_WRAP_T] = gl.CLAMP_TO_EDGE;\n\n        Object.keys(texParams).forEach(key => {\n            const value = texParams[key];\n            gl.texParameteri(gl.TEXTURE_2D, parseInt(key), value);\n        });\n\n        if (compressed) {\n            this.stage.platform.uploadCompressedGlTexture(gl, textureSource, source);\n            return glTexture;\n        }\n         \n        const texOptions = format.texOptions;\n        texOptions.format = texOptions.format || (format.hasAlpha ? gl.RGBA : gl.RGB);\n        texOptions.type = texOptions.type || gl.UNSIGNED_BYTE;\n        texOptions.internalFormat = texOptions.internalFormat || texOptions.format;\n        if (options && options.imageRef) {\n            texOptions.imageRef = options.imageRef;\n        }\n        \n        this.stage.platform.uploadGlTexture(gl, textureSource, source, texOptions);\n        \n        glTexture.params = Utils.cloneObjShallow(texParams);\n        glTexture.options = Utils.cloneObjShallow(texOptions);\n\n        // calculate bytes per pixel for vram usage tracking\n        glTexture.bytesPerPixel = this._getBytesPerPixel(texOptions.format, texOptions.type);\n\n        return glTexture;\n    }\n\n    freeTextureSource(textureSource) {\n        this.stage.gl.deleteTexture(textureSource.nativeTexture);\n    }\n\n    addQuad(renderState, quads, index) {\n        let offset = (index * 20);\n        const elementCore = quads.quadElements[index];\n\n        let r = elementCore._renderContext;\n\n        let floats = renderState.quads.floats;\n        let uints = renderState.quads.uints;\n        const mca = StageUtils.mergeColorAlpha;\n\n        if (r.tb !== 0 || r.tc !== 0) {\n            floats[offset++] = r.px;\n            floats[offset++] = r.py;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUl, r.alpha);\n            floats[offset++] = r.px + elementCore._w * r.ta;\n            floats[offset++] = r.py + elementCore._w * r.tc;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUr, r.alpha);\n            floats[offset++] = r.px + elementCore._w * r.ta + elementCore._h * r.tb;\n            floats[offset++] = r.py + elementCore._w * r.tc + elementCore._h * r.td;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._bry;\n            uints[offset++] = mca(elementCore._colorBr, r.alpha);\n            floats[offset++] = r.px + elementCore._h * r.tb;\n            floats[offset++] = r.py + elementCore._h * r.td;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._bry;\n            uints[offset] = mca(elementCore._colorBl, r.alpha);\n        } else {\n            // Simple.\n            let cx = r.px + elementCore._w * r.ta;\n            let cy = r.py + elementCore._h * r.td;\n\n            floats[offset++] = r.px;\n            floats[offset++] = r.py;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUl, r.alpha);\n            floats[offset++] = cx;\n            floats[offset++] = r.py;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUr, r.alpha);\n            floats[offset++] = cx;\n            floats[offset++] = cy;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._bry;\n            uints[offset++] = mca(elementCore._colorBr, r.alpha);\n            floats[offset++] = r.px;\n            floats[offset++] = cy;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._bry;\n            uints[offset] = mca(elementCore._colorBl, r.alpha);\n        }\n    }\n\n    isRenderTextureReusable(renderState, renderTextureInfo) {\n        let offset = (renderState._renderTextureInfo.offset * 80) / 4;\n        let floats = renderState.quads.floats;\n        let uints = renderState.quads.uints;\n        return ((floats[offset] === 0) &&\n            (floats[offset + 1] === 0) &&\n            (floats[offset + 2] === 0) &&\n            (floats[offset + 3] === 0) &&\n            (uints[offset + 4] === 0xFFFFFFFF) &&\n            (floats[offset + 5] === renderTextureInfo.w) &&\n            (floats[offset + 6] === 0) &&\n            (floats[offset + 7] === 1) &&\n            (floats[offset + 8] === 0) &&\n            (uints[offset + 9] === 0xFFFFFFFF) &&\n            (floats[offset + 10] === renderTextureInfo.w) &&\n            (floats[offset + 11] === renderTextureInfo.h) &&\n            (floats[offset + 12] === 1) &&\n            (floats[offset + 13] === 1) &&\n            (uints[offset + 14] === 0xFFFFFFFF) &&\n            (floats[offset + 15] === 0) &&\n            (floats[offset + 16] === renderTextureInfo.h) &&\n            (floats[offset + 17] === 0) &&\n            (floats[offset + 18] === 1) &&\n            (uints[offset + 19] === 0xFFFFFFFF));\n    }\n\n    finishRenderState(renderState) {\n        // Set extra shader attribute data.\n        let offset = renderState.length * 80;\n        for (let i = 0, n = renderState.quadOperations.length; i < n; i++) {\n            renderState.quadOperations[i].extraAttribsDataByteOffset = offset;\n            let extra = renderState.quadOperations[i].shader.getExtraAttribBytesPerVertex() * 4 * renderState.quadOperations[i].length;\n            offset += extra;\n            if (extra) {\n                renderState.quadOperations[i].shader.setExtraAttribsInBuffer(renderState.quadOperations[i], renderState.quads);\n            }\n        }\n        renderState.quads.dataLength = offset;\n    }\n\n    copyRenderTexture(renderTexture, nativeTexture, options) {\n        const gl = this.stage.gl;\n        gl.bindTexture(gl.TEXTURE_2D, nativeTexture);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, renderTexture.framebuffer);\n        const precision = renderTexture.precision;\n        gl.copyTexSubImage2D(\n            gl.TEXTURE_2D,\n            0,\n            precision * (options.sx || 0),\n            precision * (options.sy || 0),\n            precision * (options.x || 0),\n            precision * (options.y || 0),\n            precision * (options.w || renderTexture.ow),\n            precision * (options.h || renderTexture.oh));\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadList from \"../../tree/core/CoreQuadList.mjs\";\n\nexport default class C2dCoreQuadList extends CoreQuadList {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this.renderContexts = [];\n        this.modes = [];\n    }\n\n    setRenderContext(index, v) {\n        this.renderContexts[index] = v;\n    }\n\n    setSimpleTc(index, v) {\n        if (v) {\n            this.modes[index] |= 1;\n        } else {\n            this.modes[index] -= (this.modes[index] & 1);\n        }\n    }\n\n    setWhite(index, v) {\n        if (v) {\n            this.modes[index] |= 2;\n        } else {\n            this.modes[index] -= (this.modes[index] & 2);\n        }\n    }\n\n    getRenderContext(index) {\n        return this.renderContexts[index];\n    }\n\n    getSimpleTc(index) {\n        return (this.modes[index] & 1);\n    }\n\n    getWhite(index) {\n        return (this.modes[index] & 2);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadOperation from \"../../tree/core/CoreQuadOperation.mjs\";\n\nexport default class C2dCoreQuadOperation extends CoreQuadOperation {\n\n    getRenderContext(index) {\n        return this.quads.getRenderContext(this.index + index);\n    }\n\n    getSimpleTc(index) {\n        return this.quads.getSimpleTc(this.index + index);\n    }\n\n    getWhite(index) {\n        return this.quads.getWhite(this.index + index);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreRenderExecutor from \"../../tree/core/CoreRenderExecutor.mjs\";\nimport StageUtils from \"../../tree/StageUtils.mjs\";\nimport Utils from \"../../tree/Utils.mjs\";\n\nexport default class C2dCoreRenderExecutor extends CoreRenderExecutor {\n\n    init() {\n        this._mainRenderTexture = this.ctx.stage.getCanvas();\n    }\n\n    _renderQuadOperation(op) {\n        let shader = op.shader;\n\n        if (op.length || op.shader.addEmpty()) {\n            const target = this._renderTexture || this._mainRenderTexture;\n            shader.beforeDraw(op, target);\n            shader.draw(op, target);\n            shader.afterDraw(op, target);\n        }\n    }\n\n    _clearRenderTexture() {\n        const ctx = this._getContext();\n\n        let clearColor = [0, 0, 0, 0];\n        if (this._mainRenderTexture.ctx === ctx) {\n            clearColor = this.ctx.stage.getClearColor();\n        }\n\n        const renderTexture = ctx.canvas;\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        if (!clearColor[0] && !clearColor[1] && !clearColor[2] && !clearColor[3]) {\n            ctx.clearRect(0, 0, renderTexture.width, renderTexture.height);\n        } else {\n            ctx.fillStyle = StageUtils.getRgbaStringFromArray(clearColor);\n            // Do not use fillRect because it produces artifacts.\n            ctx.globalCompositeOperation = 'copy';\n            ctx.beginPath();\n            ctx.rect(0, 0, renderTexture.width, renderTexture.height);\n            ctx.closePath();\n            ctx.fill();\n            ctx.globalCompositeOperation = 'source-over';\n        }\n    }\n    \n    _getContext() {\n        if (this._renderTexture) {\n            return this._renderTexture.ctx;\n        } else {\n            return this._mainRenderTexture.ctx;\n        } \n    }\n\n    _restoreContext() {\n        const ctx = this._getContext();\n        ctx.restore();\n        ctx.save();\n        ctx._scissor = null;\n    }\n\n    _setScissor(area) {\n        const ctx = this._getContext();\n\n        if (!C2dCoreRenderExecutor._equalScissorAreas(ctx.canvas, ctx._scissor, area)) {\n            // Clipping is stored in the canvas context state.\n            // We can't reset clipping alone so we need to restore the full context.\n            this._restoreContext();\n\n            let precision = this.ctx.stage.getRenderPrecision();\n            if (area) {\n                ctx.beginPath();\n                ctx.rect(Math.round(area[0] * precision), Math.round(area[1] * precision), Math.round(area[2] * precision), Math.round(area[3] * precision));\n                ctx.closePath();\n                ctx.clip();\n            }\n            ctx._scissor = area;\n        }\n    }\n\n    static _equalScissorAreas(canvas, area, current) {\n        if (!area) {\n            area = [0, 0, canvas.width, canvas.height]\n        }\n        if (!current) {\n            current = [0, 0, canvas.width, canvas.height]\n        }\n        return Utils.equalValues(area, current)\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Shader from \"../../tree/Shader.mjs\";\n\nexport default class C2dShader extends Shader {\n\n    beforeDraw(operation) {\n    }\n\n    draw(operation) {\n    }\n\n    afterDraw(operation) {\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport C2dShader from \"../C2dShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class DefaultShader extends C2dShader {\n\n    constructor(ctx) {\n        super(ctx);\n        this._rectangleTexture = ctx.stage.rectangleTexture.source.nativeTexture;\n        this._tintManager = this.ctx.stage.renderer.tintManager;\n    }\n\n    draw(operation, target) {\n        const ctx = target.ctx;\n        let length = operation.length;\n        for (let i = 0; i < length; i++) {\n            const tx = operation.getTexture(i);\n            if (!tx) continue;\n            const vc = operation.getElementCore(i);\n            const rc = operation.getRenderContext(i);\n            const white = operation.getWhite(i);\n            const stc = operation.getSimpleTc(i);\n\n            //@todo: try to optimize out per-draw transform setting. split translate, transform.\n            const precision = this.ctx.stage.getRenderPrecision();\n            ctx.setTransform(rc.ta * precision, rc.tc * precision, rc.tb * precision, rc.td * precision, rc.px * precision, rc.py * precision);\n\n            const rect = (tx === this._rectangleTexture);\n            const info = {operation, target, index: i, rect};\n\n            if (rect) {\n                // Check for gradient.\n                if (white) {\n                    ctx.fillStyle = 'white';\n                } else {\n                    this._setColorGradient(ctx, vc);\n                }\n\n                ctx.globalAlpha = rc.alpha;\n                this._beforeDrawEl(info);\n                ctx.fillRect(0, 0, vc.w, vc.h);\n                this._afterDrawEl(info);\n                ctx.globalAlpha = 1.0;\n            } else {\n                // @todo: set image smoothing based on the texture.\n\n                // @todo: optimize by registering whether identity texcoords are used.\n                ctx.globalAlpha = rc.alpha;\n                this._beforeDrawEl(info);\n\n                // @todo: test if rounding yields better performance.\n\n                // Notice that simple texture coords can be turned on even though vc._ulx etc are not simple, because\n                //  we are rendering a render-to-texture (texcoords were stashed). Same is true for 'white' color btw.\n                const sourceX = stc ? 0 : (vc._ulx * tx.w);\n                const sourceY = stc ? 0 : (vc._uly * tx.h);\n                const sourceW = (stc ? 1 : (vc._brx - vc._ulx)) * tx.w;\n                const sourceH = (stc ? 1 : (vc._bry - vc._uly)) * tx.h;\n\n                let colorize = !white;\n                if (colorize) {\n                    // @todo: cache the tint texture for better performance.\n\n                    // Draw to intermediate texture with background color/gradient.\n                    // This prevents us from having to create a lot of render texture canvases.\n\n                    // Notice that we don't support (non-rect) gradients, only color tinting for c2d. We'll just take the average color.\n                    let color = vc._colorUl;\n                    if (vc._colorUl !== vc._colorUr || vc._colorUr !== vc._colorBl || vc._colorBr !== vc._colorBl) {\n                        color = StageUtils.mergeMultiColorsEqual([vc._colorUl, vc._colorUr, vc._colorBl, vc._colorBr]);\n                    }\n\n                    const alpha = ((color / 16777216) | 0) / 255.0;\n                    ctx.globalAlpha *= alpha;\n\n                    const rgb = color & 0x00FFFFFF;\n                    const tintTexture = this._tintManager.getTintTexture(tx, rgb);\n\n                    // Actually draw result.\n                    ctx.fillStyle = 'white';\n                    ctx.drawImage(tintTexture, sourceX, sourceY, sourceW, sourceH, 0, 0, vc.w, vc.h);\n                } else {\n                    ctx.fillStyle = 'white';\n                    ctx.drawImage(tx, sourceX, sourceY, sourceW, sourceH, 0, 0, vc.w, vc.h);\n                }\n                this._afterDrawEl(info);\n                ctx.globalAlpha = 1.0;\n            }\n        }\n    }\n\n    _setColorGradient(ctx, vc, w = vc.w, h = vc.h, transparency = true) {\n        let color = vc._colorUl;\n        let gradient;\n        //@todo: quick single color check.\n        //@todo: cache gradient/fill style (if possible, probably context-specific).\n\n        if (vc._colorUl === vc._colorUr) {\n            if (vc._colorBl === vc._colorBr) {\n                if (vc._colorUl === vc._colorBl) {\n                    // Single color.\n                } else {\n                    // Vertical gradient.\n                    gradient = ctx.createLinearGradient(0, 0, 0, h);\n                    if (transparency) {\n                        gradient.addColorStop(0, StageUtils.getRgbaString(vc._colorUl));\n                        gradient.addColorStop(1, StageUtils.getRgbaString(vc._colorBl));\n                    } else {\n                        gradient.addColorStop(0, StageUtils.getRgbString(vc._colorUl));\n                        gradient.addColorStop(1, StageUtils.getRgbString(vc._colorBl));\n\n                    }\n                }\n            } else {\n                // Not supported gradient.\n            }\n        } else {\n            if (vc._colorUl === vc._colorBl && vc._colorUr === vc._colorBr) {\n                // Horizontal gradient.\n                gradient = ctx.createLinearGradient(0, 0, w, 0);\n                if (transparency) {\n                    gradient.addColorStop(0, StageUtils.getRgbaString(vc._colorUl));\n                    gradient.addColorStop(1, StageUtils.getRgbaString(vc._colorBr));\n                } else {\n                    gradient.addColorStop(0, StageUtils.getRgbString(vc._colorUl));\n                    gradient.addColorStop(1, StageUtils.getRgbString(vc._colorBr));\n                }\n            }\n        }\n\n        if (gradient) {\n            ctx.fillStyle = gradient;\n        } else {\n            ctx.fillStyle = transparency ? StageUtils.getRgbaString(color) : StageUtils.getRgbString(color);\n        }\n    }\n\n    _beforeDrawEl(info) {\n    }\n\n    _afterDrawEl(info) {\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class C2dTextureTintManager {\n\n    constructor(stage) {\n        this.stage = stage;\n        this._usedMemory = 0;\n        this._cachedNativeTextures = new Set();\n    }\n\n    destroy() {\n        this.gc(true);\n\n        this.stage = null;\n        delete this.stage;\n    }\n\n    _addMemoryUsage(delta) {\n        this._usedMemory += delta;\n\n        this.stage.addMemoryUsage(delta);\n    }\n\n    delete(nativeTexture) {\n        // Should be called when native texture is cleaned up.\n        if (this._hasCache(nativeTexture)) {\n            const cache = this._getCache(nativeTexture);\n            const prevMemUsage = cache.memoryUsage;\n            cache.clear();\n            this._cachedNativeTextures.delete(nativeTexture);\n            this._addMemoryUsage(cache.memoryUsage - prevMemUsage);\n        }\n    }\n\n    getTintTexture(nativeTexture, color) {\n        const frame = this.stage.frameCounter;\n\n        this._cachedNativeTextures.add(nativeTexture);\n\n        const cache = this._getCache(nativeTexture);\n\n        const item = cache.get(color);\n        item.lf = frame;\n\n        if (item.tx) {\n            if (nativeTexture.update > item.u) {\n                // Native texture was updated in the mean time: renew.\n                this._tintTexture(item.tx, nativeTexture, color)\n            }\n\n            return item.tx;\n        } else {\n            const before = cache.memoryUsage;\n\n            // Find blanco tint texture.\n            let target = cache.reuseTexture(frame);\n            if (target) {\n                target.ctx.clearRect(0, 0, target.width, target.height);\n            } else {\n                // Allocate new.\n                target = document.createElement('canvas');\n                target.width = nativeTexture.w;\n                target.height = nativeTexture.h;\n                target.ctx = target.getContext('2d');\n            }\n\n            this._tintTexture(target, nativeTexture, color);\n            cache.set(color, target, frame);\n\n            const after = cache.memoryUsage;\n\n            if (after !== before) {\n                this._addMemoryUsage(after - before);\n            }\n\n            return target;\n        }\n    }\n\n    _tintTexture(target, source, color) {\n        let col = color.toString(16);\n        while (col.length < 6) {\n            col = \"0\" + col;\n        }\n        target.ctx.fillStyle = '#' + col;\n        target.ctx.globalCompositeOperation = 'copy';\n        target.ctx.fillRect(0, 0, source.w, source.h);\n        target.ctx.globalCompositeOperation = 'multiply';\n        target.ctx.drawImage(source, 0, 0, source.w, source.h, 0, 0, target.width, target.height);\n\n        // Alpha-mix the texture.\n        target.ctx.globalCompositeOperation = 'destination-in';\n        target.ctx.drawImage(source, 0, 0, source.w, source.h, 0, 0, target.width, target.height);\n    }\n\n    _hasCache(nativeTexture) {\n        return !!nativeTexture._tintCache;\n    }\n\n    _getCache(nativeTexture) {\n        if (!nativeTexture._tintCache) {\n            nativeTexture._tintCache = new C2dTintCache(nativeTexture);\n        }\n        return nativeTexture._tintCache;\n    }\n\n    gc(aggressive = false) {\n        const frame = this.stage.frameCounter;\n        let delta = 0;\n        this._cachedNativeTextures.forEach(texture => {\n            const cache = this._getCache(texture);\n            if (aggressive) {\n                delta += cache.memoryUsage;\n                cache.clear();\n            } else {\n                const before = cache.memoryUsage;\n                cache.cleanup(frame);\n                cache.releaseBlancoTextures();\n                delta += (cache.memoryUsage - before);\n            }\n        });\n\n        if (aggressive) {\n            this._cachedNativeTextures.clear();\n        }\n\n        if (delta) {\n            this._addMemoryUsage(delta);\n        }\n    }\n\n}\n\nclass C2dTintCache {\n\n    constructor(nativeTexture) {\n        this._tx = nativeTexture;\n        this._colors = new Map();\n        this._blancoTextures = null;\n        this._lastCleanupFrame = 0;\n        this._memTextures = 0;\n    }\n\n    get memoryUsage() {\n        return this._memTextures * this._tx.w * this._tx.h;\n    }\n\n    releaseBlancoTextures() {\n        this._memTextures -= this._blancoTextures.length;\n        this._blancoTextures = [];\n    }\n\n    clear() {\n        // Dereference the textures.\n        this._blancoTextures = null;\n        this._colors.clear();\n        this._memTextures = 0;\n    }\n\n    get(color) {\n        let item = this._colors.get(color);\n        if (!item) {\n            item = {lf: -1, tx: undefined, u: -1};\n            this._colors.set(color, item);\n        }\n        return item;\n    }\n\n    set(color, texture, frame) {\n        const item = this.get(color);\n        item.lf = frame;\n        item.tx = texture;\n        item.u = frame;\n        this._memTextures++;\n    }\n\n    cleanup(frame) {\n        // We only need to clean up once per frame.\n        if (this._lastCleanupFrame !== frame) {\n\n            // We limit blanco textures reuse to one frame only to prevent memory usage growth.\n            this._blancoTextures = [];\n\n            this._colors.forEach((item, color) => {\n                // Clean up entries that were not used last frame.\n                if (item.lf < frame - 1) {\n                    if (item.tx) {\n                        // Keep as reusable blanco texture.\n                        this._blancoTextures.push(item.tx);\n                    }\n                    this._colors.delete(color);\n                }\n            });\n\n            this._lastCleanupFrame = frame;\n        }\n    }\n\n    reuseTexture(frame) {\n        // Try to reuse textures, because creating them every frame is expensive.\n        this.cleanup(frame);\n        if (this._blancoTextures && this._blancoTextures.length) {\n            this._memTextures--;\n            return this._blancoTextures.pop();\n        }\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport C2dCoreQuadList from \"./C2dCoreQuadList.mjs\";\nimport C2dCoreQuadOperation from \"./C2dCoreQuadOperation.mjs\";\nimport C2dCoreRenderExecutor from \"./C2dCoreRenderExecutor.mjs\";\nimport CoreRenderState from \"../../tree/core/CoreRenderState.mjs\";\nimport DefaultShader from \"./shaders/DefaultShader.mjs\";\nimport C2dShader from \"./C2dShader.mjs\";\nimport Renderer from \"../Renderer.mjs\";\nimport TextureTintManager from \"./C2dTextureTintManager.mjs\";\n\nexport default class C2dRenderer extends Renderer {\n\n    constructor(stage) {\n        super(stage);\n\n        this.tintManager = new TextureTintManager(stage);\n\n        this.setupC2d(this.stage.c2d.canvas);\n    }\n\n    destroy() {\n        this.tintManager.destroy();\n\n        this.tintManager = null;\n        delete this.tintManager;\n    }\n\n    _createDefaultShader(ctx) {\n        return new DefaultShader(ctx);\n    }\n\n    _getShaderBaseType() {\n        return C2dShader\n    }\n\n    _getShaderAlternative(shaderType) {\n        return shaderType.getC2d && shaderType.getC2d();\n    }\n\n    createCoreQuadList(ctx) {\n        return new C2dCoreQuadList(ctx);\n    }\n\n    createCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n        return new C2dCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\n    }\n\n    createCoreRenderExecutor(ctx) {\n        return new C2dCoreRenderExecutor(ctx);\n    }\n    \n    createCoreRenderState(ctx) {\n        return new CoreRenderState(ctx);\n    }\n\n    createRenderTexture(w, h, pw, ph) {\n        const canvas = document.createElement('canvas');\n        canvas.width = pw;\n        canvas.height = ph;\n        this.setupC2d(canvas);\n        return canvas;\n    }\n    \n    freeRenderTexture(nativeTexture) {\n        this.tintManager.delete(nativeTexture);\n    }\n\n    gc(aggressive) {\n        this.tintManager.gc(aggressive);\n    }\n\n    uploadTextureSource(textureSource, options) {\n        // For canvas, we do not need to upload.\n        if (options.source.buffer) {\n            // Convert RGBA buffer to canvas.\n            const canvas = document.createElement('canvas');\n            canvas.width = options.w;\n            canvas.height = options.h;\n\n            const imageData = new ImageData(new Uint8ClampedArray(options.source.buffer), options.w, options.h);\n            canvas.getContext('2d').putImageData(imageData, 0, 0);\n            return canvas;\n        }\n\n        return options.source;\n    }\n\n    freeTextureSource(textureSource) {\n        this.tintManager.delete(textureSource.nativeTexture);\n    }\n\n    addQuad(renderState, quads, index) {\n        // Render context changes while traversing so we save it by ref.\n        const elementCore = quads.quadElements[index];\n        quads.setRenderContext(index, elementCore._renderContext);\n        quads.setWhite(index, elementCore.isWhite());\n        quads.setSimpleTc(index, elementCore.hasSimpleTexCoords());\n    }\n\n    isRenderTextureReusable(renderState, renderTextureInfo) {\n        // @todo: check render coords/matrix, maybe move this to core?\n        return false;\n    }\n\n    finishRenderState(renderState) {\n    }\n\n    setupC2d(canvas) {\n        const ctx = canvas.getContext('2d');\n        canvas.ctx = ctx;\n\n        ctx._scissor = null;\n\n        // Save base state so we can restore the defaults later.\n        canvas.ctx.save();\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLShader from \"../../webgl/WebGLShader.mjs\";\n\nexport default class SparkShader extends WebGLShader {\n\n    enableAttribs() {\n        // Enables the attribs in the shader program.\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aVertexPosition\"), 2, gl.FLOAT, false, 20, 0);\n        gl.enableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.vertexAttribPointer(this._attrib(\"aTextureCoord\"), 2, gl.FLOAT, false, 20, 2 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            // Some shaders may ignore the color.\n            gl.vertexAttribPointer(this._attrib(\"aColor\"), 4, gl.UNSIGNED_BYTE, true, 20, 4 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    disableAttribs() {\n        // Disables the attribs in the shader program.\n        let gl = this.gl;\n        gl.disableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    setupUniforms(operation) {\n        this._setUniform(\"projection\", this._getProjection(operation), this.gl.uniform2fv, false);\n    }\n\n    draw(operation) {\n        let gl = this.gl;\n\n        let length = operation.length;\n\n        if (length) {\n            let glTexture = operation.getTexture(0);\n            let pos = 0;\n            for (let i = 0; i < length; i++) {\n                let tx = operation.getTexture(i);\n                if (glTexture !== tx) {\n                    if (glTexture.options && glTexture.options.imageRef) {\n                        let elementPostion = (i > 0) ? (i - 1) : i;\n                        const precision = this.ctx.stage.getOption('precision');\n                        let vc = operation.getElementCore(elementPostion);\n                        this.ctx.stage.platform.paint(gl, glTexture.options.imageRef, vc._worldContext.px*precision, vc._worldContext.py*precision, vc._colorUl, vc);\n                    } else {\n                        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n                        gl.drawElements(gl.TRIANGLES, 6 * (i - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n                    }\n                    glTexture = tx;\n                    pos = i;\n                }\n            }\n            if (pos < length) {\n                if (glTexture.options && glTexture.options.imageRef) {\n                    const precision = this.ctx.stage.getOption('precision');\n                    let vc = operation.getElementCore(pos);\n                    this.ctx.stage.platform.paint(gl, glTexture.options.imageRef, vc._worldContext.px*precision, vc._worldContext.py*precision, vc._colorUl, vc);\n                } else {\n                    gl.bindTexture(gl.TEXTURE_2D, glTexture);\n                    gl.drawElements(gl.TRIANGLES, 6 * (length - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n                }\n            }\n        }\n    }\n\n}\n\nSparkShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nSparkShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLRenderer from \"../webgl/WebGLRenderer.mjs\";\nimport SparkShader from \"./shaders/SparkShader.mjs\";\n\nexport default class SparkRenderer extends WebGLRenderer {\n\n    constructor(stage) {\n        super(stage);\n    }\n\n    _createDefaultShader(ctx) {\n        return new SparkShader(ctx);\n    }\n\n    createCoreRenderExecutor(ctx) {\n        global.beginDrawing();\n        let ret = super.createCoreRenderExecutor(ctx);\n        global.endDrawing();\n        return ret;\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class ImageWorker {\n\n    constructor(options = {}) {\n        this._items = new Map();\n        this._id = 0;\n\n        this._initWorker();\n    }\n\n    destroy() {\n        if (this._worker) {\n            this._worker.terminate();\n        }\n\n        this._items = null;\n        this._worker = null;\n\n        delete this._items;\n        delete this._worker;        \n    }\n\n    _initWorker() {\n        const code = `(${createWorker.toString()})()`;\n        const blob = new Blob([code.replace('\"use strict\";', '')]); // firefox adds \"use strict\"; to any function which might block worker execution so knock it off\n        const blobURL = (window.URL ? URL : webkitURL).createObjectURL(blob, {\n            type: 'application/javascript; charset=utf-8'\n        });\n        this._worker = new Worker(blobURL);\n\n        this._worker.postMessage({type: 'config', config: {path: window.location.href, protocol: window.location.protocol}});\n\n        this._worker.onmessage = (e) => {\n            if (e.data && e.data.id) {\n                const id = e.data.id;\n                const item = this._items.get(id);\n                if (item) {\n                    if (e.data.type == 'data') {\n                        this.finish(item, e.data.info);\n                    } else {\n                        this.error(item, e.data.info);\n                    }\n                }\n            }\n        }\n    }\n\n    create(src) {\n        const id = ++this._id;\n        const item = new ImageWorkerImage(this, id, src);\n        this._items.set(id, item);\n        this._worker.postMessage({type: \"add\", id: id, src: src});\n        return item;\n    }\n\n    cancel(image) {\n        this._worker.postMessage({type: \"cancel\", id: image.id});\n        this._items.delete(image.id);\n    }\n\n    error(image, info) {\n        image.error(info);\n        this._items.delete(image.id);\n    }\n\n    finish(image, info) {\n        image.load(info);\n        this._items.delete(image.id);\n    }\n\n}\n\nclass ImageWorkerImage {\n\n    constructor(manager, id, src) {\n        this._manager = manager;\n        this._id = id;\n        this._src = src;\n        this._onError = null;\n        this._onLoad = null;\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    get src() {\n        return this._src;\n    }\n\n    set onError(f) {\n        this._onError = f;\n    }\n\n    set onLoad(f) {\n        this._onLoad = f;\n    }\n\n    cancel() {\n        this._manager.cancel(this);\n    }\n\n    load(info) {\n        if (this._onLoad) {\n            this._onLoad(info);\n        }\n    }\n\n    error(info) {\n        if (this._onError) {\n            this._onError(info);\n        }\n    }\n\n}\n\n/**\n * Notice that, within the createWorker function, we must only use ES5 code to keep it ES5-valid after babelifying, as\n *  the converted code of this section is converted to a blob and used as the js of the web worker thread.\n */\nconst createWorker = function() {\n\n    function ImageWorkerServer() {\n\n        this.items = new Map();\n\n        var t = this;\n        onmessage = function(e) {\n            t._receiveMessage(e);\n        }\n\n    }\n\n    ImageWorkerServer.isPathAbsolute = function(path) {\n        return /^(?:\\/|[a-z]+:\\/\\/)/.test(path) || path.substr(0, 5) == 'data:';\n    };\n\n    ImageWorkerServer.prototype._receiveMessage = function(e) {\n        if (e.data.type === 'config') {\n            this.config = e.data.config;\n\n            var base = this.config.path;\n            // the constructing of the basepath fails\n            // if location.hash contains a slash\n            var hasHashPath = /#.*?\\//;\n            if(hasHashPath.test(base)){\n                base = base.replace(/#.*$/,'');\n            }\n\n            var parts = base.split(\"/\");\n            parts.pop();\n            this._relativeBase = parts.join(\"/\") + \"/\";\n\n        } else if (e.data.type === 'add') {\n            this.add(e.data.id, e.data.src);\n        } else if (e.data.type === 'cancel') {\n            this.cancel(e.data.id);\n        }\n    };\n\n    ImageWorkerServer.prototype.add = function(id, src) {\n        // Convert relative URLs.\n        if (!ImageWorkerServer.isPathAbsolute(src)) {\n            src = this._relativeBase + src;\n        }\n\n        if (src.substr(0,2) === \"//\") {\n            // This doesn't work for image workers.\n            src = this.config.protocol + src;\n        }\n\n        var item = new ImageWorkerServerItem(id, src);\n        var t = this;\n        item.onFinish = function(result) {\n            t.finish(item, result);\n        };\n        item.onError = function(info) {\n            t.error(item, info);\n        };\n        this.items.set(id, item);\n        item.start();\n    };\n\n    ImageWorkerServer.prototype.cancel = function(id) {\n        var item = this.items.get(id);\n        if (item) {\n            item.cancel();\n            this.items.delete(id);\n        }\n    }\n\n    ImageWorkerServer.prototype.finish = function(item, {imageBitmap, hasAlphaChannel}) {\n        postMessage({\n            type: \"data\",\n            id: item.id,\n            info: {\n                imageBitmap,\n                hasAlphaChannel\n            }\n        }, [imageBitmap]);\n        this.items.delete(item.id);\n    };\n\n    ImageWorkerServer.prototype.error = function(item, {type, message}) {\n        postMessage({\n            type: \"error\",\n            id: item.id,\n            info: {\n                type,\n                message\n            }\n        });\n        this.items.delete(item.id);\n    };\n\n    ImageWorkerServer.isWPEBrowser = function() {\n        return (navigator.userAgent.indexOf(\"WPE\") !== -1);\n    };\n\n    function ImageWorkerServerItem(id, src) {\n\n        this._onError = undefined;\n        this._onFinish = undefined;\n        this._id = id;\n        this._src = src;\n        this._xhr = undefined;\n        this._mimeType = undefined;\n        this._canceled = false;\n\n    }\n\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'id', {\n        get: function() {\n            return this._id;\n        }\n    });\n\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'onFinish', {\n        get: function() {\n            return this._onFinish;\n        },\n        set: function(f) {\n            this._onFinish = f;\n        }\n    });\n\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'onError', {\n        get: function() {\n            return this._onError;\n        },\n        set: function(f) {\n            this._onError = f;\n        }\n    });\n\n    ImageWorkerServerItem.prototype.start = function() {\n        this._xhr = new XMLHttpRequest();\n        this._xhr.open(\"GET\", this._src, true);\n        this._xhr.responseType = \"blob\";\n\n        var t = this;\n        this._xhr.onerror = function(oEvent) {\n            t.error({type: \"connection\", message: \"Connection error\"});\n        };\n\n        this._xhr.onload = function(oEvent) {\n            var blob = t._xhr.response;\n            t._mimeType = blob.type;\n\n            t._createImageBitmap(blob);\n        };\n\n        this._xhr.send();\n    };\n\n    ImageWorkerServerItem.prototype._createImageBitmap = function(blob) {\n        var t = this;\n        createImageBitmap(blob, {premultiplyAlpha: 'premultiply', colorSpaceConversion: 'none', imageOrientation: 'none'}).then(function(imageBitmap) {\n            t.finish({\n                imageBitmap,\n                hasAlphaChannel: t._hasAlphaChannel()\n            });\n        }).catch(function(e) {\n            t.error({type: \"parse\", message: \"Error parsing image data\"});\n        });\n    };\n\n    ImageWorkerServerItem.prototype._hasAlphaChannel = function() {\n        if (ImageWorkerServer.isWPEBrowser()) {\n            // When using unaccelerated rendering image (https://github.com/WebPlatformForEmbedded/WPEWebKit/blob/wpe-20170728/Source/WebCore/html/ImageBitmap.cpp#L52),\n            // everything including JPG images are in RGBA format. Upload is way faster when using an alpha channel.\n            // @todo: after hardware acceleration is fixed and re-enabled, JPG should be uploaded in RGB to get the best possible performance and memory usage.\n            return true;\n        } else {\n            return (this._mimeType.indexOf(\"image/png\") !== -1);\n        }\n    };\n\n    ImageWorkerServerItem.prototype.cancel = function() {\n        if (this._canceled) return;\n        if (this._xhr) {\n            this._xhr.abort();\n        }\n        this._canceled = true;\n    };\n\n    ImageWorkerServerItem.prototype.error = function(type, message) {\n        if (!this._canceled && this._onError) {\n            this._onError({type, message});\n        }\n    };\n\n    ImageWorkerServerItem.prototype.finish = function(info) {\n        if (!this._canceled && this._onFinish) {\n            this._onFinish(info);\n        }\n    };\n\n    var worker = new ImageWorkerServer();\n};\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../../tree/Utils.mjs\";\nimport ImageWorker from \"./ImageWorker.mjs\";\n\n/**\n * Platform-specific functionality.\n */\nexport default class WebPlatform {\n\n    init(stage) {\n        this.stage = stage;\n        this._looping = false;\n        this._awaitingLoop = false;\n\n        // Alternative handler to avoid RAF when idle\n        this._loopHandler = null;\n        this._idleLoopCounter = 0;\n        this._idleLoopDelay = 60;\n        this._onIdle = false;\n\n        if (this.stage.getOption(\"useImageWorker\")) {\n            if (!window.createImageBitmap || !window.Worker) {\n                console.warn(\"[Lightning] Can't use image worker because browser does not have createImageBitmap and Web Worker support\");\n            } else {\n                this._imageWorker = new ImageWorker();\n            }\n        }\n\n        this._registerVisibilityChangeHandler();\n    }\n\n    destroy() {\n        if (this._imageWorker) {\n            this._imageWorker.destroy();\n        }\n\n        clearInterval(this._loopHandler);\n\n        this._removeKeyHandler();\n        this._removeClickHandler();\n        this._removeHoverHandler();\n        this._removeScrollWheelHandler();\n        this._removeVisibilityChangeHandler();\n\n        this.stage = null;\n        delete this.stage;\n    }\n\n    startLoop() {\n        this._looping = true;\n        if (!this._awaitingLoop) {\n            this.loop();\n        }\n    }\n\n    stopLoop() {\n        this._looping = false;\n    }\n\n    switchLoop() {\n        if (this._onIdle === false) {\n            this._onIdle = true;\n            this.stage.onIdle();\n        }\n\n        if (this._idleLoopCounter < this._idleLoopDelay) {\n            this._idleLoopCounter++;\n            return;\n        }\n        if (!this.stage.ctx.hasRenderUpdates()) {\n            this.stopLoop();\n            this._loopHandler = setInterval(() => {\n                this.stage.updateFrame();\n                this.stage.idleFrame();\n                if (this.stage.ctx.hasRenderUpdates()) {\n                    clearInterval(this._loopHandler);\n                    this.startLoop();\n                };\n            }, 1000 / 60);\n        } else {\n            this._idleLoopCounter = 0;\n        }\n    }\n\n    loop() {\n        let self = this;\n        let lp = function () {\n            self._awaitingLoop = false;\n            self._onIdle = false;\n            if (self._looping) {\n                self.stage.updateFrame();\n                if (self.stage.getOption(\"pauseRafLoopOnIdle\")) {\n                    self.switchLoop();\n                }\n                self.stage.renderFrame();\n                requestAnimationFrame(lp);\n                self._awaitingLoop = true;\n            }\n        }\n        requestAnimationFrame(lp);\n    }\n\n    uploadCompressedGlTexture(gl, textureSource, source, options) {\n        const view = !source.pvr ? new DataView(source.mipmaps[0]) : source.mipmaps[0];\n        gl.compressedTexImage2D(\n            gl.TEXTURE_2D,\n            0,\n            source.glInternalFormat,\n            source.pixelWidth,\n            source.pixelHeight,\n            0,\n            view,\n        )\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    }\n\n    uploadGlTexture(gl, textureSource, source, options) {\n        if (source instanceof ImageData || source instanceof HTMLImageElement || source instanceof HTMLVideoElement || (window.ImageBitmap && source instanceof ImageBitmap)) {\n            // Web-specific data types.\n            gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, source);\n        } else if (source instanceof HTMLCanvasElement) {\n            if (Utils.isZiggo || this.stage.getOption(\"forceTxCanvasSource\")) {\n                // Ziggo EOS and Selene have issues with getImageData implementation causing artifacts.\n                gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, source);\n            } else if (source.width > 0 && source.height > 0) {\n                // Workaround for some browsers (e.g. Tizen) as they do not convert canvas data to texture correctly, sometimes causing artifacts.\n                // Width/Height check added because of https://github.com/rdkcentral/Lightning/issues/412\n                const ctx = source.getContext('2d');\n                gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, ctx.getImageData(0, 0, source.width, source.height));\n            }\n        } else {\n            gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, textureSource.w, textureSource.h, 0, options.format, options.type, source);\n        }\n    }\n\n    /**\n     * KTX File format specification\n     * https://www.khronos.org/registry/KTX/specs/1.0/ktxspec_v1.html\n     **/\n    handleKtxLoad(cb, src) {\n        var self = this;\n        return function () {\n            var arraybuffer = this.response;\n            var view = new DataView(arraybuffer);\n\n            // identifier, big endian\n            var targetIdentifier = 3632701469\n            if (targetIdentifier !== (view.getUint32(0) + view.getUint32(4) + view.getUint32(8))) {\n                cb('Parsing failed: identifier ktx mismatch:', src)\n            }\n\n            var littleEndian = (view.getUint32(12) === 16909060) ? true : false;\n            var data = {\n                glType: view.getUint32(16, littleEndian),\n                glTypeSize: view.getUint32(20, littleEndian),\n                glFormat: view.getUint32(24, littleEndian),\n                glInternalFormat: view.getUint32(28, littleEndian),\n                glBaseInternalFormat: view.getUint32(32, littleEndian),\n                pixelWidth: view.getUint32(36, littleEndian),\n                pixelHeight: view.getUint32(40, littleEndian),\n                pixelDepth: view.getUint32(44, littleEndian),\n                numberOfArrayElements: view.getUint32(48, littleEndian),\n                numberOfFaces: view.getUint32(52, littleEndian),\n                numberOfMipmapLevels: view.getUint32(56, littleEndian),\n                bytesOfKeyValueData: view.getUint32(60, littleEndian),\n                kvps: [],\n                mipmaps: [],\n                get width() { return this.pixelWidth },\n                get height() { return this.pixelHeight },\n            };\n\n            const props = (obj) => {\n                const p = [];\n                for (let v in obj) {\n                    p.push(obj[v]);\n                }\n                return p;\n            }\n\n            const formats = Object.values(self.stage.renderer.getCompressedTextureExtensions())\n                .filter((obj) => obj != null)\n                .map((obj) => props(obj))\n                .reduce((prev, current) => prev.concat(current));\n\n            if (!formats.includes(data.glInternalFormat)) {\n                console.warn(\"[Lightning] Unrecognized texture extension format:\", src, data.glInternalFormat, self.stage.renderer.getCompressedTextureExtensions());\n            }\n\n            var offset = 64\n            // Key Value Pairs of data start at byte offset 64\n            // But the only known kvp is the API version, so skipping parsing.\n            offset += data.bytesOfKeyValueData;\n\n            for (var i = 0; i < data.numberOfMipmapLevels; i++) {\n                var imageSize = view.getUint32(offset);\n                offset += 4;\n                data.mipmaps.push(view.buffer.slice(offset, imageSize));\n                offset += imageSize\n            }\n\n            cb(null, {\n                source: data,\n                renderInfo: { src: src, compressed: true },\n            })\n        }\n    }\n\n    handlePvrLoad(cb, src) {\n        return function () {\n            // pvr header length in 32 bits\n            const pvrHeaderLength = 13;\n            // for now only we only support: COMPRESSED_RGB_ETC1_WEBGL\n            const pvrFormatEtc1 = 0x8D64;\n            const pvrWidth = 7;\n            const pvrHeight = 6;\n            const pvrMipmapCount = 11;\n            const pvrMetadata = 12;\n            const arrayBuffer = this.response;\n            const header = new Int32Array(arrayBuffer, 0, pvrHeaderLength);\n            const dataOffset = header[pvrMetadata] + 52;\n            const pvrtcData = new Uint8Array(arrayBuffer, dataOffset);\n\n            var data = {\n                glInternalFormat: pvrFormatEtc1,\n                pixelWidth: header[pvrWidth],\n                pixelHeight: header[pvrHeight],\n                numberOfMipmapLevels: header[pvrMipmapCount],\n                mipmaps: [],\n                pvr: true,\n                get width() { return this.pixelWidth },\n                get height() { return this.pixelHeight },\n            };\n\n            let offset = 0\n            let width = data.pixelWidth;\n            let height = data.pixelHeight;\n\n            for (var i = 0; i < data.numberOfMipmapLevels; i++) {\n                const level = ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\n                const view = new Uint8Array(arrayBuffer, pvrtcData.byteOffset + offset, level);\n                data.mipmaps.push(view);\n                offset += level;\n                width = width >> 1;\n                height = height >> 1;\n            }\n\n            cb(null, {\n                source: data,\n                renderInfo: { src: src, compressed: true },\n            })\n        }\n    }\n\n    loadSrcTexture({ src, hasAlpha }, cb) {\n        let cancelCb = undefined;\n        let isPng = (src.toLowerCase().indexOf(\".png\") >= 0) || src.substr(0, 21) == 'data:image/png;base64';\n        let isKtx = src.indexOf('.ktx') >= 0;\n        let isPvr = src.indexOf('.pvr') >= 0;\n        if (isKtx || isPvr) {\n            let request = new XMLHttpRequest();\n            request.addEventListener(\n                \"load\", isKtx ? this.handleKtxLoad(cb, src) : this.handlePvrLoad(cb, src)\n            );\n            request.open(\"GET\", src);\n            request.responseType = \"arraybuffer\";\n            request.send();\n            cancelCb = function () {\n                request.abort();\n            }\n        } else if (this._imageWorker) {\n            // WPE-specific image parser.\n            if (typeof src !== 'string') {\n                return cb(\"Invalid image URL\");\n            }\n            \n            // URL can start with http://, https://, and //\n            const separatorPos = src.indexOf('//');\n            if (separatorPos !== 0 && separatorPos !== 5 && separatorPos !== 6) {\n                return cb(\"Invalid image URL\");\n            }\n\n            const image = this._imageWorker.create(src);\n            image.onError = function (err) {\n                return cb(\"Image load error\");\n            };\n            image.onLoad = function ({ imageBitmap, hasAlphaChannel }) {\n                cb(null, {\n                    source: imageBitmap,\n                    renderInfo: { src: src, compressed: false },\n                    hasAlpha: hasAlphaChannel,\n                    premultiplyAlpha: true\n                });\n            };\n            cancelCb = function () {\n                image.cancel();\n            }\n        } else {\n            let image = new Image();\n\n            // On the PS4 platform setting the `crossOrigin` attribute on\n            // images can cause CORS failures.\n            if (!(src.substr(0, 5) == \"data:\") && !Utils.isPS4) {\n                // Base64.\n                image.crossOrigin = \"Anonymous\";\n            }\n            image.onerror = function (err) {\n                // Ignore error message when cancelled.\n                if (image.src) {\n                    return cb(\"Image load error\");\n                }\n            };\n            image.onload = function () {\n                cb(null, {\n                    source: image,\n                    renderInfo: { src: src, compressed: false },\n                    hasAlpha: isPng || hasAlpha\n                });\n            };\n            image.src = src;\n\n            cancelCb = function () {\n                image.onerror = null;\n                image.onload = null;\n                image.removeAttribute('src');\n            }\n        }\n\n        return cancelCb;\n    }\n\n    createWebGLContext(w, h) {\n        let canvas = this.stage.getOption('canvas') || document.createElement('canvas');\n\n        if (w && h) {\n            canvas.width = w;\n            canvas.height = h;\n        }\n\n        let opts = {\n            alpha: true,\n            antialias: false,\n            premultipliedAlpha: true,\n            stencil: true,\n            preserveDrawingBuffer: false\n        };\n\n        let gl = canvas.getContext('webgl', opts) || canvas.getContext('experimental-webgl', opts) || canvas.getContext('webgl2', opts);\n\n        if (!gl) {\n            throw new Error('This browser does not support webGL.');\n        }\n\n        return gl;\n    }\n\n    createCanvasContext(w, h) {\n        let canvas = this.stage.getOption('canvas') || document.createElement('canvas');\n\n        if (w && h) {\n            canvas.width = w;\n            canvas.height = h;\n        }\n\n        let c2d = canvas.getContext('2d');\n        if (!c2d) {\n            throw new Error('This browser does not support 2d canvas.');\n        }\n\n        return c2d;\n    }\n\n    getHrTime() {\n        return window.performance ? window.performance.now() : (new Date()).getTime();\n    }\n\n    getDrawingCanvas() {\n        // We can't reuse this canvas because textures may load async.\n        return document.createElement('canvas');\n    }\n\n    getTextureOptionsForDrawingCanvas(canvas) {\n        let options = {};\n        options.source = canvas;\n        return options;\n    }\n\n    nextFrame(changes) {\n        /* WebGL blits automatically */\n    }\n\n    registerKeydownHandler(keyhandler) {\n        this._keydownListener = (e) => {\n            keyhandler(e);\n        };\n        window.addEventListener('keydown', this._keydownListener);\n    }\n\n    registerKeyupHandler(keyhandler) {\n        this._keyupListener = (e) => {\n            keyhandler(e);\n        };\n        window.addEventListener('keyup', this._keyupListener);\n    }\n\n    _removeKeyHandler() {\n        if (this._keydownListener) {\n            window.removeEventListener('keydown', this._keydownListener);\n        }\n\n        if (this._keyupListener) {\n            window.removeEventListener('keyup', this._keyupListener);\n        }\n    }\n\n    registerClickHandler(clickHandler) {\n        this._clickListener = e => {\n            clickHandler(e);\n        };\n        window.addEventListener('mousedown', this._clickListener);\n    }\n\n    _removeClickHandler() {\n        if (this._clickListener) {\n            window.removeEventListener('mousedown', this._clickListener);\n        }\n    }\n\n    registerHoverHandler(hoverHandler) {\n        this._hoverListener = e => {\n            hoverHandler(e);\n        };\n        window.addEventListener('mousemove', this._hoverListener);\n    }\n\n    _removeHoverHandler() {\n        if (this._hoverListener) {\n            window.removeEventListener('mousemove', this._hoverListener);\n        }\n    }\n\n    registerScrollWheelHandler(registerScrollWheelHandler) {\n        this._scrollWheelListener = e => {\n            registerScrollWheelHandler(e);\n        }\n        window.addEventListener('wheel', this._scrollWheelListener);\n    }\n\n    _removeScrollWheelHandler() {\n        if (this._scrollWheelListener) {\n            window.removeEventListener('wheel', this._scrollWheelListener);\n        }\n    }\n\n    /**\n     * Fix for issue reported at: https://github.com/WebPlatformForEmbedded/WPEWebKit/issues/882\n     */\n    _registerVisibilityChangeHandler() {\n        this._visibilityChangeHandler = () => {\n            if (document.visibilityState === 'visible') {\n                this.stage.root.core.setHasRenderUpdates(2);\n                this.stage.renderFrame();\n            }\n        }\n        document.addEventListener('visibilitychange', this._visibilityChangeHandler);\n    }\n\n    _removeVisibilityChangeHandler() {\n        if (this._visibilityChangeHandler) {\n            document.removeEventListener('visibilitychange', this._visibilityChangeHandler);\n        }\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebPlatform from \"./browser/WebPlatform.mjs\";\n\nexport default class PlatformLoader {\n    static load(options) {\n        if (options.platform) {\n            return options.platform;\n        } else {\n            return WebPlatform;\n        }\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass Utils {\n\n    static isFunction(value) {\n        return typeof value === 'function';\n    }\n\n    static isNumber(value) {\n        return typeof value === 'number';\n    }\n\n    static isInteger(value) {\n        return (typeof value === 'number' && (value % 1) === 0);\n    }\n\n    static isBoolean(value) {\n        return value === true || value === false;\n    }\n\n    static isString(value) {\n        return typeof value == 'string';\n    }\n\n    static isObject(value) {\n        let type = typeof value;\n        return !!value && (type == 'object' || type == 'function');\n    }\n\n    static isPlainObject(value) {\n        let type = typeof value;\n        return !!value && (type == 'object');\n    }\n\n    static isObjectLiteral(value){\n        return typeof value === 'object' && value && value.constructor === Object\n    }\n\n    static getArrayIndex(index, arr) {\n        return Utils.getModuloIndex(index, arr.length);\n    }\n\n    static equalValues(v1, v2) {\n        if ((typeof v1) !== (typeof v2)) return false\n        if (Utils.isObjectLiteral(v1)) {\n            return Utils.isObjectLiteral(v2) && Utils.equalObjectLiterals(v1, v2)\n        } else if (Array.isArray(v1)) {\n            return Array.isArray(v2) && Utils.equalArrays(v1, v2)\n        } else {\n            return v1 === v2\n        }\n    }\n\n    static equalObjectLiterals(obj1, obj2) {\n        let keys1 = Object.keys(obj1);\n        let keys2 = Object.keys(obj2);\n        if (keys1.length !== keys2.length) {\n            return false\n        }\n\n        for (let i = 0, n = keys1.length; i < n; i++) {\n            const k1 = keys1[i];\n            const k2 = keys2[i];\n            if (k1 !== k2) {\n                return false\n            }\n\n            const v1 = obj1[k1];\n            const v2 = obj2[k2];\n\n            if (!Utils.equalValues(v1, v2)) {\n                return false\n            }\n        }\n\n        return true;\n    }\n\n    static equalArrays(v1, v2) {\n        if (v1.length !== v2.length) {\n            return false\n        }\n        for (let i = 0, n = v1.length; i < n; i++) {\n            if (!this.equalValues(v1[i], v2[i])) {\n                return false\n            }\n        }\n\n        return true\n    }\n\n}\n\n/**\n * Maintains the state of a WebGLRenderingContext.\n */\nclass WebGLState {\n\n    constructor(id, gl) {\n        this._id = id;\n        this._gl = gl;\n        this._program = undefined;\n        this._buffers = new Map();\n        this._framebuffers = new Map();\n        this._renderbuffers = new Map();\n\n        // Contains vertex attribute definition arrays (enabled, size, type, normalized, stride, offset).\n        this._vertexAttribs = new Array(16);\n        this._nonDefaultFlags = new Set();\n        this._settings = new Map();\n        this._textures = new Array(8);\n        this._maxTexture = 0;\n        this._activeTexture = gl.TEXTURE0;\n        this._pixelStorei = new Array(5);\n    }\n\n    _getDefaultFlag(cap) {\n        return (cap === this._gl.DITHER);\n    }\n\n    setFlag(cap, v) {\n        const def = this._getDefaultFlag(cap);\n        if (v === def) {\n            return this._nonDefaultFlags.delete(cap);\n        } else {\n            if (!this._nonDefaultFlags.has(cap)) {\n                this._nonDefaultFlags.add(cap);\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    setBuffer(target, buffer) {\n        const change = this._buffers.get(target) !== buffer;\n        this._buffers.set(target, buffer);\n\n        if (change && (target === this._gl.ARRAY_BUFFER)) {\n            // When the array buffer is changed all attributes are cleared.\n            this._vertexAttribs = [];\n        }\n\n        return change;\n    }\n\n    setFramebuffer(target, buffer) {\n        const change = this._framebuffers.get(target) !== buffer;\n        this._framebuffers.set(target, buffer);\n        return change;\n    }\n\n    setRenderbuffer(target, buffer) {\n        const change = this._renderbuffers.get(target) !== buffer;\n        this._renderbuffers.set(target, buffer);\n        return change;\n    }\n\n    setProgram(program) {\n        const change = this._program !== program;\n        this._program = program;\n        return change\n    }\n\n    setSetting(func, v) {\n        const s = this._settings.get(func);\n        const change = !s || !Utils.equalValues(s, v);\n        this._settings.set(func, v);\n        return change\n    }\n\n    disableVertexAttribArray(index) {\n        const va = this._vertexAttribs[index];\n        if (va && va[5]) {\n            va[5] = false;\n            return true;\n        }\n        return false;\n    }\n\n    enableVertexAttribArray(index) {\n        const va = this._vertexAttribs[index];\n        if (va) {\n            if (!va[0]) {\n                va[0] = true;\n                return true;\n            }\n        } else {\n            this._vertexAttribs[index] = [0, 0, 0, 0, 0, true];\n            return true;\n        }\n        return false;\n    }\n\n    vertexAttribPointer(index, props) {\n        let va = this._vertexAttribs[index];\n        let equal = false;\n        if (va) {\n            equal = va[0] === props[0] &&\n                va[1] === props[1] &&\n                va[2] === props[2] &&\n                va[3] === props[3] &&\n                va[4] === props[4];\n        }\n\n        if (equal) {\n            return false;\n        } else {\n            props[5] = va ? va[5] : false;\n            return true;\n        }\n    }\n\n    setActiveTexture(texture) {\n        const changed = this._activeTexture !== texture;\n        this._activeTexture = texture;\n        return changed;\n    }\n\n    bindTexture(target, texture) {\n        const activeIndex = WebGLState._getTextureIndex(this._activeTexture);\n        this._maxTexture = Math.max(this._maxTexture, activeIndex + 1);\n        const current = this._textures[activeIndex];\n        const targetIndex = WebGLState._getTextureTargetIndex(target);\n        if (current) {\n            if (current[targetIndex] === texture) {\n                return false;\n            }\n            current[targetIndex] = texture;\n            return true;\n        } else {\n            if (texture) {\n                this._textures[activeIndex] = [];\n                this._textures[activeIndex][targetIndex] = texture;\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n\n    setPixelStorei(pname, param) {\n        const i = WebGLState._getPixelStoreiIndex(pname);\n        const change = !Utils.equalValues(this._pixelStorei[i], param);\n        this._pixelStorei[i] = param;\n        return change;\n    }\n\n    migrate(s) {\n        const t = this;\n\n        // Warning: migrate should call the original prototype methods directly.\n\n        this._migrateFlags(t, s);\n\n        // useProgram\n        if (s._program !== t._program) {\n            this._gl._useProgram(s._program);\n        }\n\n        this._migrateFramebuffers(t, s);\n        this._migrateRenderbuffers(t, s);\n\n        const buffersChanged = this._migrateBuffers(t, s);\n        this._migrateAttributes(t, s, buffersChanged);\n\n        this._migrateFlags(t, s);\n\n        this._migrateSettings(t, s);\n\n        this._migratePixelStorei(t, s);\n        \n        this._migrateTextures(t, s);\n        \n    }\n\n    _migratePixelStorei(t, s) {\n        for (let i = 0, n = t._pixelStorei.length; i < n; i++) {\n            if (t._pixelStorei[i] !== s._pixelStorei[i]) {\n                const value = s._pixelStorei[i] !== undefined ? s._pixelStorei[i] : WebGLState._getDefaultPixelStoreiByIndex(i);\n                this._gl._pixelStorei(WebGLState._getPixelStoreiByIndex(i), value);\n            }\n        }\n    }\n\n    _migrateTextures(t, s) {\n        const max = Math.max(t._maxTexture, s._maxTexture);\n\n        let activeTexture = t._activeTexture;\n\n        for (let i = 0; i < max; i++) {\n            const sTargets = s._textures[i];\n            const tTargets = t._textures[i];\n            const textureNumb = WebGLState._getTextureByIndex(i);\n\n            const targetMax = Math.max(tTargets ? tTargets.length : 0, sTargets ? sTargets.length : 0);\n            for (let j = 0, n = targetMax; j < n; j++) {\n                const target = WebGLState._getTextureTargetByIndex(j);\n                if (activeTexture !== textureNumb) {\n                    this._gl._activeTexture(textureNumb);\n                    activeTexture = textureNumb;\n                }\n\n                const texture = (sTargets && sTargets[j]) || null;\n                this._gl._bindTexture(target, texture);\n            }\n        }\n\n        if (s._activeTexture !== activeTexture) {\n            this._gl._activeTexture(s._activeTexture);\n        }\n    }\n\n    _migrateBuffers(t, s) {\n        s._buffers.forEach((framebuffer, target) => {\n            if (t._buffers.get(target) !== framebuffer) {\n                this._gl._bindBuffer(target, framebuffer);\n            }\n        });\n\n        t._buffers.forEach((buffer, target) => {\n            const b = s._buffers.get(target);\n            if (b === undefined) {\n                this._gl._bindBuffer(target, null);\n            }\n        });\n        return (s._buffers.get(this._gl.ARRAY_BUFFER) !== t._buffers.get(this._gl.ARRAY_BUFFER))\n    }\n\n    _migrateFramebuffers(t, s) {\n        s._framebuffers.forEach((framebuffer, target) => {\n            if (t._framebuffers.get(target) !== framebuffer) {\n                this._gl._bindFramebuffer(target, framebuffer);\n            }\n        });\n\n        t._framebuffers.forEach((framebuffer, target) => {\n            const fb = s._framebuffers.get(target);\n            if (fb === undefined) {\n                this._gl._bindFramebuffer(target, null);\n            }\n        });\n    }\n\n    _migrateRenderbuffers(t, s) {\n        s._renderbuffers.forEach((renderbuffer, target) => {\n            if (t._renderbuffers.get(target) !== renderbuffer) {\n                this._gl._bindRenderbuffer(target, renderbuffer);\n            }\n        });\n\n        t._renderbuffers.forEach((renderbuffer, target) => {\n            const fb = s._renderbuffers.get(target);\n            if (fb === undefined) {\n                this._gl._bindRenderbuffer(target, null);\n            }\n        });\n    }\n\n    _migrateAttributes(t, s, buffersChanged) {\n\n        if (!buffersChanged) {\n            t._vertexAttribs.forEach((attrib, index) => {\n                if (!s._vertexAttribs[index]) {\n                    // We can't 'delete' a vertex attrib so we'll disable it.\n                    this._gl._disableVertexAttribArray(index);\n                }\n            });\n\n            s._vertexAttribs.forEach((attrib, index) => {\n                this._gl._vertexAttribPointer(index, attrib[0], attrib[1], attrib[2], attrib[4]);\n                if (attrib[5]) {\n                    this._gl._enableVertexAttribArray(index);\n                } else {\n                    this._gl._disableVertexAttribArray(index);\n                }\n            });\n        } else {\n            // When buffers are changed, previous attributes were reset automatically.\n            s._vertexAttribs.forEach((attrib, index) => {\n                if (attrib[0]) {\n                    // Do not set vertex attrib pointer when it was just the default value.\n                    this._gl._vertexAttribPointer(index, attrib[0], attrib[1], attrib[2], attrib[3], attrib[4]);\n                }\n                if (attrib[5]) {\n                    this._gl._enableVertexAttribArray(index);\n                }\n            });\n        }\n    }\n\n    _migrateSettings(t, s) {\n        const defaults = this.constructor.getDefaultSettings();\n        t._settings.forEach((value, func) => {\n            const name = func.name || func.xname;\n            if (!s._settings.has(func)) {\n                let args = defaults.get(name);\n                if (Utils.isFunction(args)) {\n                    args = args(this._gl);\n                }\n                // We are actually setting the setting for optimization purposes.\n                s._settings.set(func, args);\n                func.apply(this._gl, args);\n            }\n        });\n        s._settings.forEach((value, func) => {\n            const tValue = t._settings.get(func);\n            if (!tValue || !Utils.equalValues(tValue, value)) {\n                func.apply(this._gl, value);\n            }\n        });\n    }\n\n    _migrateFlags(t, s) {\n        t._nonDefaultFlags.forEach(setting => {\n            if (!s._nonDefaultFlags.has(setting)) {\n                if (this._getDefaultFlag(setting)) {\n                    this._gl._enable(setting);\n                } else {\n                    this._gl._disable(setting);\n                }\n            }\n        });\n        s._nonDefaultFlags.forEach(setting => {\n            if (!t._nonDefaultFlags.has(setting)) {\n                if (this._getDefaultFlag(setting)) {\n                    this._gl._disable(setting);\n                } else {\n                    this._gl._enable(setting);\n                }\n            }\n        });\n    }\n\n    static getDefaultSettings() {\n        if (!this._defaultSettings) {\n            this._defaultSettings = new Map();\n            const d = this._defaultSettings;\n            const g = WebGLRenderingContext.prototype;\n            d.set(\"viewport\", function(gl) {return [0,0,gl.canvas.width, gl.canvas.height]});\n            d.set(\"scissor\", function(gl) {return [0,0,gl.canvas.width, gl.canvas.height]});\n            d.set(\"blendColor\", [0, 0, 0, 0]);\n            d.set(\"blendEquation\", [g.FUNC_ADD]);\n            d.set(\"blendEquationSeparate\", [g.FUNC_ADD, g.FUNC_ADD]);\n            d.set(\"blendFunc\", [g.ONE, g.ZERO]);\n            d.set(\"blendFuncSeparate\", [g.ONE, g.ZERO, g.ONE, g.ZERO]);\n            d.set(\"clearColor\", [0, 0, 0, 0]);\n            d.set(\"clearDepth\", [1]);\n            d.set(\"clearStencil\", [0]);\n            d.set(\"colorMask\", [true, true, true, true]);\n            d.set(\"cullFace\", [g.BACK]);\n            d.set(\"depthFunc\", [g.LESS]);\n            d.set(\"depthMask\", [true]);\n            d.set(\"depthRange\", [0, 1]);\n            d.set(\"frontFace\", [g.CCW]);\n            d.set(\"lineWidth\", [1]);\n            d.set(\"polygonOffset\", [0, 0]);\n            d.set(\"sampleCoverage\", [1, false]);\n            d.set(\"stencilFunc\", [g.ALWAYS, 0, 1]);\n            d.set(\"_stencilFuncSeparateFront\", [g.ALWAYS, 0, 1]);\n            d.set(\"_stencilFuncSeparateBack\", [g.ALWAYS, 0, 1]);\n            d.set(\"_stencilFuncSeparateFrontAndBack\", [g.ALWAYS, 0, 1]);\n            d.set(\"stencilMask\", [1]);\n            d.set(\"_stencilMaskSeparateFront\", [1]);\n            d.set(\"_stencilMaskSeparateBack\", [1]);\n            d.set(\"_stencilMaskSeparateFrontAndBack\", [1]);\n            d.set(\"stencilOp\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"_stencilOpSeparateFront\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"_stencilOpSeparateBack\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"_stencilOpSeparateFrontAndBack\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"vertexAttrib1f\", []);\n            d.set(\"vertexAttrib1fv\", []);\n            d.set(\"vertexAttrib2f\", []);\n            d.set(\"vertexAttrib2fv\", []);\n            d.set(\"vertexAttrib3f\", []);\n            d.set(\"vertexAttrib3fv\", []);\n            d.set(\"vertexAttrib4f\", []);\n            d.set(\"vertexAttrib4fv\", []);\n        }\n        return this._defaultSettings\n    }\n\n    static _getTextureTargetIndex(target) {\n        switch(target) {\n            case 0x0DE1:\n                /* TEXTURE_2D */\n                return 0;\n            case 0x8513:\n                /* TEXTURE_CUBE_MAP */\n                return 1;\n            default:\n                // Shouldn't happen.\n                throw new Error('Unknown texture target: ' + target);\n        }\n    }\n\n    static _getTextureTargetByIndex(index) {\n        if (!this._textureTargetIndices) {\n            this._textureTargetIndices = [0x0DE1, 0x8513];\n        }\n        return this._textureTargetIndices[index]\n    }\n\n    static _getTextureIndex(index) {\n        return index - 0x84C0 /* GL_TEXTURE0 */;\n    }\n\n    static _getTextureByIndex(index) {\n        return index + 0x84C0;\n    }\n\n    static _getPixelStoreiIndex(pname) {\n        switch(pname) {\n            case 0x0D05:\n                /* PACK_ALIGNMENT */\n                return 0;\n            case 0x0CF5:\n                /* UNPACK_ALIGNMENT */\n                return 1;\n            case 0x9240:\n                /* UNPACK_FLIP_Y_WEBGL */\n                return 2;\n            case 0x9241:\n                /* UNPACK_PREMULTIPLY_ALPHA_WEBGL */\n                return 3;\n            case 0x9243:\n                /* UNPACK_COLORSPACE_CONVERSION_WEBGL */\n                return 4;\n                //@todo: support WebGL2 properties, see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei\n            case 0x9245:\n                /* UNPACK_FLIP_BLUE_RED */\n                return 5;\n            default:\n                // Shouldn't happen.\n                throw new Error('Unknown pixelstorei: ' + pname);\n        }\n    }\n\n    static _getPixelStoreiByIndex(index) {\n        if (!this._pixelStoreiIndices) {\n            this._pixelStoreiIndices = [0x0D05, 0x0CF5, 0x9240, 0x9241, 0x9243];\n        }\n        return this._pixelStoreiIndices[index]\n    }\n\n    static _getDefaultPixelStoreiByIndex(index) {\n        if (!this._pixelStoreiDefaults) {\n            this._pixelStoreiDefaults = [4, 4, false, false, WebGLRenderingContext.prototype.BROWSER_DEFAULT_WEBGL];\n        }\n        return this._pixelStoreiDefaults[index]\n    }\n}\n\nclass WebGLStateManager {\n\n    _initStateManager(id = \"default\") {\n        this._states = {};\n        this._state = this._getState(id);\n    }\n\n    _getState(id) {\n        if (!this._states[id]) {\n            this._states[id] = new WebGLState(id, this);\n        }\n        return this._states[id];\n    }\n\n    switchState(id = \"default\") {\n        if (this._state._id !== id) {\n            const newState = this._getState(id);\n            this._state.migrate(newState);\n            this._state = newState;\n        }\n    }\n\n    $useProgram(program) {\n        if (this._state.setProgram(program))\n            this._useProgram(program);\n    }\n\n    $bindBuffer(target, fb) {\n        if (this._state.setBuffer(target, fb))\n            this._bindBuffer(target, fb);\n    }\n\n    $bindFramebuffer(target, fb) {\n        if (this._state.setFramebuffer(target, fb))\n            this._bindFramebuffer(target, fb);\n    }\n\n    $bindRenderbuffer(target, fb) {\n        if (this._state.setRenderbuffer(target, fb))\n            this._bindRenderbuffer(target, fb);\n    }\n\n    $enable(cap) {\n        if (this._state.setFlag(cap, true))\n            this._enable(cap);\n    }\n\n    $disable(cap) {\n        if (this._state.setFlag(cap, false))\n            this._disable(cap);\n    }\n\n    $viewport(x, y, w, h) {\n        if (this._state.setSetting(this._viewport, [x, y, w, h]))\n            this._viewport(x, y, w, h);\n    }\n\n    $scissor(x, y, w, h) {\n        if (this._state.setSetting(this._scissor, [x, y, w, h]))\n            this._scissor(x, y, w, h);\n    }\n\n    $disableVertexAttribArray(index) {\n        if (this._state.disableVertexAttribArray(index))\n            this._disableVertexAttribArray(index);\n    }\n\n    $enableVertexAttribArray(index) {\n        if (this._state.enableVertexAttribArray(index))\n            this._enableVertexAttribArray(index);\n    }\n\n    $vertexAttribPointer(index, size, type, normalized, stride, offset) {\n        if (this._state.vertexAttribPointer(index, [size, type, normalized, stride, offset]))\n            this._vertexAttribPointer(index, size, type, normalized, stride, offset);\n    }\n\n    $activeTexture(texture) {\n        if (this._state.setActiveTexture(texture))\n            this._activeTexture(texture);\n    }\n\n    $bindTexture(target, texture) {\n        if (this._state.bindTexture(target, texture))\n            this._bindTexture(target, texture);\n    }\n\n    $pixelStorei(pname, param) {\n        if (this._state.setPixelStorei(pname, param)) {\n            this._pixelStorei(pname, param);\n        }\n    }\n\n    $stencilFuncSeparate(face, func, ref, mask) {\n        let f;\n        switch(face) {\n            case this.FRONT:\n                f = this._stencilFuncSeparateFront;\n                break;\n            case this.BACK:\n                f = this._stencilFuncSeparateBack;\n                break;\n            case this.FRONT_AND_BACK:\n                f = this._stencilFuncSeparateFrontAndBack;\n                break;\n        }\n\n        if (this._state.setSetting(f, [func, ref, mask]))\n            f.apply(this, [func, ref, mask]);\n    }\n\n    _stencilFuncSeparateFront(func, ref, mask) {\n        this._stencilFuncSeparate(this.FRONT, func, ref, mask);\n    }\n\n    _stencilFuncSeparateBack(func, ref, mask) {\n        this._stencilFuncSeparate(this.BACK, func, ref, mask);\n    }\n\n    _stencilFuncSeparateFrontAndBack(func, ref, mask) {\n        this._stencilFuncSeparate(this.FRONT_AND_BACK, func, ref, mask);\n    }\n\n    $stencilMaskSeparate(face, mask) {\n        let f;\n        switch(face) {\n            case this.FRONT:\n                f = this._stencilMaskSeparateFront;\n                break;\n            case this.BACK:\n                f = this._stencilMaskSeparateBack;\n                break;\n            case this.FRONT_AND_BACK:\n                f = this._stencilMaskSeparateFrontAndBack;\n                break;\n        }\n\n        if (this._state.setSetting(f, [mask]))\n            f.apply(this, [mask]);\n    }\n\n    _stencilMaskSeparateFront(mask) {\n        this._stencilMaskSeparate(this.FRONT, mask);\n    }\n\n    _stencilMaskSeparateBack(mask) {\n        this._stencilMaskSeparate(this.BACK, mask);\n    }\n\n    _stencilMaskSeparateFrontAndBack(mask) {\n        this._stencilMaskSeparate(this.FRONT_AND_BACK, mask);\n    }\n\n    $stencilOpSeparate(face, fail, zfail, zpass) {\n        let f;\n        switch(face) {\n            case this.FRONT:\n                f = this._stencilOpSeparateFront;\n                break;\n            case this.BACK:\n                f = this._stencilOpSeparateBack;\n                break;\n            case this.FRONT_AND_BACK:\n                f = this._stencilOpSeparateFrontAndBack;\n                break;\n        }\n\n        if (this._state.setSetting(f, [fail, zfail, zpass]))\n            f.apply(this, [fail, zfail, zpass]);\n    }\n\n    _stencilOpSeparateFront(fail, zfail, zpass) {\n        this._stencilOpSeparate(this.FRONT, fail, zfail, zpass);\n    }\n\n    _stencilOpSeparateBack(fail, zfail, zpass) {\n        this._stencilOpSeparate(this.BACK, fail, zfail, zpass);\n    }\n\n    _stencilOpSeparateFrontAndBack(fail, zfail, zpass) {\n        this._stencilOpSeparate(this.FRONT_AND_BACK, fail, zfail, zpass);\n    }\n\n    $blendColor(red, green, blue, alpha) {\n        if (this._state.setSetting(this._blendColor, [red, green, blue, alpha]))\n            this._blendColor(red, green, blue, alpha);\n    }\n\n    $blendEquation(mode) {\n        if (this._state.setSetting(this._blendEquation, [mode]))\n            this._blendEquation(mode);\n    }\n\n    $blendEquationSeparate(modeRGB, modeAlpha) {\n        if (this._state.setSetting(this._blendEquationSeparate, [modeRGB, modeAlpha]))\n            this._blendEquationSeparate(modeRGB, modeAlpha);\n    }\n\n    $blendFunc(sfactor, dfactor) {\n        if (this._state.setSetting(this._blendFunc, [sfactor, dfactor]))\n            this._blendFunc(sfactor, dfactor);\n    }\n\n    $blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha) {\n        if (this._state.setSetting(this._blendFuncSeparate, [srcRGB, dstRGB, srcAlpha, dstAlpha]))\n            this._blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\n    }\n\n    $clearColor(red, green, blue, alpha) {\n        if (this._state.setSetting(this._clearColor, [red, green, blue, alpha]))\n            this._clearColor(red, green, blue, alpha);\n    }\n\n    $clearDepth(depth) {\n        if (this._state.setSetting(this._clearDepth, [depth]))\n            this._clearDepth(depth);\n    }\n\n    $clearStencil(s) {\n        if (this._state.setSetting(this._clearStencil, [s]))\n            this._clearStencil(s);\n    }\n\n    $colorMask(red, green, blue, alpha) {\n        if (this._state.setSetting(this._colorMask, [red, green, blue, alpha]))\n            this._colorMask(red, green, blue, alpha);\n    }\n\n    $cullFace(mode) {\n        if (this._state.setSetting(this._cullFace, [mode]))\n            this._cullFace(mode);\n    }\n\n    $depthFunc(func) {\n        if (this._state.setSetting(this._depthFunc, [func]))\n            this._depthFunc(func);\n    }\n\n    $depthMask(flag) {\n        if (this._state.setSetting(this._depthMask, [flag]))\n            this._depthMask(flag);\n    }\n\n    $depthRange(zNear, zFar) {\n        if (this._state.setSetting(this._depthRange, [zNear, zFar]))\n            this._depthRange(zNear, zFar);\n    }\n\n    $frontFace(mode) {\n        if (this._state.setSetting(this._frontFace, [mode]))\n            this._frontFace(mode);\n    }\n\n    $lineWidth(width) {\n        if (this._state.setSetting(this._lineWidth, [width]))\n            this._lineWidth(width);\n    }\n\n    $polygonOffset(factor, units) {\n        if (this._state.setSetting(this._polygonOffset, [factor, units]))\n            this._polygonOffset(factor, units);\n    }\n\n    $sampleCoverage(value, invert) {\n        if (this._state.setSetting(this._sampleCoverage, [value, invert]))\n            this._sampleCoverage(value, invert);\n    }\n\n    $stencilFunc(func, ref, mask) {\n        if (this._state.setSetting(this._stencilFunc, [func, ref, mask]))\n            this._stencilFunc(func, ref, mask);\n    }\n\n    $stencilMask(mask) {\n        if (this._state.setSetting(this._stencilMask, [mask]))\n            this._stencilMask(mask);\n    }\n\n    $stencilOp(fail, zfail, zpass) {\n        if (this._state.setSetting(this._stencilOp, [fail, zfail, zpass]))\n            this._stencilOp(fail, zfail, zpass);\n    }\n\n    $vertexAttrib1f(indx, x) {\n        if (this._state.setSetting(this._vertexAttrib1f, [indx, x]))\n            this._vertexAttrib1f(indx, x);\n    }\n\n    $vertexAttrib1fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib1fv, [indx, values]))\n            this._vertexAttrib1fv(indx, values);\n    }\n\n    $vertexAttrib2f(indx, x, y) {\n        if (this._state.setSetting(this._vertexAttrib2f, [indx, x, y]))\n            this._vertexAttrib2f(indx, x, y);\n    }\n\n    $vertexAttrib2fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib2fv, [indx, values]))\n            this._vertexAttrib2fv(indx, values);\n    }\n\n    $vertexAttrib3f(indx, x, y, z) {\n        if (this._state.setSetting(this._vertexAttrib3f, [indx, x, y, z]))\n            this._vertexAttrib3f(indx, x, y, z);\n    }\n\n    $vertexAttrib3fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib3fv, [indx, values]))\n            this._vertexAttrib3fv(indx, values);\n    }\n\n    $vertexAttrib4f(indx, x, y, z, w) {\n        if (this._state.setSetting(this._vertexAttrib4f, [indx, x, y, z, w]))\n            this._vertexAttrib4f(indx, x, y, z, w);\n    }\n\n    $vertexAttrib4fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib4fv, [indx, values]))\n            this._vertexAttrib4fv(indx, values);\n    }\n\n    /**\n     * Sets up the rendering context for context sharing.\n     * @param {WebGLRenderingContext} gl\n     * @param {string} id\n     */\n    static enable(gl, id = \"default\") {\n        const names = Object.getOwnPropertyNames(WebGLStateManager.prototype);\n        const WebGLRenderingContextProto = gl.__proto__;\n        names.forEach(name => {\n            if (name !== \"constructor\") {\n                const method = WebGLStateManager.prototype[name];\n                if (name.charAt(0) === \"$\") {\n                    name = name.substr(1);\n                }\n                if (gl[name] !== method) {\n                    if (gl[name]) {\n                        if (!gl[name].name) {\n                            // We do this for compatibility with the Chrome WebGL Inspector plugin.\n                            gl[name].xname = name;\n                        }\n                        gl['_' + name] = gl[name];\n                    }\n                    gl[name] = method;\n                }\n            }\n        });\n\n        WebGLStateManager.prototype._initStateManager.call(gl, id);\n\n        return gl;\n    }\n\n}\n\nexport default WebGLStateManager;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport TextureSource from \"./TextureSource.mjs\";\nimport Stage from './Stage.mjs';\n\nexport default class TextureManager {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        /**\n         * The currently used amount of texture memory.\n         * @type {number}\n         */\n        this._usedMemory = 0;\n\n        /**\n         * All uploaded texture sources.\n         * @type {TextureSource[]}\n         */\n        this._uploadedTextureSources = [];\n\n        /**\n         * The texture source lookup id to texture source hashmap.\n         * @type {Map<String, TextureSource>}\n         */\n        this.textureSourceHashmap = new Map();\n\n    }\n\n    get usedMemory() {\n        return this._usedMemory;\n    }\n\n    destroy() {\n        for (let i = 0, n = this._uploadedTextureSources.length; i < n; i++) {\n            this._nativeFreeTextureSource(this._uploadedTextureSources[i]);\n        }\n        \n        this.textureSourceHashmap.clear();\n        this._usedMemory = 0;\n    }\n\n    getReusableTextureSource(id) {\n        return this.textureSourceHashmap.get(id);\n    }\n\n    getTextureSource(func, id) {\n        // Check if texture source is already known.\n        let textureSource = id ? this.textureSourceHashmap.get(id) : null;\n        if (!textureSource) {\n            // Create new texture source.\n            textureSource = new TextureSource(this, func);\n\n            if (id) {\n                textureSource.lookupId = id;\n                this.textureSourceHashmap.set(id, textureSource);\n            }\n        }\n\n        return textureSource;\n    }\n\n    uploadTextureSource(textureSource, options) {\n        if (textureSource.isLoaded()) return;\n\n        this._addMemoryUsage(textureSource.w * textureSource.h);\n\n        // Load texture.\n        const nativeTexture = this._nativeUploadTextureSource(textureSource, options);\n\n        textureSource._nativeTexture = nativeTexture;\n\n        // We attach w and h to native texture (we need it in CoreRenderState._isRenderTextureReusable).\n        nativeTexture.w = textureSource.w;\n        nativeTexture.h = textureSource.h;\n\n        nativeTexture.update = this.stage.frameCounter;\n\n        this._uploadedTextureSources.push(textureSource);\n        \n        this.addToLookupMap(textureSource);\n\n        // add VRAM tracking if using the webgl renderer\n        this._updateVramUsage(textureSource, 1);\n    }\n\n    _addMemoryUsage(delta) {\n        this._usedMemory += delta;\n        this.stage.addMemoryUsage(delta);\n    }\n\n    _updateVramUsage(textureSource, sign) {\n        const nativeTexture = textureSource.nativeTexture;\n        var usage;\n\n        // do nothing if webgl isn't even supported\n        if (!Stage.isWebglSupported())\n            return;\n\n        // or if there is no native texture\n        if (!textureSource.isLoaded())\n            return;\n\n        // or, finally, if there is no bytes per pixel specified\n        if (!nativeTexture.hasOwnProperty('bytesPerPixel') || isNaN(nativeTexture.bytesPerPixel))\n            return;\n\n        usage = sign * (textureSource.w * textureSource.h * nativeTexture.bytesPerPixel);\n\n        this.stage.addVramUsage(usage, textureSource.hasAlpha);\n    }\n\n    addToLookupMap(textureSource) {\n        const lookupId = textureSource.lookupId;\n        if (lookupId) {\n            if (!this.textureSourceHashmap.has(lookupId)) {\n                this.textureSourceHashmap.set(lookupId, textureSource);\n            }\n        }\n    }\n\n    gc() {\n        this.freeUnusedTextureSources();\n    }\n    \n    freeUnusedTextureSources() {\n        let remainingTextureSources = [];\n        for (let i = 0, n = this._uploadedTextureSources.length; i < n; i++) {\n            let ts = this._uploadedTextureSources[i];\n            if (ts.allowCleanup()) {\n                this._freeManagedTextureSource(ts);\n            } else {\n                remainingTextureSources.push(ts);\n            }\n        }\n\n        this._uploadedTextureSources = remainingTextureSources;\n\n        this._cleanupLookupMap();\n    }\n\n    _freeManagedTextureSource(textureSource) {\n        if (textureSource.isLoaded()) {\n            this._nativeFreeTextureSource(textureSource);\n            this._addMemoryUsage(-textureSource.w * textureSource.h);\n\n            // add VRAM tracking if using the webgl renderer\n            this._updateVramUsage(textureSource, -1);\n        }\n\n        // Should be reloaded.\n        textureSource.loadingSince = null;\n    }\n\n    _cleanupLookupMap() {\n        // We keep those that still have value (are being loaded or already loaded, or are likely to be reused).\n        this.textureSourceHashmap.forEach((textureSource, lookupId) => {\n            if (!(textureSource.isLoaded() || textureSource.isLoading()) && !textureSource.isUsed()) {\n                this.textureSourceHashmap.delete(lookupId);\n            }\n        });\n    }\n\n    /**\n     * Externally free texture source.\n     * @param textureSource\n     */\n    freeTextureSource(textureSource) {\n        const index = this._uploadedTextureSources.indexOf(textureSource);\n        const managed = (index !== -1);\n\n        if (textureSource.isLoaded()) {\n            if (managed) {\n                this._addMemoryUsage(-textureSource.w * textureSource.h);\n                this._uploadedTextureSources.splice(index, 1);\n            }\n            this._nativeFreeTextureSource(textureSource);\n        }\n\n        // Should be reloaded.\n        textureSource.loadingSince = null;\n    }\n\n    _nativeUploadTextureSource(textureSource, options) {\n        return this.stage.renderer.uploadTextureSource(textureSource, options);\n    }\n\n    _nativeFreeTextureSource(textureSource) {\n        this.stage.renderer.freeTextureSource(textureSource);\n        textureSource.clearNativeTexture();\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Allows throttling of loading texture sources, keeping the app responsive.\n */\nexport default class TextureThrottler {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.genericCancelCb = (textureSource) => {\n            this._remove(textureSource);\n        };\n\n        this._sources = [];\n        this._data = [];\n    }\n\n    destroy() {\n        this._sources = [];\n        this._data = [];\n        this.stage = null;\n\n        delete this._sources;\n        delete this._data;\n        delete this.stage;\n    }\n\n    processSome() {\n        if (this._sources.length) {\n            const start = Date.now();\n            do {\n                this._processItem();\n            } while(this._sources.length && (Date.now() - start < TextureThrottler.MAX_UPLOAD_TIME_PER_FRAME));\n        }\n    }\n\n    _processItem() {\n        const source = this._sources.pop();\n        const data = this._data.pop();\n        if (source.isLoading()) {\n            source.processLoadedSource(data);\n        }\n    }\n\n    add(textureSource, data) {\n        this._sources.push(textureSource);\n        this._data.push(data);\n    }\n\n    _remove(textureSource) {\n        const index = this._sources.indexOf(textureSource);\n        if (index >= 0) {\n            this._sources.splice(index, 1);\n            this._data.splice(index, 1);\n        }\n    }\n\n}\n\nTextureThrottler.MAX_UPLOAD_TIME_PER_FRAME = 10;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport default class CoreContext {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.root = null;\n\n        this.updateTreeOrder = 0;\n\n        this.renderState = this.stage.renderer.createCoreRenderState(this);\n\n        this.renderExec = this.stage.renderer.createCoreRenderExecutor(this);\n        this.renderExec.init();\n\n        this._usedMemory = 0;\n        this._renderTexturePool = [];\n\n        this._renderTextureId = 1;\n\n        this._zSorts = [];\n\n        this.renderToTextureCount = 0;\n    }\n\n    get usedMemory() {\n        return this._usedMemory;\n    }\n\n    destroy() {\n        this._renderTexturePool.forEach(texture => this._freeRenderTexture(texture));\n        this._usedMemory = 0;\n\n        this.stage = null;\n        this.root = null;\n\n        this.renderState = null;\n        this.renderExec = null;\n        this._renderTexturePool = null;\n        this._zSorts = null;\n\n        delete this.stage;\n        delete this.root;\n        delete this.renderState;\n        delete this.renderExec;\n        delete this._renderTexturePool;\n        delete this._zSorts;\n    }\n\n    hasRenderUpdates() {\n        return !!this.root._parent._hasRenderUpdates;\n    }\n\n    render() {\n        // Clear flag to identify if anything changes before the next frame.\n        this.root._parent._hasRenderUpdates = 0;\n\n        this._render();\n    }\n\n    update() {\n        this._update();\n\n        // Due to the boundsVisibility flag feature (and onAfterUpdate hook), it is possible that other elements were\n        // changed during the update loop (for example due to the txLoaded event). We process these changes immediately\n        // (but not recursively to prevent infinite loops).\n        if (this.root._hasUpdates) {\n            this._update();\n        }\n\n        this._performForcedZSorts();\n    }\n\n    /**\n     * Certain ElementCore items may be forced to zSort to strip out references to prevent memleaks..\n     */\n    _performForcedZSorts() {\n        const n = this._zSorts.length;\n        if (n) {\n            // Forced z-sorts (ElementCore may force a z-sort in order to free memory/prevent memory leaks).\n            for (let i = 0, n = this._zSorts.length; i < n; i++) {\n                if (this._zSorts[i].zSort) {\n                    this._zSorts[i].sortZIndexedChildren();\n                }\n            }\n            this._zSorts = [];\n        }\n    }\n\n    _update() {\n        this.updateTreeOrder = 0;\n\n        this.root.update();\n    }\n\n    _render() {\n        const debugFrame = this.stage.getOption('debugFrame');\n        // Obtain a sequence of the quad operations.\n        this._fillRenderState();\n\n        if (this.stage.getOption('readPixelsBeforeDraw')) {\n            this._readPixels();\n        }\n\n        // Now run them with the render executor.\n        this._performRender();\n\n        if (debugFrame) {\n            console.log(`[Lightning] RTT Renders in frame: ${this.renderToTextureCount}`)\n        }\n\n        // Block OpenGL pipeline to prevent framebuffer flickering\n        // on certain devices\n        if (this.stage.getOption('readPixelsAfterDraw') &&\n            this.renderToTextureCount >= this.stage.getOption('readPixelsAfterDrawThreshold')\n        ) {\n            if (debugFrame) {\n                console.log(`[Lightning] readPixelsAfterDraw behavior triggered`)\n            }\n            this._readPixels();\n        }\n\n        this.renderToTextureCount = 0;\n    }\n\n    _readPixels() {\n        const pixels = new Uint8Array(4);\n        const gl = this.stage.gl;\n        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    }\n\n    _fillRenderState() {\n        this.renderState.reset();\n        this.root.render();\n        this.renderState.finish();\n    }\n\n    _performRender() {\n        this.renderExec.execute();\n    }\n\n    _addMemoryUsage(delta) {\n        this._usedMemory += delta;\n        this.stage.addMemoryUsage(delta);\n    }\n\n    allocateRenderTexture(w, h) {\n        let prec = this.stage.getRenderPrecision();\n        let pw = Math.max(1, Math.round(w * prec));\n        let ph = Math.max(1, Math.round(h * prec));\n\n        // Search last item first, so that last released render texture is preferred (may cause memory cache benefits).\n        const n = this._renderTexturePool.length;\n        for (let i = n - 1; i >= 0; i--) {\n            const texture = this._renderTexturePool[i];\n            // We don't want to reuse the same render textures within the same frame because that will create gpu stalls.\n            if (texture.w === pw && texture.h === ph && (texture.update !== this.stage.frameCounter)) {\n                texture.f = this.stage.frameCounter;\n                this._renderTexturePool.splice(i, 1);\n                return texture;\n            }\n        }\n\n        const texture = this._createRenderTexture(w, h, pw, ph);\n        texture.precision = prec;\n        return texture;\n    }\n\n    releaseRenderTexture(texture) {\n        this._renderTexturePool.push(texture);\n    }\n\n    freeUnusedRenderTextures(maxAge = 60) {\n        // Clean up all textures that are no longer used.\n        // This cache is short-lived because it is really just meant to supply running shaders that are\n        // updated during a number of frames.\n        let limit = this.stage.frameCounter - maxAge;\n\n        this._renderTexturePool = this._renderTexturePool.filter(texture => {\n            if (texture.f <= limit) {\n                this._freeRenderTexture(texture);\n                return false;\n            }\n            return true;\n        });\n    }\n\n    _createRenderTexture(w, h, pw, ph) {\n        this._addMemoryUsage(pw * ph);\n\n        const texture = this.stage.renderer.createRenderTexture(w, h, pw, ph);\n        texture.id = this._renderTextureId++;\n        texture.f = this.stage.frameCounter;\n        texture.ow = w;\n        texture.oh = h;\n        texture.w = pw;\n        texture.h = ph;\n\n        return texture;\n    }\n\n    _freeRenderTexture(nativeTexture) {\n        this.stage.renderer.freeRenderTexture(nativeTexture);\n        this._addMemoryUsage(-nativeTexture.w * nativeTexture.h);\n    }\n\n    copyRenderTexture(renderTexture, nativeTexture, options) {\n        this.stage.renderer.copyRenderTexture(renderTexture, nativeTexture, options);\n    }\n\n    forceZSort(elementCore) {\n        this._zSorts.push(elementCore);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Base from \"../tree/Base.mjs\";\n\nexport default class TransitionSettings {\n    constructor(stage) {\n        this.stage = stage;\n        this._timingFunction = 'ease';\n        this._timingFunctionImpl = StageUtils.getTimingFunction(this._timingFunction);\n        this.delay = 0;\n        this.duration = 0.2;\n        this.merger = null;\n    }\n\n    get timingFunction() {\n        return this._timingFunction;\n    }\n\n    set timingFunction(v) {\n        this._timingFunction = v;\n        this._timingFunctionImpl = StageUtils.getTimingFunction(v);\n    }\n\n    get timingFunctionImpl() {\n        return this._timingFunctionImpl;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n}\n\nTransitionSettings.prototype.isTransitionSettings = true;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class TransitionManager {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.stage.on('frameStart', () => this.progress());\n\n        /**\n         * All transitions that are running and attached.\n         * (we don't support transitions on un-attached elements to prevent memory leaks)\n         * @type {Set<Transition>}\n         */\n        this.active = new Set();\n\n        this.defaultTransitionSettings = new TransitionSettings(this.stage);\n    }\n\n    progress() {\n        if (this.active.size) {\n            let dt = this.stage.dt;\n\n            let filter = false;\n            this.active.forEach(function(a) {\n                a.progress(dt);\n                if (!a.isRunning()) {\n                    filter = true;\n                }\n            });\n\n            if (filter) {\n                this.active = new Set([...this.active].filter(t => (t.isRunning())));\n            }\n        }\n    }\n\n    createSettings(settings) {\n        const transitionSettings = new TransitionSettings();\n        Base.patchObject(transitionSettings, settings);\n        return transitionSettings;\n    }\n\n    addActive(transition) {\n        this.active.add(transition);\n    }\n\n    removeActive(transition) {\n        this.active.delete(transition);\n    }\n}\n\nimport Base from \"../tree/Base.mjs\";\nimport TransitionSettings from \"./TransitionSettings.mjs\";\nimport Transition from \"./Transition.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class MultiSpline {\n\n    constructor() {\n        this._clear();\n    }\n\n    _clear() {\n        this._p = [];\n        this._pe = [];\n        this._idp = [];\n        this._f = [];\n        this._v = [];\n        this._lv = [];\n        this._sm = [];\n        this._s = [];\n        this._ve = [];\n        this._sme = [];\n        this._se = [];\n\n        this._length = 0;\n    }\n\n    parse(rgba, def) {\n        let i, n;\n        if (!Utils.isObjectLiteral(def)) {\n            def = {0: def}\n        }\n\n        let defaultSmoothness = 0.5;\n\n        let items = [];\n        for (let key in def) {\n            if (def.hasOwnProperty(key)) {\n                let obj = def[key];\n                if (!Utils.isObjectLiteral(obj)) {\n                    obj = {v: obj}\n                }\n\n                let p = parseFloat(key);\n\n                if (key === \"sm\") {\n                    defaultSmoothness = obj.v;\n                } else if (!isNaN(p) && p >= 0 && p <= 2) {\n                    obj.p = p;\n\n                    obj.f = Utils.isFunction(obj.v);\n                    obj.lv = obj.f ? obj.v(0, 0) : obj.v;\n\n                    items.push(obj);\n                }\n            }\n        }\n\n        // Sort by progress value.\n        items = items.sort(function(a, b) {return a.p - b.p});\n\n        n = items.length;\n\n        for (i = 0; i < n; i++) {\n            let last = (i === n - 1);\n            if (!items[i].hasOwnProperty('pe')) {\n                // Progress.\n                items[i].pe = last ? (items[i].p <= 1 ? 1 : 2 /* support onetotwo stop */) : items[i + 1].p;\n            } else {\n                // Prevent multiple items at the same time.\n                const max = i < n - 1 ? items[i + 1].p : 1;\n                if (items[i].pe > max) {\n                    items[i].pe = max;\n                }\n            }\n            if (items[i].pe === items[i].p) {\n                items[i].idp = 0;\n            } else {\n                items[i].idp = 1 / (items[i].pe - items[i].p);\n            }\n        }\n\n        // Color merger: we need to split/combine RGBA components.\n\n        // Calculate bezier helper values.;\n        for (i = 0; i < n; i++) {\n            if (!items[i].hasOwnProperty('sm')) {\n                // Smoothness.;\n                items[i].sm = defaultSmoothness;\n            }\n            if (!items[i].hasOwnProperty('s')) {\n                // Slope.;\n                if (i === 0 || i === n - 1 || (items[i].p === 1 /* for onetotwo */)) {\n                    // Horizontal slope at start and end.;\n                    items[i].s = rgba ? [0, 0, 0, 0] : 0;\n                } else {\n                    const pi = items[i - 1];\n                    const ni = items[i + 1];\n                    if (pi.p === ni.p) {\n                        items[i].s = rgba ? [0, 0, 0, 0] : 0;\n                    } else {\n                        if (rgba) {\n                            const nc = MultiSpline.getRgbaComponents(ni.lv);\n                            const pc = MultiSpline.getRgbaComponents(pi.lv);\n                            const d = 1 / (ni.p - pi.p);\n                            items[i].s = [\n                                d * (nc[0] - pc[0]),\n                                d * (nc[1] - pc[1]),\n                                d * (nc[2] - pc[2]),\n                                d * (nc[3] - pc[3])\n                            ];\n                        } else {\n                            items[i].s = (ni.lv - pi.lv) / (ni.p - pi.p);\n                        }\n                    }\n                }\n            }\n        }\n\n        for (i = 0; i < n - 1; i++) {\n            // Calculate value function.;\n            if (!items[i].f) {\n\n                let last = (i === n - 1);\n                if (!items[i].hasOwnProperty('ve')) {\n                    items[i].ve = last ? items[i].lv : items[i + 1].lv;\n                }\n\n                // We can only interpolate on numeric values. Non-numeric values are set literally when reached time.\n                if (Utils.isNumber(items[i].v) && Utils.isNumber(items[i].lv)) {\n                    if (!items[i].hasOwnProperty('sme')) {\n                        items[i].sme = last ? defaultSmoothness : items[i + 1].sm;\n                    }\n                    if (!items[i].hasOwnProperty('se')) {\n                        items[i].se = last ? (rgba ? [0, 0, 0, 0] : 0) : items[i + 1].s;\n                    }\n\n                    // Generate spline.;\n                    if (rgba) {\n                        items[i].v = MultiSpline.getSplineRgbaValueFunction(items[i].v, items[i].ve, items[i].p, items[i].pe, items[i].sm, items[i].sme, items[i].s, items[i].se);\n                    } else {\n                        items[i].v = MultiSpline.getSplineValueFunction(items[i].v, items[i].ve, items[i].p, items[i].pe, items[i].sm, items[i].sme, items[i].s, items[i].se);\n                    }\n\n                    items[i].f = true;\n                }\n            }\n        }\n\n        if (this.length) {\n            this._clear();\n        }\n\n        for (i = 0, n = items.length; i < n; i++) {\n            this._add(items[i]);\n        }\n    }\n\n    _add(item) {\n        this._p.push(item.p || 0);\n        this._pe.push(item.pe || 0);\n        this._idp.push(item.idp || 0);\n        this._f.push(item.f || false);\n        this._v.push(item.hasOwnProperty('v') ? item.v : 0 /* v might be false or null */ );\n        this._lv.push(item.lv || 0);\n        this._sm.push(item.sm || 0);\n        this._s.push(item.s || 0);\n        this._ve.push(item.ve || 0);\n        this._sme.push(item.sme || 0);\n        this._se.push(item.se || 0);\n        this._length++;\n    }\n\n    _getItem(p) {\n        const n = this._length;\n        if (!n) {\n            return -1;\n        }\n\n        if (p < this._p[0]) {\n            return 0;\n        }\n\n        for (let i = 0; i < n; i++) {\n            if (this._p[i] <= p && p < this._pe[i]) {\n                return i;\n            }\n        }\n\n        return n - 1;\n    }\n\n    getValue(p) {\n        const i = this._getItem(p);\n        if (i === -1) {\n            return undefined;\n        } else {\n            if (this._f[i]) {\n                const o = Math.min(1, Math.max(0, (p - this._p[i]) * this._idp[i]));\n                return this._v[i](o);\n            } else {\n                return this._v[i];\n            }\n        }\n    }\n\n    get length() {\n        return this._length;\n    }\n\n    static getRgbaComponents(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        let a = ((argb / 16777216) | 0);\n        return [r, g, b, a];\n    };\n\n    static getSplineValueFunction(v1, v2, p1, p2, o1, i2, s1, s2) {\n        // Normalize slopes because we use a spline that goes from 0 to 1.\n        let dp = p2 - p1;\n        s1 *= dp;\n        s2 *= dp;\n\n        let helpers = MultiSpline.getSplineHelpers(v1, v2, o1, i2, s1, s2);\n        if (!helpers) {\n            return function (p) {\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n\n                return v2 * p + v1 * (1 - p);\n            };\n        } else {\n            return function (p) {\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n                return MultiSpline.calculateSpline(helpers, p);\n            };\n        }\n    };\n\n    static getSplineRgbaValueFunction(v1, v2, p1, p2, o1, i2, s1, s2) {\n        // Normalize slopes because we use a spline that goes from 0 to 1.\n        let dp = p2 - p1;\n        s1[0] *= dp;\n        s1[1] *= dp;\n        s1[2] *= dp;\n        s1[3] *= dp;\n        s2[0] *= dp;\n        s2[1] *= dp;\n        s2[2] *= dp;\n        s2[3] *= dp;\n\n        let cv1 = MultiSpline.getRgbaComponents(v1);\n        let cv2 = MultiSpline.getRgbaComponents(v2);\n\n        let helpers = [\n            MultiSpline.getSplineHelpers(cv1[0], cv2[0], o1, i2, s1[0], s2[0]),\n            MultiSpline.getSplineHelpers(cv1[1], cv2[1], o1, i2, s1[1], s2[1]),\n            MultiSpline.getSplineHelpers(cv1[2], cv2[2], o1, i2, s1[2], s2[2]),\n            MultiSpline.getSplineHelpers(cv1[3], cv2[3], o1, i2, s1[3], s2[3])\n        ];\n\n        if (!helpers[0]) {\n            return function (p) {\n                // Linear.\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n\n                return MultiSpline.mergeColors(v2, v1, p);\n            };\n        } else {\n            return function (p) {\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n\n                return MultiSpline.getArgbNumber([\n                    Math.min(255, MultiSpline.calculateSpline(helpers[0], p)),\n                    Math.min(255, MultiSpline.calculateSpline(helpers[1], p)),\n                    Math.min(255, MultiSpline.calculateSpline(helpers[2], p)),\n                    Math.min(255, MultiSpline.calculateSpline(helpers[3], p))\n                ]);\n            };\n        }\n\n    };\n\n    /**\n     * Creates helpers to be used in the spline function.\n     * @param {number} v1\n     *   From value.\n     * @param {number} v2\n     *   To value.\n     * @param {number} o1\n     *   From smoothness (0 = linear, 1 = smooth).\n     * @param {number} s1\n     *   From slope (0 = horizontal, infinite = vertical).\n     * @param {number} i2\n     *   To smoothness.\n     * @param {number} s2\n     *   To slope.\n     * @returns {Number[]}\n     *   The helper values to be supplied to the spline function.\n     *   If the configuration is actually linear, null is returned.\n     */\n    static getSplineHelpers(v1, v2, o1, i2, s1, s2) {\n        if (!o1 && !i2) {\n            // Linear.\n            return null;\n        }\n\n        // Cubic bezier points.\n        // http://cubic-bezier.com/\n        let csx = o1;\n        let csy = v1 + s1 * o1;\n        let cex = 1 - i2;\n        let cey = v2 - s2 * i2;\n\n        let xa = 3 * csx - 3 * cex + 1;\n        let xb = -6 * csx + 3 * cex;\n        let xc = 3 * csx;\n\n        let ya = 3 * csy - 3 * cey + v2 - v1;\n        let yb = 3 * (cey + v1) - 6 * csy;\n        let yc = 3 * (csy - v1);\n        let yd = v1;\n\n        return [xa, xb, xc, ya, yb, yc, yd];\n    };\n\n    /**\n     * Calculates the intermediate spline value based on the specified helpers.\n     * @param {number[]} helpers\n     *   Obtained from getSplineHelpers.\n     * @param {number} p\n     * @return {number}\n     */\n    static calculateSpline(helpers, p) {\n        let xa = helpers[0];\n        let xb = helpers[1];\n        let xc = helpers[2];\n        let ya = helpers[3];\n        let yb = helpers[4];\n        let yc = helpers[5];\n        let yd = helpers[6];\n\n        if (xa === -2 && ya === -2 && xc === 0 && yc === 0) {\n            // Linear.\n            return p;\n        }\n\n        // Find t for p.\n        let t = 0.5, cbx, dx;\n\n        for (let it = 0; it < 20; it++) {\n            // Cubic bezier function: f(t)=t*(t*(t*a+b)+c).\n            cbx = t * (t * (t * xa + xb) + xc);\n\n            dx = p - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                // Solution found!\n                return t * (t * (t * ya + yb) + yc) + yd;\n            }\n\n            // Cubic bezier derivative function: f'(t)=t*(t*(3*a)+2*b)+c\n            let cbxd = t * (t * (3 * xa) + 2 * xb) + xc;\n\n            if (cbxd > 1e-10 && cbxd < 1e-10) {\n                // Problematic. Fall back to binary search method.\n                break;\n            }\n\n            t += dx / cbxd;\n        }\n\n        // Fallback: binary search method. This is more reliable when there are near-0 slopes.\n        let minT = 0;\n        let maxT = 1;\n        for (let it = 0; it < 20; it++) {\n            t = 0.5 * (minT + maxT);\n\n            // Cubic bezier function: f(t)=t*(t*(t*a+b)+c)+d.\n            cbx = t * (t * (t * xa + xb) + xc);\n\n            dx = p - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                // Solution found!\n                return t * (t * (t * ya + yb) + yc) + yd;\n            }\n\n            if (dx < 0) {\n                maxT = t;\n            } else {\n                minT = t;\n            }\n        }\n\n        return t;\n    };\n\n    static mergeColors(c1, c2, p) {\n        let r1 = ((c1 / 65536) | 0) % 256;\n        let g1 = ((c1 / 256) | 0) % 256;\n        let b1 = c1 % 256;\n        let a1 = ((c1 / 16777216) | 0);\n\n        let r2 = ((c2 / 65536) | 0) % 256;\n        let g2 = ((c2 / 256) | 0) % 256;\n        let b2 = c2 % 256;\n        let a2 = ((c2 / 16777216) | 0);\n\n        let r = r1 * p + r2 * (1 - p);\n        let g = g1 * p + g2 * (1 - p);\n        let b = b1 * p + b2 * (1 - p);\n        let a = a1 * p + a2 * (1 - p);\n\n        return Math.round(a) * 16777216 + Math.round(r) * 65536 + Math.round(g) * 256 + Math.round(b);\n    };\n\n    static getArgbNumber(rgba) {\n        rgba[0] = Math.max(0, Math.min(255, rgba[0]));\n        rgba[1] = Math.max(0, Math.min(255, rgba[1]));\n        rgba[2] = Math.max(0, Math.min(255, rgba[2]));\n        rgba[3] = Math.max(0, Math.min(255, rgba[3]));\n        let v = ((rgba[3] | 0) << 24) + ((rgba[0] | 0) << 16) + ((rgba[1] | 0) << 8) + (rgba[2] | 0);\n        if (v < 0) {\n            v = 0xFFFFFFFF + v + 1;\n        }\n        return v;\n    };\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class AnimationActionSettings {\n\n    constructor(animationSettings) {\n\n        this.animationSettings = animationSettings;\n\n        /**\n         * The selector that selects the elements, or the element itself.\n         * @type {string | object}\n         */\n        this._selector = \"\";\n\n        /**\n         * The value items, ordered by progress offset.\n         * @type {MultiSpline}\n         * @private;\n         */\n        this._items = new MultiSpline();\n\n        /**\n         * The affected properties (paths).\n         * @private;\n         */\n        this._props = [];\n\n        /**\n         * Property setters, indexed according to props.\n         * @private;\n         */\n        this._propSetters = [];\n\n        this._resetValue = undefined;\n        this._hasResetValue = false;\n\n        this._hasColorProperty = undefined;\n    }\n\n    getResetValue() {\n        if (this._hasResetValue) {\n            return this._resetValue;\n        } else {\n            return this._items.getValue(0);\n        }\n    }\n\n    apply(element, p, factor) {\n        const elements = this.getAnimatedElements(element);\n\n        let v = this._items.getValue(p);\n\n        if (v === undefined || !elements.length) {\n            return;\n        }\n\n        if (factor !== 1) {\n            // Stop factor.;\n            let sv = this.getResetValue();\n\n            if (Utils.isNumber(v) && Utils.isNumber(sv)) {\n                if (this.hasColorProperty()) {\n                    v = StageUtils.mergeColors(v, sv, factor);\n                } else {\n                    v = StageUtils.mergeNumbers(v, sv, factor);\n                }\n            }\n        }\n\n        // Apply transformation to all components.;\n        const n = this._propSetters.length;\n\n        const m = elements.length;\n        for (let j = 0; j < m; j++) {\n            for (let i = 0; i < n; i++) {\n                this._propSetters[i](elements[j], v);\n            }\n        }\n    }\n    \n    getAnimatedElements(element) {\n        const selector = this._selector;\n        if (typeof selector === 'string') {\n            return element.select(selector);\n        } else {\n            return [selector];\n        }\n    }\n\n    reset(element) {\n        const elements = this.getAnimatedElements(element);\n\n        let v = this.getResetValue();\n\n        if (v === undefined || !elements.length) {\n            return;\n        }\n\n        // Apply transformation to all components.\n        const n = this._propSetters.length;\n\n        const m = elements.length;\n        for (let j = 0; j < m; j++) {\n            for (let i = 0; i < n; i++) {\n                this._propSetters[i](elements[j], v);\n            }\n        }\n    }\n    \n    set selector(v) {\n        this._selector = v;\n    }\n\n    set t(v) {\n        this.selector = v;\n    }\n\n    get resetValue() {\n        return this._resetValue;\n    }\n    \n    set resetValue(v) {\n        this._resetValue = v;\n        this._hasResetValue = (v !== undefined);\n    }\n\n    set rv(v) {\n        this.resetValue = v;\n    }\n\n    set value(v) {\n        this._items.parse(this.hasColorProperty(), v);\n    }\n\n    set v(v) {\n        this.value = v;\n    }\n\n    set properties(v) {\n        if (!Array.isArray(v)) {\n            v = [v];\n        }\n\n        this._props = [];\n\n        v.forEach((prop) => {\n            this._props.push(prop);\n            this._propSetters.push(Element.getSetter(prop));\n        });\n    }\n\n    set property(v) {\n        this._hasColorProperty = undefined;\n        this.properties = v;\n    }\n\n    set p(v) {\n        this.properties = v;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n    hasColorProperty() {\n        if (this._hasColorProperty === undefined) {\n            this._hasColorProperty = this._props.length ? Element.isColorProperty(this._props[0]) : false;\n        }\n        return this._hasColorProperty;\n    }\n}\n\nAnimationActionSettings.prototype.isAnimationActionSettings = true;\n\nimport MultiSpline from \"../tools/MultiSpline.mjs\";\nimport Element from \"../tree/Element.mjs\";\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport Base from \"../tree/Base.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport AnimationActionSettings from \"./AnimationActionSettings.mjs\";\nimport Base from \"../tree/Base.mjs\";\n\nexport default class AnimationSettings {\n    constructor() {\n        /**\n         * @type {AnimationActionSettings[]}\n         */\n        this._actions = [];\n\n        this.delay = 0;\n        this.duration = 1;\n\n        this.repeat = 0;\n        this.repeatOffset = 0;\n        this.repeatDelay = 0;\n\n        this.autostop = false;\n\n        this.stopMethod = AnimationSettings.STOP_METHODS.FADE;\n        this._stopTimingFunction = 'ease';\n        this._stopTimingFunctionImpl = StageUtils.getTimingFunction(this._stopTimingFunction);\n        this.stopDuration = 0;\n        this.stopDelay = 0;\n    }\n\n    get actions() {\n        return this._actions;\n    }\n\n    set actions(v) {\n        this._actions = [];\n        for (let i = 0, n = v.length; i < n; i++) {\n            const e = v[i];\n            if (!e.isAnimationActionSettings) {\n                const aas = new AnimationActionSettings(this);\n                aas.patch(e);\n                this._actions.push(aas);\n            } else {\n                this._actions.push(e);\n            }\n        }\n    }\n\n    /**\n     * Applies the animation to the specified element, for the specified progress between 0 and 1.\n     * @param {Element} element;\n     * @param {number} p;\n     * @param {number} factor;\n     */\n    apply(element, p, factor = 1) {\n        this._actions.forEach(function(action) {\n            action.apply(element, p, factor);\n        });\n    }\n\n    /**\n     * Resets the animation to the reset values.\n     * @param {Element} element;\n     */\n    reset(element) {\n        this._actions.forEach(function(action) {\n            action.reset(element);\n        });\n    }\n\n    get stopTimingFunction() {\n        return this._stopTimingFunction;\n    }\n\n    set stopTimingFunction(v) {\n        this._stopTimingFunction = v;\n        this._stopTimingFunctionImpl = StageUtils.getTimingFunction(v);\n    }\n\n    get stopTimingFunctionImpl() {\n        return this._stopTimingFunctionImpl;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n}\n\nAnimationSettings.STOP_METHODS = {\n    FADE: 'fade',\n    REVERSE: 'reverse',\n    FORWARD: 'forward',\n    IMMEDIATE: 'immediate',\n    ONETOTWO: 'onetotwo'\n};\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from \"../EventEmitter.mjs\";\nimport AnimationSettings from \"./AnimationSettings.mjs\";\n\nexport default class Animation extends EventEmitter {\n\n    constructor(manager, settings, element) {\n        super();\n\n        this.manager = manager;\n\n        this._settings = settings;\n\n        this._element = element;\n\n        this._state = Animation.STATES.IDLE;\n\n        this._p = 0;\n        this._delayLeft = 0;\n        this._repeatsLeft = 0;\n\n        this._stopDelayLeft = 0;\n        this._stopP = 0;\n    }\n\n    start() {\n        if (this._element && this._element.attached) {\n            this._p = 0;\n            this._delayLeft = this.settings.delay;\n            this._repeatsLeft = this.settings.repeat;\n            this._state = Animation.STATES.PLAYING;\n            this.emit('start');\n            this.checkActive();\n        } else {\n            console.warn(\"[Lightning] Element must be attached before starting animation\");\n        }\n    }\n\n    play() {\n        if (this._state === Animation.STATES.PAUSED) {\n            // Continue.;\n            this._state = Animation.STATES.PLAYING;\n            this.checkActive();\n            this.emit('resume');\n        } else if (this._state == Animation.STATES.STOPPING && this.settings.stopMethod == AnimationSettings.STOP_METHODS.REVERSE) {\n            // Continue.;\n            this._state = Animation.STATES.PLAYING;\n            this.emit('stopContinue');\n        } else if (this._state != Animation.STATES.PLAYING && this._state != Animation.STATES.FINISHED) {\n            // Restart.;\n            this.start();\n        }\n    }\n\n    pause() {\n        if (this._state === Animation.STATES.PLAYING) {\n            this._state = Animation.STATES.PAUSED;\n            this.emit('pause');\n        }\n    }\n\n    replay() {\n        if (this._state == Animation.STATES.FINISHED) {\n            this.start();\n        } else {\n            this.play();\n        }\n    }\n\n    skipDelay() {\n        this._delayLeft = 0;\n        this._stopDelayLeft = 0;\n    }\n\n    finish() {\n        if (this._state === Animation.STATES.PLAYING) {\n            this._delayLeft = 0;\n            this._p = 1;\n        } else if (this._state === Animation.STATES.STOPPING) {\n            this._stopDelayLeft = 0;\n            this._p = 0;\n        }\n    }\n\n    stop() {\n        if (this._state === Animation.STATES.STOPPED || this._state === Animation.STATES.IDLE) return;\n\n        this._stopDelayLeft = this.settings.stopDelay || 0;\n\n        if (((this.settings.stopMethod === AnimationSettings.STOP_METHODS.IMMEDIATE) && !this._stopDelayLeft) || this._delayLeft > 0) {\n            // Stop upon next progress.;\n            this._state = Animation.STATES.STOPPING;\n            this.emit('stop');\n        } else {\n            if (this.settings.stopMethod === AnimationSettings.STOP_METHODS.FADE) {\n                this._stopP = 0;\n            }\n\n            this._state = Animation.STATES.STOPPING;\n            this.emit('stop');\n        }\n\n        this.checkActive();\n    }\n\n    stopNow() {\n        if (this._state !== Animation.STATES.STOPPED || this._state !== Animation.STATES.IDLE) {\n            this._state = Animation.STATES.STOPPING;\n            this._p = 0;\n            this.emit('stop');\n            this.reset();\n            this._state = Animation.STATES.STOPPED;\n            this.emit('stopFinish');\n        }\n    }\n\n    isPaused() {\n        return this._state === Animation.STATES.PAUSED;\n    }\n\n    isPlaying() {\n        return this._state === Animation.STATES.PLAYING;\n    }\n\n    isStopping() {\n        return this._state === Animation.STATES.STOPPING;\n    }\n\n    isFinished() {\n        return this._state === Animation.STATES.FINISHED;\n    }\n\n    checkActive() {\n        if (this.isActive()) {\n            this.manager.addActive(this);\n        }\n    }\n\n    isActive() {\n        return (this._state == Animation.STATES.PLAYING || this._state == Animation.STATES.STOPPING) && this._element && this._element.attached;\n    }\n\n    progress(dt) {\n        if (!this._element) return;\n        this._progress(dt);\n        this.apply();\n    }\n\n    _progress(dt) {\n        if (this._state == Animation.STATES.STOPPING) {\n            this._stopProgress(dt);\n            return;\n        }\n\n        if (this._state != Animation.STATES.PLAYING) {\n            return;\n        }\n\n        if (this._delayLeft > 0) {\n            this._delayLeft -= dt;\n\n            if (this._delayLeft < 0) {\n                dt = -this._delayLeft;\n                this._delayLeft = 0;\n\n                this.emit('delayEnd');\n            } else {\n                return;\n            }\n        }\n\n        if (this.settings.duration === 0) {\n            this._p = 1;\n        } else if (this.settings.duration > 0) {\n            this._p += dt / this.settings.duration;\n        }\n        if (this._p >= 1) {\n            // Finished!;\n            if (this.settings.repeat == -1 || this._repeatsLeft > 0) {\n                if (this._repeatsLeft > 0) {\n                    this._repeatsLeft--;\n                }\n                this._p = this.settings.repeatOffset;\n                this.emit('progress', this._p);\n                \n                if (this.settings.repeatDelay) {\n                    this._delayLeft = this.settings.repeatDelay;\n                }\n\n                this.emit('repeat', this._repeatsLeft);\n            } else {\n                this._p = 1;\n                this.emit('progress', this._p);\n                \n                this._state = Animation.STATES.FINISHED;\n                this.emit('finish');\n                if (this.settings.autostop) {\n                    this.stop();\n                }\n            }\n        } else {\n            this.emit('progress', this._p);\n        }\n    }\n    \n    _stopProgress(dt) {\n        let duration = this._getStopDuration();\n\n        if (this._stopDelayLeft > 0) {\n            this._stopDelayLeft -= dt;\n\n            if (this._stopDelayLeft < 0) {\n                dt = -this._stopDelayLeft;\n                this._stopDelayLeft = 0;\n\n                this.emit('stopDelayEnd');\n            } else {\n                return;\n            }\n        }\n        if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.IMMEDIATE) {\n            this._state = Animation.STATES.STOPPED;\n            this.emit('stopFinish');\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.REVERSE) {\n            if (duration === 0) {\n                this._p = 0;\n            } else if (duration > 0) {\n                this._p -= dt / duration;\n            }\n\n            if (this._p <= 0) {\n                this._p = 0;\n                this._state = Animation.STATES.STOPPED;\n                this.emit('stopFinish');\n            }\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FADE) {\n            this._progressStopTransition(dt);\n            if (this._stopP >= 1) {\n                this._p = 0;\n                this._state = Animation.STATES.STOPPED;\n                this.emit('stopFinish');\n            }\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.ONETOTWO) {\n            if (this._p < 2) {\n                if (duration === 0) {\n                    this._p = 2;\n                } else if (duration > 0) {\n                    if (this._p < 1) {\n                        this._p += dt / this.settings.duration;\n                    } else {\n                        this._p += dt / duration;\n                    }\n                }\n                if (this._p >= 2) {\n                    this._p = 2;\n                    this._state = Animation.STATES.STOPPED;\n                    this.emit('stopFinish');\n                } else {\n                    this.emit('progress', this._p);\n                }\n            }\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FORWARD) {\n            if (this._p < 1) {\n                if (this.settings.duration == 0) {\n                    this._p = 1;\n                } else {\n                    this._p += dt / this.settings.duration;\n                }\n                if (this._p >= 1) {\n                    if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FORWARD) {\n                        this._p = 1;\n                        this._state = Animation.STATES.STOPPED;\n                        this.emit('stopFinish');\n                    } else {\n                        if (this._repeatsLeft > 0) {\n                            this._repeatsLeft--;\n                            this._p = 0;\n                            this.emit('repeat', this._repeatsLeft);\n                        } else {\n                            this._p = 1;\n                            this._state = Animation.STATES.STOPPED;\n                            this.emit('stopFinish');\n                        }\n                    }\n                } else {\n                    this.emit('progress', this._p);\n                }\n            }\n        }\n        \n    }\n    \n    _progressStopTransition(dt) {\n        if (this._stopP < 1) {\n            if (this._stopDelayLeft > 0) {\n                this._stopDelayLeft -= dt;\n\n                if (this._stopDelayLeft < 0) {\n                    dt = -this._stopDelayLeft;\n                    this._stopDelayLeft = 0;\n\n                    this.emit('delayEnd');\n                } else {\n                    return;\n                }\n            }\n            \n            const duration = this._getStopDuration();\n\n            if (duration == 0) {\n                this._stopP = 1;\n            } else {\n                this._stopP += dt / duration;\n            }\n            if (this._stopP >= 1) {\n                // Finished!;\n                this._stopP = 1;\n            }\n        }\n    }\n\n    _getStopDuration() {\n        return this.settings.stopDuration || this.settings.duration;\n    }\n\n    apply() {\n        if (this._state === Animation.STATES.STOPPED) {\n            this.reset();\n        } else {\n            let factor = 1;\n            if (this._state === Animation.STATES.STOPPING && this.settings.stopMethod === AnimationSettings.STOP_METHODS.FADE) {\n                factor = (1 - this.settings.stopTimingFunctionImpl(this._stopP));\n            }\n            this._settings.apply(this._element, this._p, factor);\n        }\n    }\n\n    reset() {\n        this._settings.reset(this._element);\n    }\n\n    get state() {\n        return this._state;\n    }\n\n    get p() {\n        return this._p;\n    }\n\n    get delayLeft() {\n        return this._delayLeft;\n    }\n\n    get element() {\n        return this._element;\n    }\n\n    get frame() {\n        return Math.round(this._p * this._settings.duration * 60);\n    }\n\n    get settings() {\n        return this._settings;\n    }\n\n}\n\nAnimation.STATES = {\n    IDLE: 0,\n    PLAYING: 1,\n    STOPPING: 2,\n    STOPPED: 3,\n    FINISHED: 4,\n    PAUSED: 5\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class AnimationManager {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.stage.on('frameStart', () => this.progress());\n\n        /**\n         * All running animations on attached subjects.\n         * @type {Set<Animation>}\n         */\n        this.active = new Set();\n    }\n\n    progress() {\n        if (this.active.size) {\n            let dt = this.stage.dt;\n\n            let filter = false;\n            this.active.forEach(function(a) {\n                if (a.isActive()) {\n                    a.progress(dt);\n                } else {\n                    filter = true;\n                }\n            });\n\n            if (filter) {\n                this.active = new Set([...this.active].filter(t => t.isActive()));\n            }\n        }\n    }\n\n    createAnimation(element, settings) {\n        if (Utils.isObjectLiteral(settings)) {\n            // Convert plain object to proper settings object.\n            settings = this.createSettings(settings);\n        }\n\n        return new Animation(\n            this,\n            settings,\n            element\n        );\n    }\n\n    createSettings(settings) {\n        const animationSettings = new AnimationSettings();\n        Base.patchObject(animationSettings, settings);\n        return animationSettings;\n    }\n\n    addActive(transition) {\n        this.active.add(transition);\n    }\n}\n\nimport Base from \"../tree/Base.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport AnimationSettings from \"./AnimationSettings.mjs\";\nimport Animation from \"./Animation.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class RectangleTexture extends Texture {\n\n    _getLookupId() {\n        return '__whitepix';\n    }\n\n    _getSourceLoader() {\n        return function(cb) {\n            var whitePixel = new Uint8Array([255, 255, 255, 255]);\n            cb(null, {source: whitePixel, w: 1, h: 1, permanent: true});\n        }\n    }\n\n    isAutosizeTexture() {\n        return false;\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Application render tree.\n */\n\nimport EventEmitter from \"../EventEmitter.mjs\";\nimport Utils from \"./Utils.mjs\";\nimport WebGLRenderer from \"../renderer/webgl/WebGLRenderer.mjs\";\nimport C2dRenderer from \"../renderer/c2d/C2dRenderer.mjs\";\nimport SparkRenderer from \"../renderer/spark/SparkRenderer.mjs\";\nimport PlatformLoader from \"../platforms/PlatformLoader.mjs\";\nimport WebGLStateManager from \"../tools/WebGLStateManager.mjs\";\nimport Shader from \"./Shader.mjs\";\n\nexport default class Stage extends EventEmitter {\n\n    constructor(options = {}) {\n        super();\n        this._setOptions(options);\n\n        this._usedMemory = 0;\n        this._lastGcFrame = 0;\n\n        // attempt to track VRAM usage more accurately by accounting for different color channels\n        this._usedVramAlpha = 0;\n        this._usedVramNonAlpha = 0;\n\n        const platformType = Stage.platform ? Stage.platform : PlatformLoader.load(options);\n        this.platform = new platformType();\n\n        if (this.platform.init) {\n            this.platform.init(this);\n        }\n\n        this.gl = null;\n        this.c2d = null;\n\n        const context = this.getOption('context');\n        if (context) {\n            if (context.useProgram) {\n                this.gl = context;\n            } else {\n                this.c2d = context;\n            }\n        } else {\n            if (Utils.isWeb && (!Stage.isWebglSupported() || this.getOption('canvas2d'))) {\n                this.c2d = this.platform.createCanvasContext(this.getOption('w'), this.getOption('h'));\n            } else {\n                this.gl = this.platform.createWebGLContext(this.getOption('w'), this.getOption('h'));\n            }\n        }\n\n        if (this.gl) {\n            // Wrap in WebGLStateManager.\n            // This prevents unnecessary double WebGL commands from being executed, and allows context switching.\n            // Context switching is necessary when reusing the same context for Three.js.\n            // Note that the user must make sure that the WebGL context is untouched before creating the application,\n            //  when manually passing over a canvas or context in the options.\n            WebGLStateManager.enable(this.gl, \"lightning\")\n        }\n\n        this._mode = this.gl ? 0 : 1;\n\n        // Override width and height.\n        if (this.getCanvas()) {\n            if (this.getOption('devicePixelRatio') !== 1) {\n                const ratio = this.getOption('devicePixelRatio');\n                // set correct display sie\n                this.getCanvas().style.width = this._options['w'] / ratio  + 'px';\n                this.getCanvas().style.height = this._options['h'] / ratio + 'px';\n            }\n\n            // set display buffer size\n            this._options.w = this.getCanvas().width;\n            this._options.h = this.getCanvas().height;\n        }\n\n        if (this._mode === 0) {\n            if (Utils.isSpark) {\n                this._renderer = new SparkRenderer(this);\n            } else {\n                this._renderer = new WebGLRenderer(this);\n            }\n        } else {\n            this._renderer = new C2dRenderer(this);\n        }\n\n        this.setClearColor(this.getOption('clearColor'));\n\n        this.frameCounter = 0;\n\n        this.transitions = new TransitionManager(this);\n        this.animations = new AnimationManager(this);\n\n        this.textureManager = new TextureManager(this);\n        this.textureThrottler = new TextureThrottler(this);\n\n        this.startTime = 0;\n        this.currentTime = 0;\n        this.dt = 0;\n\n        // Preload rectangle texture, so that we can skip some border checks for loading textures.\n        this.rectangleTexture = new RectangleTexture(this);\n        this.rectangleTexture.load();\n\n        // Never clean up because we use it all the time.\n        this.rectangleTexture.source.permanent = true;\n\n        this.ctx = new CoreContext(this);\n\n        this._updateSourceTextures = new Set();\n    }\n\n    get renderer() {\n        return this._renderer;\n    }\n\n    static isWebglSupported() {\n        if (Utils.isNode) {\n            return true;\n        }\n\n        try {\n            return !!window.WebGLRenderingContext;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns the rendering mode.\n     * @returns {number}\n     *  0: WebGL\n     *  1: Canvas2d\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    isWebgl() {\n        return this.mode === 0;\n    }\n\n    isC2d() {\n        return this.mode === 1;\n    }\n\n    getOption(name) {\n        return this._options[name];\n    }\n\n    _setOptions(o) {\n        this._options = {};\n\n        let opt = (name, def) => {\n            let value = o[name];\n\n            if (value === undefined) {\n                this._options[name] = def;\n            } else {\n                this._options[name] = value;\n            }\n        }\n\n        opt('canvas', null);\n        opt('context', null);\n        opt('w', 1920);\n        opt('h', 1080);\n        opt('srcBasePath', null);\n        opt('memoryPressure', 24e6);\n        opt('bufferMemory', 2e6);\n        opt('textRenderIssueMargin', 0);\n        opt('fontSharp', { precision: 0.6666666667, fontSize: 24 })\n        opt('clearColor', [0, 0, 0, 0]);\n        opt('defaultFontFace', 'sans-serif');\n        opt('fixedDt', 0);\n        opt('useImageWorker', true);\n        opt('autostart', true);\n        opt('precision', 1);\n        opt('canvas2d', false);\n        opt('platform', null);\n        opt('readPixelsBeforeDraw', false);\n        opt('devicePixelRatio', 1)       \n        opt('readPixelsAfterDraw', false);\n        opt('readPixelsAfterDrawThreshold', 0);\n        opt('debugFrame', false);\n        opt('forceTxCanvasSource', false);\n        opt('pauseRafLoopOnIdle', false);\n\n        if (o['devicePixelRatio'] != null && o['devicePixelRatio'] !== 1) {\n            this._options['precision'] *= o['devicePixelRatio']\n            this._options['w'] *= o['devicePixelRatio']\n            this._options['h'] *= o['devicePixelRatio']\n        }\n    }\n\n    setApplication(app) {\n        this.application = app;\n    }\n\n    init() {\n\n        if (this.application.getOption('debug') && this.platform._imageWorker) {\n            console.log('[Lightning] Using image worker!');\n        }\n\n        if (this.application.getOption('debug') && this.c2d) {\n            console.log('[Lightning] Using canvas2d renderer');\n        }\n\n        this.application.setAsRoot();\n        if (this.getOption('autostart')) {\n            this.platform.startLoop();\n        }\n    }\n\n    destroy() {\n        this.platform.stopLoop();\n        this.platform.destroy();\n        this.ctx.destroy();\n        this.textureManager.destroy();\n        this._renderer.destroy();\n\n        // clear last rendered frame\n        if (this.gl) {\n            this.gl.clearColor(0.0, 0.0, 0.0, 0.0);\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n        } else if (this.c2d) {\n            this.c2d.clearRect(\n                0, 0, this.c2d.canvas.width, this.c2d.canvas.height\n            );\n        }\n\n        this.gl = null;\n        this.c2d = null;\n        this.ctx = null;\n        this._options = null;\n        this.platform = null;\n        this.textureManager = null;\n        this._renderer = null;\n\n        delete this.gl;\n        delete this.c2d;\n        delete this.ctx;\n        delete this._options;\n        delete this.platform;\n        delete this.textureManager;\n        delete this._renderer;\n    }\n\n    stop() {\n        this.platform.stopLoop();\n    }\n\n    resume() {\n        this.platform.startLoop();\n    }\n\n    get root() {\n        return this.application;\n    }\n\n    getCanvas() {\n        return this._mode ? this.c2d.canvas : this.gl.canvas;\n    }\n\n    getRenderPrecision() {\n        return this._options.precision;\n    }\n\n    /**\n     * Marks a texture for updating it's source upon the next drawFrame.\n     * @param texture\n     */\n    addUpdateSourceTexture(texture) {\n        if (this._updatingFrame) {\n            // When called from the upload loop, we must immediately load the texture in order to avoid a 'flash'.\n            texture._performUpdateSource();\n        } else {\n            this._updateSourceTextures.add(texture);\n        }\n    }\n\n    removeUpdateSourceTexture(texture) {\n        if (this._updateSourceTextures) {\n            this._updateSourceTextures.delete(texture);\n        }\n    }\n\n    hasUpdateSourceTexture(texture) {\n        return (this._updateSourceTextures && this._updateSourceTextures.has(texture));\n    }\n\n\n    _performUpdateSource() {\n        if (this._updateSourceTextures.size) {\n            this._updateSourceTextures.forEach(texture => {\n                texture._performUpdateSource();\n            });\n            this._updateSourceTextures = new Set();\n        }\n    }\n\n    _calculateDt() {\n        this.startTime = this.currentTime;\n        this.currentTime = this.platform.getHrTime();\n\n        if (this._options.fixedDt) {\n            this.dt = this._options.fixedDt;\n        } else {\n            this.dt = (!this.startTime) ? .02 : .001 * (this.currentTime - this.startTime);\n        }\n    }\n\n    updateFrame() {\n        this._calculateDt();\n        this.emit('frameStart');\n        this._performUpdateSource();\n        this.emit('update');\n    }\n\n    idleFrame() {\n        this.textureThrottler.processSome();\n        this.emit('frameEnd');\n        this.frameCounter++;\n    }\n\n    onIdle() {\n        this.emit('idle');\n    }\n\n    renderFrame() {\n        const changes = this.ctx.hasRenderUpdates();\n\n        // Update may cause textures to be loaded in sync, so by processing them here we may be able to show them\n        // during the current frame already.\n        this.textureThrottler.processSome();\n\n        if (changes) {\n            this._updatingFrame = true;\n            this.ctx.update();\n            this.ctx.render();\n            this._updatingFrame = false;\n        }\n\n        this.platform.nextFrame(changes);\n\n        this.emit('frameEnd');\n\n        this.frameCounter++;\n    }\n\n    isUpdatingFrame() {\n        return this._updatingFrame;\n    }\n\n    drawFrame() {\n        // Maintain original functionality of `drawFrame()` while retaining the\n        // RAF mitigration feature from: https://github.com/rdkcentral/Lightning/pull/402\n        // The full functionality of this method is relied directly by our own unit tests and\n        // the unit tests of third party users\n        this.updateFrame();\n        this.renderFrame();\n    }\n\n    forceRenderUpdate() {\n        // Enforce re-rendering.\n        if (this.root) {\n            this.root.core._parent.setHasRenderUpdates(1);\n        }\n    }\n\n    setClearColor(clearColor) {\n        this.forceRenderUpdate();\n        if (clearColor === null) {\n            // Do not clear.\n            this._clearColor = null;\n        } else if (Array.isArray(clearColor)) {\n            this._clearColor = clearColor;\n        } else {\n            this._clearColor = StageUtils.getRgbaComponentsNormalized(clearColor);\n        }\n    }\n\n    getClearColor() {\n        return this._clearColor;\n    }\n\n    createElement(settings) {\n        if (settings) {\n            return this.element(settings);\n        } else {\n            return new Element(this);\n        }\n    }\n\n    createShader(settings) {\n        return Shader.create(this, settings);\n    }\n\n    element(settings) {\n        if (settings.isElement) return settings;\n\n        let element;\n        if (settings.type) {\n            element = new settings.type(this);\n        } else {\n            element = new Element(this);\n        }\n\n        element.patch(settings);\n\n        return element;\n    }\n\n    c(settings) {\n        return this.element(settings);\n    }\n\n    get w() {\n        return this._options.w;\n    }\n\n    get h() {\n        return this._options.h;\n    }\n\n    get coordsWidth() {\n        return this.w / this._options.precision;\n    }\n\n    get coordsHeight() {\n        return this.h / this._options.precision;\n    }\n\n    addMemoryUsage(delta) {\n        this._usedMemory += delta;\n        if (delta > 0 && this._lastGcFrame !== this.frameCounter) {\n            if (this._usedMemory > this.getOption('memoryPressure')) {\n                this.gc(false);\n                if (this._usedMemory > this.getOption('memoryPressure') - 2e6) {\n                    // Too few released. Aggressive cleanup.\n                    this.gc(true);\n                }\n            }\n        }\n    }\n\n    get usedMemory() {\n        return this._usedMemory;\n    }\n\n    addVramUsage(delta, alpha) {\n        if (alpha) {\n            this._usedVramAlpha += delta;\n        }\n        else {\n            this._usedVramNonAlpha += delta;\n        }\n    }\n\n    get usedVramAlpha() {\n        return this._usedVramAlpha;\n    }\n\n    get usedVramNonAlpha() {\n        return this._usedVramNonAlpha;\n    }\n\n    get usedVram() {\n        return this._usedVramAlpha + this._usedVramNonAlpha;\n    }\n\n    gc(aggressive) {\n        if (this._lastGcFrame !== this.frameCounter) {\n            this._lastGcFrame = this.frameCounter;\n            const memoryUsageBefore = this._usedMemory;\n            this.gcTextureMemory(aggressive);\n            this.gcRenderTextureMemory(aggressive);\n            this.renderer.gc(aggressive);\n\n            if (this.application.getOption('debug')) {\n                console.log(`[Lightning] GC${aggressive ? \"[aggressive]\" : \"\"}! Frame ${this._lastGcFrame} Freed ${((memoryUsageBefore - this._usedMemory) / 1e6).toFixed(2)}MP from GPU memory. Remaining: ${(this._usedMemory / 1e6).toFixed(2)}MP`);\n                const other = this._usedMemory - this.textureManager.usedMemory - this.ctx.usedMemory;\n                console.log(`[Lightning] Textures: ${(this.textureManager.usedMemory / 1e6).toFixed(2)}MP, Render Textures: ${(this.ctx.usedMemory / 1e6).toFixed(2)}MP, Renderer caches: ${(other / 1e6).toFixed(2)}MP`);\n            }\n        }\n    }\n\n    gcTextureMemory(aggressive = false) {\n        if (aggressive && this.ctx.root.visible) {\n            // Make sure that ALL textures are cleaned;\n            this.ctx.root.visible = false;\n            this.textureManager.gc();\n            this.ctx.root.visible = true;\n        } else {\n            this.textureManager.gc();\n        }\n    }\n\n    gcRenderTextureMemory(aggressive = false) {\n        if (aggressive && this.root.visible) {\n            // Make sure that ALL render textures are cleaned;\n            this.root.visible = false;\n            this.ctx.freeUnusedRenderTextures(0);\n            this.root.visible = true;\n        } else {\n            this.ctx.freeUnusedRenderTextures(0);\n        }\n    }\n\n    getDrawingCanvas() {\n        return this.platform.getDrawingCanvas();\n    }\n\n    update() {\n        this.ctx.update()\n    }\n\n    addServiceProvider(serviceprovider) {\n        if (Utils.isSpark) {\n            this.platform.addServiceProvider(serviceprovider);\n        }\n    }\n\n    getChildrenByPosition(x, y) {\n        const children = [];\n        this.root.core.update();\n        this.root.core.collectAtCoord(x, y, children);\n\n        return children;\n    }\n}\n\nimport Element from \"./Element.mjs\";\nimport StageUtils from \"./StageUtils.mjs\";\nimport TextureManager from \"./TextureManager.mjs\";\nimport TextureThrottler from \"./TextureThrottler.mjs\";\nimport CoreContext from \"./core/CoreContext.mjs\";\nimport TransitionManager from \"../animation/TransitionManager.mjs\";\nimport AnimationManager from \"../animation/AnimationManager.mjs\";\nimport RectangleTexture from \"../textures/RectangleTexture.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"./Component.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class Application extends Component {\n\n    constructor(options = {}, properties) {\n        // Save options temporarily to avoid having to pass it through the constructor.\n        Application._temp_options = options;\n\n        // Booting flag is used to postpone updateFocusSettings;\n        Application.booting = true;\n        const stage = new Stage(options.stage);\n        super(stage, properties);\n        Application.booting = false;\n\n        this.__updateFocusCounter = 0;\n        this.__keypressTimers = new Map();\n        this.__hoveredChild = null;\n\n        // We must construct while the application is not yet attached.\n        // That's why we 'init' the stage later (which actually emits the attach event).\n        this.stage.init();\n\n        // Initially, the focus settings are updated after both the stage and application are constructed.\n        this.updateFocusSettings();\n\n        this.__keymap = this.getOption('keys');\n\n        if (this.__keymap) {\n            this.stage.platform.registerKeydownHandler((e) => {\n                this._receiveKeydown(e);\n            });\n\n            this.stage.platform.registerKeyupHandler((e) => {\n                this._receiveKeyup(e);\n            });\n        }\n\n        if (this.getOption(\"enablePointer\")) {\n            this.stage.platform.registerClickHandler((e) => {\n                this._receiveClick(e);\n            });\n\n            this.stage.platform.registerHoverHandler((e) => {\n                this._receiveHover(e);\n            });\n\n            this.stage.platform.registerScrollWheelHandler((e) => {\n                this._recieveScrollWheel(e);\n            });\n\n            this.cursor = 'default';\n        }\n    }\n\n    getOption(name) {\n        return this.__options[name];\n    }\n\n    _setOptions(o) {\n        this.__options = {};\n\n        let opt = (name, def) => {\n            let value = o[name];\n\n            if (value === undefined) {\n                this.__options[name] = def;\n            } else {\n                this.__options[name] = value;\n            }\n        }\n\n        opt('debug', false);\n        opt('keys', {\n            38: \"Up\",\n            40: \"Down\",\n            37: \"Left\",\n            39: \"Right\",\n            13: \"Enter\",\n            8: \"Back\",\n            27: \"Exit\"\n        });\n        opt('enablePointer', false);\n    }\n\n    __construct() {\n        this.stage.setApplication(this);\n\n        this._setOptions(Application._temp_options);\n        delete Application._temp_options;\n\n        super.__construct();\n    }\n\n    __init() {\n        super.__init();\n        this.__updateFocus();\n    }\n\n    updateFocusPath() {\n        this.__updateFocus();\n    }\n\n    __updateFocus() {\n        const notOverridden = this.__updateFocusRec();\n\n        if (!Application.booting && notOverridden) {\n            this.updateFocusSettings();\n        }\n    }\n\n    __updateFocusRec() {\n        const updateFocusId = ++this.__updateFocusCounter;\n        this.__updateFocusId = updateFocusId;\n\n        const newFocusPath = this.__getFocusPath();\n        const newFocusedComponent = newFocusPath[newFocusPath.length - 1];\n        const prevFocusedComponent = this._focusPath ? this._focusPath[this._focusPath.length - 1] : undefined;\n\n        if (!prevFocusedComponent) {\n            // Focus events.\n            this._focusPath = [];\n            for (let i = 0, n = newFocusPath.length; i < n; i++) {\n                this._focusPath.push(newFocusPath[i]);\n                this._focusPath[i]._focus(newFocusedComponent, undefined);\n                const focusOverridden = (this.__updateFocusId !== updateFocusId);\n                if (focusOverridden) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            let m = Math.min(this._focusPath.length, newFocusPath.length);\n            let index;\n            for (index = 0; index < m; index++) {\n                if (this._focusPath[index] !== newFocusPath[index]) {\n                    break;\n                }\n            }\n\n            if (this._focusPath.length !== newFocusPath.length || index !== newFocusPath.length) {\n\n                if (this.getOption('debug')) {\n                    console.log('[Lightning] Focus changed: ' + newFocusedComponent.getLocationString());\n                }\n\n                // Unfocus events.\n                for (let i = this._focusPath.length - 1; i >= index; i--) {\n                    const unfocusedElement = this._focusPath.pop();\n                    unfocusedElement._unfocus(newFocusedComponent, prevFocusedComponent);\n                    const focusOverridden = (this.__updateFocusId !== updateFocusId);\n                    if (focusOverridden) {\n                        return false;\n                    }\n                }\n\n                // Focus events.\n                for (let i = index, n = newFocusPath.length; i < n; i++) {\n                    this._focusPath.push(newFocusPath[i]);\n                    this._focusPath[i]._focus(newFocusedComponent, prevFocusedComponent);\n                    const focusOverridden = (this.__updateFocusId !== updateFocusId);\n                    if (focusOverridden) {\n                        return false;\n                    }\n                }\n\n                // Focus changed events.\n                for (let i = 0; i < index; i++) {\n                    this._focusPath[i]._focusChange(newFocusedComponent, prevFocusedComponent);\n                }\n            }\n        }\n\n        return true;\n    }\n\n    updateFocusSettings() {\n        const focusedComponent = this._focusPath[this._focusPath.length - 1];\n\n        // Get focus settings. These can be used for dynamic application-wide settings that depend on the\n        // focus directly (such as the application background).\n        const focusSettings = {};\n        const defaultSetFocusSettings = Component.prototype._setFocusSettings;\n        for (let i = 0, n = this._focusPath.length; i < n; i++) {\n            if (this._focusPath[i]._setFocusSettings !== defaultSetFocusSettings) {\n                this._focusPath[i]._setFocusSettings(focusSettings);\n            }\n        }\n\n        const defaultHandleFocusSettings = Component.prototype._handleFocusSettings;\n        for (let i = 0, n = this._focusPath.length; i < n; i++) {\n            if (this._focusPath[i]._handleFocusSettings !== defaultHandleFocusSettings) {\n                this._focusPath[i]._handleFocusSettings(focusSettings, this.__prevFocusSettings, focusedComponent);\n            }\n        }\n\n        this.__prevFocusSettings = focusSettings;\n    }\n\n    _handleFocusSettings(settings, prevSettings, focused, prevFocused) {\n        // Override to handle focus-based settings.\n    }\n\n    __getFocusPath() {\n        const path = [this];\n        let current = this;\n        do {\n            const nextFocus = current._getFocused();\n            if (!nextFocus || (nextFocus === current)) {\n                // Found!;\n                break;\n            }\n\n\n            let ptr = nextFocus.cparent;\n            if (ptr === current) {\n                path.push(nextFocus);\n            } else {\n                // Not an immediate child: include full path to descendant.\n                const newParts = [nextFocus];\n                do {\n                    if (!ptr) {\n                        current._throwError(\"Return value for _getFocused must be an attached descendant component but its '\" + nextFocus.getLocationString() + \"'\");\n                    }\n                    newParts.push(ptr);\n                    ptr = ptr.cparent;\n                } while (ptr !== current);\n\n                // Add them reversed.\n                for (let i = 0, n = newParts.length; i < n; i++) {\n                    path.push(newParts[n - i - 1]);\n                }\n            }\n\n            current = nextFocus;\n        } while (true);\n\n        return path;\n    }\n\n    get focusPath() {\n        return this._focusPath;\n    }\n\n    /**\n     * Injects an event in the state machines, top-down from application to focused component.\n     */\n    focusTopDownEvent(events, ...args) {\n        const path = this.focusPath;\n        const n = path.length;\n\n        // Multiple events.\n        for (let i = 0; i < n; i++) {\n            const event = path[i]._getMostSpecificHandledMember(events);\n            if (event !== undefined) {\n                const returnValue = path[i][event](...args);\n                if (returnValue !== false) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Injects an event in the state machines, bottom-up from focused component to application.\n     */\n    focusBottomUpEvent(events, ...args) {\n        const path = this.focusPath;\n        const n = path.length;\n\n        // Multiple events.\n        for (let i = n - 1; i >= 0; i--) {\n            const event = path[i]._getMostSpecificHandledMember(events);\n            if (event !== undefined) {\n                const returnValue = path[i][event](...args);\n                if (returnValue !== false) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    _receiveKeydown(e) {\n        const obj = e;\n        const key = this.__keymap[e.keyCode];\n        const path = this.focusPath;\n\n        let keys;\n        if (key) {\n            keys = Array.isArray(key) ? key : [key];\n        }\n\n        if (keys) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                const hasTimer = this.__keypressTimers.has(keys[i]);\n                // prevent event from getting fired when the timeout is still active\n                if (path[path.length - 1].longpress && hasTimer) {\n                    return;\n                }\n\n                if (!this.stage.application.focusTopDownEvent([`_capture${keys[i]}`, \"_captureKey\"], obj)) {\n                    this.stage.application.focusBottomUpEvent([`_handle${keys[i]}`, \"_handleKey\"], obj);\n                }\n            }\n        } else {\n            if (!this.stage.application.focusTopDownEvent([\"_captureKey\"], obj)) {\n                this.stage.application.focusBottomUpEvent([\"_handleKey\"], obj);\n            }\n        }\n\n        this.updateFocusPath();\n\n        const consumer = path[path.length - 1];\n\n        if (keys && consumer.longpress) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                this._startLongpressTimer(keys[i], consumer);\n            }\n        }\n    }\n\n    /**\n     * Keyup listener\n     * To take away some confusion we add `Release` to the event to prevent ending up with method names like:\n     *  _handleLeftUp / _handleUpUp / _handleEnterUp etc\n     *\n     * @param e\n     * @private\n     */\n    _receiveKeyup(e) {\n        const obj = e;\n        const key = this.__keymap[e.keyCode];\n\n        let keys;\n        if (key) {\n            keys = Array.isArray(key) ? key : [key];\n        }\n\n        if (keys) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                if (!this.stage.application.focusTopDownEvent([`_capture${keys[i]}Release`, \"_captureKeyRelease\"], obj)) {\n                    this.stage.application.focusBottomUpEvent([`_handle${keys[i]}Release`, \"_handleKeyRelease\"], obj);\n                }\n            }\n        } else {\n            if (!this.stage.application.focusTopDownEvent([\"_captureKeyRelease\"], obj)) {\n                this.stage.application.focusBottomUpEvent([\"_handleKeyRelease\"], obj);\n            }\n        }\n\n        this.updateFocusPath();\n\n        if (keys) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                if (this.__keypressTimers.has(keys[i])) {\n                    // keyup has fired before end of timeout so we clear it\n                    clearTimeout(this.__keypressTimers.get(keys[i]));\n                    // delete so we can register it again\n                    this.__keypressTimers.delete(keys[i]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Registers and starts a timer for the pressed key. Timer will be cleared when the key is released\n     * before the timer goes off.\n     *\n     * If key is not release (keyup) the longpress handler will be fired.\n     * Configuration can be via the Components template:\n     *\n     * static _template() {\n     *     return {\n     *         w:100, h:100,\n     *         longpress:{up:700, down:500}\n     *     }\n     * }     *\n     * // this will get called when up has been pressed for 700ms\n     * _handleUpLong() {\n     *\n     * }\n     *\n     * @param key\n     * @param element\n     * @private\n     */\n    _startLongpressTimer(key, element) {\n        const config = element.longpress;\n        const lookup = key.toLowerCase();\n\n        if (config[lookup]) {\n            const timeout = config[lookup];\n            if (!Utils.isNumber(timeout)) {\n                element._throwError(\"config value for longpress must be a number\");\n            } else {\n                this.__keypressTimers.set(key, setTimeout(() => {\n                    if (!this.stage.application.focusTopDownEvent([`_capture${key}Long`, \"_captureKey\"], {})) {\n                        this.stage.application.focusBottomUpEvent([`_handle${key}Long`, \"_handleKey\"], {});\n                    }\n\n                    this.__keypressTimers.delete(key);\n                }, timeout || 500 /* prevent 0ms */));\n            }\n        }\n        return;\n    }\n\n    _recieveScrollWheel(e) {\n        const obj = e;\n        const { clientX, clientY } = obj;\n\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\n            if (!this.fireTopDownScrollWheelHandler(\"_captureScroll\", obj)) {\n                this.fireBottomUpScrollWheelHandler(\"_handleScroll\", obj);\n            }\n        }\n    }\n\n    fireTopDownScrollWheelHandler(event, obj) {\n        let children = this.stage.application.children;\n        let affected = this._findChildren([], children).reverse();\n        let n = affected.length;\n\n        while (n--) {\n            const child = affected[n];\n            if (child && child[event]) {\n                child._captureScroll(obj);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    fireBottomUpScrollWheelHandler(event, obj) {\n        const { clientX, clientY } = obj;\n        const target = this._getTargetChild(clientX, clientY);\n        let child = target;\n\n        // Search tree bottom up for a handler\n        while (child !== null) {\n            if (child && child[event]) {\n                child._handleScroll(obj);\n                return true;\n            }\n            child = child.parent;\n        }\n        return false;\n    }\n\n    _receiveClick(e) {\n        const obj = e;\n        const { clientX, clientY } = obj;\n\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\n            this.stage.application.fireBottomUpClickHandler(obj);\n        }\n    }\n\n    fireBottomUpClickHandler(obj) {\n        const { clientX, clientY } = obj;\n        const target = this._getTargetChild(clientX, clientY);\n        const precision = this.stage.getRenderPrecision() / this.stage.getOption('devicePixelRatio');\n        let child = target;\n\n        // Search tree bottom up for a handler\n        while (child !== null) {\n            if (child && child[\"_handleClick\"]) {\n                const { px, py } = child.core._worldContext;\n                const cx = px * precision;\n                const cy = py * precision;\n\n                const localCoords = {\n                    x: clientX - cx,\n                    y: clientY - cy\n                }\n\n                const returnValue = child._handleClick(target, localCoords);\n                if (returnValue !== false) {\n                    break;\n                }\n            }\n            child = child.parent;\n        }\n    }\n\n    _receiveHover(e) {\n        const obj = e;\n        const { clientX, clientY } = obj;\n\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\n            this.stage.application.fireBottomUpHoverHandler(obj);\n        }\n    }\n\n    fireBottomUpHoverHandler(obj) {\n        const { clientX, clientY } = obj;\n        const target = this._getTargetChild(clientX, clientY);\n\n        // Only fire handlers when pointer target changes\n        if (target !== this.__hoveredChild) {\n\n            let hoveredBranch = new Set();\n            let newHoveredBranch = new Set();\n\n            if (target) {\n                newHoveredBranch = new Set(target.getAncestors());\n            }\n\n            if (this.__hoveredChild) {\n                hoveredBranch = new Set(this.__hoveredChild.getAncestors());\n                for (const elem of [...hoveredBranch].filter((e) => !newHoveredBranch.has(e))) {\n                    const c = Component.getComponent(elem);\n                    if (c[\"_handleUnhover\"]) {\n                        c._handleUnhover(elem);\n                    }\n                    if (elem.parent && elem.parent.cursor) {\n                        this.stage.getCanvas().style.cursor = elem.parent.cursor;\n                    }\n                }\n            }\n\n            this.__hoveredChild = target;\n\n            const diffBranch = [...newHoveredBranch].filter((e) => !hoveredBranch.has(e))\n            for (const elem of diffBranch) {\n                const c = Component.getComponent(elem);\n                if (c[\"_handleHover\"]) {\n                    c._handleHover(elem);\n                }\n            }\n\n            // New element hover cursor\n            const lastElement = diffBranch[0];\n            if (lastElement && lastElement.cursor) {\n                this.stage.getCanvas().style.cursor = lastElement.cursor;\n            }\n\n            // Rerun _handleHover for target element in case it's been hovered\n            // back from its child\n            if (diffBranch.length === 0 && target) {\n                const c = Component.getComponent(target);\n                if (c[\"_handleHover\"]) {\n                    c._handleHover(target);\n                }\n            }\n        }\n    }\n\n    _getTargetChild(clientX, clientY) {\n        let children = this.stage.application.children;\n        let affected = this._findChildren([], children);\n        let hoverableChildren = this._withinClickableRange(affected, clientX, clientY);\n\n        hoverableChildren.sort((a, b) => {\n            // Sort by zIndex and then id\n            if (a.zIndex > b.zIndex) {\n                return 1;\n            } else if (a.zIndex < b.zIndex) {\n                return -1;\n            } else {\n                return a.id > b.id ? 1 : -1;\n            }\n        });\n\n        if (hoverableChildren.length) {\n            // Assume target has highest zIndex (id when zIndex equal)\n            return hoverableChildren.slice(-1)[0];\n        } else {\n            return null;\n        }\n    }\n\n    _findChildren(bucket, children) {\n        let n = children.length;\n        while (n--) {\n            const child = children[n];\n            // only add active children\n            if (child.__active && child.collision) {\n                if (child.collision === true) {\n                    bucket.push(child);\n                }\n                if (child.hasChildren()) {\n                    this._findChildren(bucket, child.children);\n                }\n            }\n        }\n        return bucket;\n    }\n\n    _withinClickableRange(affectedChildren, cursorX, cursorY) {\n        let n = affectedChildren.length;\n        const candidates = [];\n\n        // loop through affected children\n        // and perform collision detection\n        while (n--) {\n            const child = affectedChildren[n];\n            const precision = this.stage.getRenderPrecision() / this.stage.getOption('devicePixelRatio');\n            const ctx = child.core._worldContext;\n\n            const cx = ctx.px * precision;\n            const cy = ctx.py * precision;\n            const cw = child.finalW * ctx.ta * precision;\n            const ch = child.finalH * ctx.td * precision;\n\n            if (cx > this.stage.w || cy > this.stage.h) {\n                continue;\n            }\n\n            if (child.parent.core._scissor) {\n                const scissor = child.parent.core._scissor.map((v) => v * precision);\n                if (!this._testCollision(cursorX, cursorY, ...scissor))\n                    continue\n            }\n\n            if (this._testCollision(cursorX, cursorY, cx, cy, cw, ch)) {\n                candidates.push(child);\n            }\n        }\n        return candidates;\n    }\n\n    _testCollision(px, py, cx, cy, cw, ch) {\n        if (px >= cx &&\n            px <= cx + cw &&\n            py >= cy &&\n            py <= cy + ch) {\n            return true;\n        }\n        return false;\n    }\n\n    destroy() {\n        if (!this._destroyed) {\n            this._destroy();\n            this.stage.destroy();\n            this._destroyed = true;\n        }\n    }\n\n    _destroy() {\n        // This forces the _detach, _disabled and _active events to be called.\n        this.stage.setApplication(undefined);\n        this._updateAttachedFlag();\n        this._updateEnabledFlag();\n\n        if (this.__keypressTimers.size) {\n            for (const timer of this.__keypressTimers.values()) {\n                clearTimeout(timer);\n            }\n\n            this.__keypressTimers.clear();\n        }\n    }\n\n    getCanvas() {\n        return this.stage.getCanvas();\n    }\n\n}\n\nimport Stage from \"../tree/Stage.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class StaticCanvasTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n        this._factory = undefined;\n        this._lookupId = undefined;\n    }\n\n    set content({factory, lookupId = undefined}) {\n        this._factory = factory;\n        this._lookupId = lookupId;\n        this._changed();\n    }\n\n    _getIsValid() {\n        return !!this._factory;\n    }\n\n    _getLookupId() {\n        return this._lookupId;\n    }\n\n    _getSourceLoader() {\n        const f = this._factory;\n        return (cb) => {\n            return f((err, canvas) => {\n                if (err) {\n                    return cb(err);\n                }\n                cb(null, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas));\n            }, this.stage);\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../tree/Utils.mjs\";\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport StaticCanvasTexture from \"../textures/StaticCanvasTexture.mjs\"\n\nexport default class Tools {\n\n    static getCanvasTexture(canvasFactory, lookupId) {\n        return {type: StaticCanvasTexture, content: {factory: canvasFactory, lookupId: lookupId}}\n    }\n\n    static getRoundRect(w, h, radius, strokeWidth, strokeColor, fill, fillColor) {\n        if (!Array.isArray(radius)){\n            // upper-left, upper-right, bottom-right, bottom-left.\n            radius = [radius, radius, radius, radius];\n        }\n\n        let factory = (cb, stage) => {\n            if (Utils.isSpark) {\n                stage.platform.createRoundRect(cb, stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor);\n            } else {\n                cb(null, this.createRoundRect(stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor));\n            }\n        };\n        let id = 'rect' + [w, h, strokeWidth, strokeColor, fill ? 1 : 0, fillColor].concat(radius).join(\",\");\n        return Tools.getCanvasTexture(factory, id);\n    }\n\n    static createRoundRect(stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor) {\n        if (fill === undefined) fill = true;\n        if (strokeWidth === undefined) strokeWidth = 0;\n\n        let canvas = stage.platform.getDrawingCanvas();\n        let ctx = canvas.getContext('2d');\n        ctx.imageSmoothingEnabled = true;\n\n        canvas.width = w + strokeWidth + 2;\n        canvas.height = h + strokeWidth + 2;\n\n        ctx.beginPath();\n        let x = 0.5 * strokeWidth + 1, y = 0.5 * strokeWidth + 1;\n\n        ctx.moveTo(x + radius[0], y);\n        ctx.lineTo(x + w - radius[1], y);\n        ctx.arcTo(x + w, y, x + w, y + radius[1], radius[1]);\n        ctx.lineTo(x + w, y + h - radius[2]);\n        ctx.arcTo(x + w, y + h, x + w - radius[2], y + h, radius[2]);\n        ctx.lineTo(x + radius[3], y + h);\n        ctx.arcTo(x, y + h, x, y + h - radius[3], radius[3]);\n        ctx.lineTo(x, y + radius[0]);\n        ctx.arcTo(x, y, x + radius[0], y, radius[0]);\n        ctx.closePath();\n\n        if (fill) {\n            if (Utils.isNumber(fillColor)) {\n                ctx.fillStyle = StageUtils.getRgbaString(fillColor);\n            } else {\n                ctx.fillStyle = \"white\";\n            }\n            ctx.fill();\n        }\n\n        if (strokeWidth) {\n            if (Utils.isNumber(strokeColor)) {\n                ctx.strokeStyle = StageUtils.getRgbaString(strokeColor);\n            } else {\n                ctx.strokeStyle = \"white\";\n            }\n            ctx.lineWidth = strokeWidth;\n            ctx.stroke();\n        }\n\n        return canvas;\n    }\n\n    static getShadowRect(w, h, radius = 0, blur = 5, margin = blur * 2) {\n        if (!Array.isArray(radius)){\n            // upper-left, upper-right, bottom-right, bottom-left.\n            radius = [radius, radius, radius, radius];\n        }\n\n        let factory = (cb, stage) => {\n            if (Utils.isSpark) {\n                stage.platform.createShadowRect(cb, stage, w, h, radius, blur, margin);\n            } else {\n                cb(null, this.createShadowRect(stage, w, h, radius, blur, margin));\n            }\n        };\n        let id = 'shadow' + [w, h, blur, margin].concat(radius).join(\",\");\n        return Tools.getCanvasTexture(factory, id);\n    }\n\n    static createShadowRect(stage, w, h, radius, blur, margin) {\n        let canvas = stage.platform.getDrawingCanvas();\n        let ctx = canvas.getContext('2d');\n        ctx.imageSmoothingEnabled = true;\n\n        canvas.width = w + margin * 2;\n        canvas.height = h + margin * 2;\n\n        // WpeWebKit bug: we experienced problems without this with shadows in noncompositedwebgl mode.\n        ctx.globalAlpha = 0.01;\n        ctx.fillRect(0, 0, 0.01, 0.01);\n        ctx.globalAlpha = 1.0;\n\n        ctx.shadowColor = StageUtils.getRgbaString(0xFFFFFFFF);\n        ctx.fillStyle = StageUtils.getRgbaString(0xFFFFFFFF);\n        ctx.shadowBlur = blur;\n        ctx.shadowOffsetX = (w + 10) + margin;\n        ctx.shadowOffsetY = margin;\n\n        ctx.beginPath();\n        const x = -(w + 10);\n        const y = 0;\n\n        ctx.moveTo(x + radius[0], y);\n        ctx.lineTo(x + w - radius[1], y);\n        ctx.arcTo(x + w, y, x + w, y + radius[1], radius[1]);\n        ctx.lineTo(x + w, y + h - radius[2]);\n        ctx.arcTo(x + w, y + h, x + w - radius[2], y + h, radius[2]);\n        ctx.lineTo(x + radius[3], y + h);\n        ctx.arcTo(x, y + h, x, y + h - radius[3], radius[3]);\n        ctx.lineTo(x, y + radius[0]);\n        ctx.arcTo(x, y, x + radius[0], y, radius[0]);\n        ctx.closePath();\n        ctx.fill();\n\n        return canvas;\n    }\n\n    static getSvgTexture(url, w, h) {\n        let factory = (cb, stage) => {\n            if (Utils.isSpark) {\n                stage.platform.createSvg(cb, stage, url, w, h);\n            } else {\n                this.createSvg(cb, stage, url, w, h);\n            }\n        };\n        let id = 'svg' + [w, h, url].join(\",\");\n        return Tools.getCanvasTexture(factory, id);\n    }\n\n    static createSvg(cb, stage, url, w, h) {\n        let canvas = stage.platform.getDrawingCanvas();\n        let ctx = canvas.getContext('2d');\n        ctx.imageSmoothingEnabled = true;\n\n        let img = new Image();\n        img.onload = () => {\n            canvas.width = w;\n            canvas.height = h;\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n            cb(null, canvas);\n        }\n        img.onerror = (err) => {\n            cb(err);\n        }\n\n        // On the PS4 platform setting the `crossOrigin` attribute on images\n        // can cause CORS failures.\n        if (!Utils.isPS4) {\n            img.crossOrigin = \"Anonymous\";\n        }\n\n        img.src = url;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class ObjMerger {\n\n    static isMf(f) {\n        return Utils.isFunction(f) && f.__mf;\n    }\n\n    static mf(f) {\n        // Set as merge function.\n        f.__mf = true;\n        return f;\n    }\n\n    static merge(a, b) {\n        const aks = Object.keys(a);\n        const bks = Object.keys(b);\n\n        if (!bks.length) {\n            return a;\n        }\n\n        // Create index array for all elements.\n        const ai = {};\n        const bi = {};\n        for (let i = 0, n = bks.length; i < n; i++) {\n            const key = bks[i];\n            ai[key] = -1;\n            bi[key] = i;\n        }\n        for (let i = 0, n = aks.length; i < n; i++) {\n            const key = aks[i];\n            ai[key] = i;\n            if (bi[key] === undefined) {\n                bi[key] = -1;\n            }\n        }\n\n        const aksl = aks.length;\n\n        const result = {};\n        for (let i = 0, n = bks.length; i < n; i++) {\n            const key = bks[i];\n\n            // Prepend all items in a that are not in b - before the now added b attribute.\n            const aIndex = ai[key];\n            let curIndex = aIndex;\n            while(--curIndex >= 0) {\n                const akey = aks[curIndex];\n                if (bi[akey] !== -1) {\n                    // Already found? Stop processing.\n                    // Not yet found but exists in b? Also stop processing: wait until we find it in b.\n                    break;\n                }\n            }\n            while(++curIndex < aIndex) {\n                const akey = aks[curIndex];\n                result[akey] = a[akey];\n            }\n\n            const bv = b[key];\n            const av = a[key];\n            let r;\n            if (this.isMf(bv)) {\n                r = bv(av);\n            } else {\n                if (!Utils.isObjectLiteral(av) || !Utils.isObjectLiteral(bv)) {\n                    r = bv;\n                } else {\n                    r = ObjMerger.merge(av, bv);\n                }\n            }\n\n            // When marked as undefined, property is deleted.\n            if (r !== undefined) {\n                result[key] = r;\n            }\n        }\n\n        // Append remaining final items in a.\n        let curIndex = aksl;\n        while(--curIndex >= 0) {\n            const akey = aks[curIndex];\n            if (bi[akey] !== -1) {\n                break;\n            }\n        }\n        while(++curIndex < aksl) {\n            const akey = aks[curIndex];\n            result[akey] = a[akey];\n        }\n\n        return result;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages the list of children for an element.\n */\n\nimport ObjectList from \"../tree/ObjectList.mjs\";\n\nexport default class ObjectListProxy extends ObjectList {\n\n    constructor(target) {\n        super();\n        this._target = target;\n    }\n\n    onAdd(item, index) {\n        this._target.addAt(item, index);\n    }\n\n    onRemove(item, index) {\n        this._target.removeAt(index);\n    }\n\n    onSync(removed, added, order) {\n        this._target._setByArray(order);\n    }\n\n    onSet(item, index) {\n        this._target.setAt(item, index);\n    }\n\n    onMove(item, fromIndex, toIndex) {\n        this._target.setAt(item, toIndex);\n    }\n\n    createItem(object) {\n        return this._target.createItem(object);\n    }\n\n    isItem(object) {\n        return this._target.isItem(object);\n    }\n\n}\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages the list of children for an element.\n */\n\nimport ObjectListProxy from \"./ObjectListProxy.mjs\";\n\nexport default class ObjectListWrapper extends ObjectListProxy {\n\n    constructor(target, wrap) {\n        super(target);\n        this._wrap = wrap;\n    }\n\n    wrap(item) {\n        let wrapper = this._wrap(item);\n        item._wrapper = wrapper;\n        return wrapper;\n    }\n\n    onAdd(item, index) {\n        item = this.wrap(item);\n        super.onAdd(item, index);\n    }\n\n    onRemove(item, index) {\n        super.onRemove(item, index);\n    }\n\n    onSync(removed, added, order) {\n        added.forEach(a => this.wrap(a));\n        order = order.map(a => a._wrapper);\n        super.onSync(removed, added, order);\n    }\n\n    onSet(item, index) {\n        item = this.wrap(item);\n        super.onSet(item, index);\n    }\n\n    onMove(item, fromIndex, toIndex) {\n        super.onMove(item, fromIndex, toIndex);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class NoiseTexture extends Texture {\n\n    _getLookupId() {\n        return '__noise';\n    }\n\n    _getSourceLoader() {\n        const gl = this.stage.gl;\n        return function(cb) {\n            const noise = new Uint8Array(128 * 128 * 4);\n            for (let i = 0; i < 128 * 128 * 4; i+=4) {\n                const v = Math.floor(Math.random() * 256);\n                noise[i] = v;\n                noise[i+1] = v;\n                noise[i+2] = v;\n                noise[i+3] = 255;\n            }\n            const texParams = {}\n\n            if (gl) {\n                texParams[gl.TEXTURE_WRAP_S] = gl.REPEAT;\n                texParams[gl.TEXTURE_WRAP_T] = gl.REPEAT;\n                texParams[gl.TEXTURE_MIN_FILTER] = gl.NEAREST;\n                texParams[gl.TEXTURE_MAG_FILTER] = gl.NEAREST;\n            }\n\n            cb(null, {source: noise, w: 128, h: 128, texParams: texParams});\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class HtmlTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n        this._htmlElement = undefined;\n        this._scale = 1;\n    }\n\n    set htmlElement(v) {\n        this._htmlElement = v;\n        this._changed();\n    }\n\n    get htmlElement() {\n        return this._htmlElement;\n    }\n\n    set scale(v) {\n        this._scale = v;\n        this._changed();\n    }\n\n    get scale() {\n        return this._scale;\n    }\n\n    set html(v) {\n        if (!v) {\n            this.htmlElement = undefined;\n        } else {\n            const d = document.createElement('div');\n            d.innerHTML = \"<div>\" + v + \"</div>\";\n            this.htmlElement = d.firstElementChild;\n        }\n    }\n\n    get html() {\n        return this._htmlElement.innerHTML;\n    }\n\n    _getIsValid() {\n        return this.htmlElement;\n    }\n\n    _getLookupId() {\n        return this._scale + \":\" + this._htmlElement.innerHTML;\n    }\n\n    _getSourceLoader() {\n        const htmlElement = this._htmlElement;\n        const scale = this._scale;\n        return function(cb) {\n            if (!window.html2canvas) {\n                return cb(new Error(\"Please include html2canvas (https://html2canvas.hertzen.com/)\"));\n            }\n\n            const area = HtmlTexture.getPreloadArea();\n            area.appendChild(htmlElement);\n\n            html2canvas(htmlElement, {backgroundColor: null, scale: scale}).then(function(canvas) {\n                area.removeChild(htmlElement);\n                if (canvas.height === 0) {\n                    return cb(new Error(\"Canvas height is 0\"));\n                }\n                cb(null, {source: canvas, width: canvas.width, height: canvas.height});\n            }).catch(e => {\n                console.error('[Lightning]', e);\n            });\n        }\n    }\n\n    static getPreloadArea() {\n        if (!this._preloadArea) {\n            // Preload area must be included in document body and must be visible to trigger html element rendering.\n            this._preloadArea = document.createElement('div');\n            if (this._preloadArea.attachShadow) {\n                // Use a shadow DOM if possible to prevent styling from interfering.\n                this._preloadArea.attachShadow({mode: 'closed'});\n            }\n            this._preloadArea.style.opacity = 0;\n            this._preloadArea.style.pointerEvents = 'none';\n            this._preloadArea.style.position = 'fixed';\n            this._preloadArea.style.display = 'block';\n            this._preloadArea.style.top = '100vh';\n            this._preloadArea.style.overflow = 'hidden';\n            document.body.appendChild(this._preloadArea);\n        }\n        return this._preloadArea;\n    }\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class StaticTexture extends Texture {\n\n    constructor(stage, options) {\n        super(stage);\n\n        this._options = options;\n    }\n\n    set options(v) {\n        if (this._options !== v) {\n            this._options = v;\n            this._changed();\n        }\n    }\n\n    get options() {\n        return this._options;\n    }\n\n    _getIsValid() {\n        return !!this._options;\n    }\n\n    _getSourceLoader() {\n        return (cb) => {\n            cb(null, this._options);\n        }\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\n\nexport default class ListComponent extends Component {\n\n    constructor(stage) {\n        super(stage);\n\n        this._wrapper = super._children.a({});\n\n        this._reloadVisibleElements = false;\n\n        this._visibleItems = new Set();\n\n        this._index = 0;\n\n        this._started = false;\n\n        /**\n         * The transition definition that is being used when scrolling the items.\n         * @type TransitionSettings\n         */\n        this._scrollTransitionSettings = this.stage.transitions.createSettings({});\n\n        /**\n         * The scroll area size in pixels per item.\n         */\n        this._itemSize = 100;\n\n        this._viewportScrollOffset = 0;\n\n        this._itemScrollOffset = 0;\n\n        /**\n         * Should the list jump when scrolling between end to start, or should it be continuous, like a carrousel?\n         */\n        this._roll = false;\n\n        /**\n         * Allows restricting the start scroll position.\n         */\n        this._rollMin = 0;\n\n        /**\n         * Allows restricting the end scroll position.\n         */\n        this._rollMax = 0;\n\n        /**\n         * Definition for a custom animation that is applied when an item is (partially) selected.\n         * @type AnimationSettings\n         */\n        this._progressAnimation = null;\n\n        /**\n         * Inverts the scrolling direction.\n         * @type {boolean}\n         * @private\n         */\n        this._invertDirection = false;\n\n        /**\n         * Layout the items horizontally or vertically?\n         * @type {boolean}\n         * @private\n         */\n        this._horizontal = true;\n\n        this.itemList = new ListItems(this);\n    }\n\n    _allowChildrenAccess() {\n        return false;\n    }\n\n    get items() {\n        return this.itemList.get();\n    }\n\n    set items(children) {\n        this.itemList.patch(children);\n    }\n\n    start() {\n        this._wrapper.transition(this.property, this._scrollTransitionSettings);\n        this._scrollTransition = this._wrapper.transition(this.property);\n        this._scrollTransition.on('progress', p => this.update());\n\n        this.setIndex(0, true, true);\n\n        this._started = true;\n\n        this.update();\n    }\n\n    setIndex(index, immediate = false, closest = false) {\n        let nElements = this.length;\n        if (!nElements) return;\n\n        this.emit('unfocus', this.getElement(this.realIndex), this._index, this.realIndex);\n\n        if (closest) {\n            // Scroll to same offset closest to the index.\n            let offset = Utils.getModuloIndex(index, nElements);\n            let o = Utils.getModuloIndex(this.index, nElements);\n            let diff = offset - o;\n            if (diff > 0.5 * nElements) {\n                diff -= nElements;\n            } else if (diff < -0.5 * nElements) {\n                diff += nElements;\n            }\n            this._index += diff;\n        } else {\n            this._index = index;\n        }\n\n        if (this._roll || (this.viewportSize > this._itemSize * nElements)) {\n            this._index = Utils.getModuloIndex(this._index, nElements);\n        }\n\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\n        let value = direction * this._index * this._itemSize;\n\n        if (this._roll) {\n            let min, max, scrollDelta;\n            if (direction == 1) {\n                max = (nElements - 1) * this._itemSize;\n                scrollDelta = this._viewportScrollOffset * this.viewportSize - this._itemScrollOffset * this._itemSize;\n\n                max -= scrollDelta;\n\n                min = this.viewportSize - (this._itemSize + scrollDelta);\n\n                if (this._rollMin) min -= this._rollMin;\n                if (this._rollMax) max += this._rollMax;\n\n                value = Math.max(Math.min(value, max), min);\n            } else {\n                max = (nElements * this._itemSize - this.viewportSize);\n                scrollDelta = this._viewportScrollOffset * this.viewportSize - this._itemScrollOffset * this._itemSize;\n\n                max += scrollDelta;\n\n                let min = scrollDelta;\n\n                if (this._rollMin) min -= this._rollMin;\n                if (this._rollMax) max += this._rollMax;\n\n                value = Math.min(Math.max(-max, value), -min);\n            }\n        }\n\n        this._scrollTransition.start(value);\n\n        if (immediate) {\n            this._scrollTransition.finish();\n        }\n\n        this.emit('focus', this.getElement(this.realIndex), this._index, this.realIndex);\n    }\n\n    getAxisPosition() {\n        let target = -this._scrollTransition._targetValue;\n\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\n        let value = -direction * this._index * this._itemSize;\n\n        return this._viewportScrollOffset * this.viewportSize + (value - target);\n    }\n\n    update() {\n        if (!this._started) return;\n\n        let nElements = this.length;\n        if (!nElements) return;\n\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\n\n        // Map position to index value.\n        let v = (this._horizontal ? this._wrapper.x : this._wrapper.y);\n\n        let viewportSize = this.viewportSize;\n        let scrollDelta = this._viewportScrollOffset * viewportSize - this._itemScrollOffset * this._itemSize;\n        v += scrollDelta;\n\n        let s, e, ps, pe;\n        if (direction == -1) {\n            s = Math.floor(-v / this._itemSize);\n            ps = 1 - ((-v / this._itemSize) - s);\n            e = Math.floor((viewportSize - v) / this._itemSize);\n            pe = (((viewportSize - v) / this._itemSize) - e);\n        } else {\n            s = Math.ceil(v / this._itemSize);\n            ps = 1 + (v / this._itemSize) - s;\n            e = Math.ceil((v - viewportSize) / this._itemSize);\n            pe = e - ((v - viewportSize) / this._itemSize);\n        }\n        if (this._roll || (viewportSize > this._itemSize * nElements)) {\n            // Don't show additional items.\n            if (e >= nElements) {\n                e = nElements - 1;\n                pe = 1;\n            }\n            if (s >= nElements) {\n                s = nElements - 1;\n                ps = 1;\n            }\n            if (e <= -1) {\n                e = 0;\n                pe = 1;\n            }\n            if (s <= -1) {\n                s = 0;\n                ps = 1;\n            }\n        }\n\n        let offset = -direction * s * this._itemSize;\n\n        let item;\n        for (let index = s; (direction == -1 ? index <= e : index >= e); (direction == -1 ? index++ : index--)) {\n            let realIndex = Utils.getModuloIndex(index, nElements);\n\n            let element = this.getElement(realIndex);\n            item = element.parent;\n            this._visibleItems.delete(item);\n            if (this._horizontal) {\n                item.x = offset + scrollDelta;\n            } else {\n                item.y = offset + scrollDelta;\n            }\n\n            let wasVisible = item.visible;\n            item.visible = true;\n\n            if (!wasVisible || this._reloadVisibleElements) {\n                // Turned visible.\n                this.emit('visible', index, realIndex);\n            }\n\n\n\n            if (this._progressAnimation) {\n                let p = 1;\n                if (index == s) {\n                    p = ps;\n                } else if (index == e) {\n                    p = pe;\n                }\n\n                // Use animation to progress.\n                this._progressAnimation.apply(element, p);\n            }\n\n            offset += this._itemSize;\n        }\n\n        // Handle item visibility.\n        let self = this;\n        this._visibleItems.forEach(function(invisibleItem) {\n            invisibleItem.visible = false;\n            self._visibleItems.delete(invisibleItem);\n        });\n\n        for (let index = s; (direction == -1 ? index <= e : index >= e); (direction == -1 ? index++ : index--)) {\n            let realIndex = Utils.getModuloIndex(index, nElements);\n            this._visibleItems.add(this.getWrapper(realIndex));\n        }\n\n        this._reloadVisibleElements = false;\n    }\n\n    setPrevious() {\n        this.setIndex(this._index - 1);\n    }\n\n    setNext() {\n        this.setIndex(this._index + 1);\n    }\n\n    getWrapper(index) {\n        return this._wrapper.children[index];\n    }\n\n    getElement(index) {\n        let e = this._wrapper.children[index];\n        return e ? e.children[0] : null;\n    }\n\n    reload() {\n        this._reloadVisibleElements = true;\n        this.update();\n    }\n\n    get element() {\n        let e = this._wrapper.children[this.realIndex];\n        return e ? e.children[0] : null;\n    }\n\n    get length() {\n        return this._wrapper.children.length;\n    }\n\n    get property() {\n        return this._horizontal ? 'x' : 'y';\n    }\n\n    get viewportSize() {\n        return this._horizontal ? this.w : this.h;\n    }\n\n    get index() {\n        return this._index;\n    }\n\n    get realIndex() {\n        return Utils.getModuloIndex(this._index, this.length);\n    }\n\n    get itemSize() {\n        return this._itemSize;\n    }\n\n    set itemSize(v) {\n        this._itemSize = v;\n        this.update();\n    }\n\n    get viewportScrollOffset() {\n        return this._viewportScrollOffset;\n    }\n\n    set viewportScrollOffset(v) {\n        this._viewportScrollOffset = v;\n        this.update();\n    }\n\n    get itemScrollOffset() {\n        return this._itemScrollOffset;\n    }\n\n    set itemScrollOffset(v) {\n        this._itemScrollOffset = v;\n        this.update();\n    }\n\n    get scrollTransitionSettings() {\n        return this._scrollTransitionSettings;\n    }\n\n    set scrollTransitionSettings(v) {\n        this._scrollTransitionSettings.patch(v);\n    }\n\n    set scrollTransition(v) {\n        this._scrollTransitionSettings.patch(v);\n    }\n\n    get scrollTransition() {\n        return this._scrollTransition;\n    }\n\n    get progressAnimation() {\n        return this._progressAnimation;\n    }\n\n    set progressAnimation(v) {\n        if (Utils.isObjectLiteral(v)) {\n            this._progressAnimation = this.stage.animations.createSettings(v);\n        } else {\n            this._progressAnimation = v;\n        }\n        this.update();\n    }\n\n    get roll() {\n        return this._roll;\n    }\n\n    set roll(v) {\n        this._roll = v;\n        this.update();\n    }\n\n    get rollMin() {\n        return this._rollMin;\n    }\n\n    set rollMin(v) {\n        this._rollMin = v;\n        this.update();\n    }\n\n    get rollMax() {\n        return this._rollMax;\n    }\n\n    set rollMax(v) {\n        this._rollMax = v;\n        this.update();\n    }\n\n    get invertDirection() {\n        return this._invertDirection;\n    }\n\n    set invertDirection(v) {\n        if (!this._started) {\n            this._invertDirection = v;\n        }\n    }\n\n    get horizontal() {\n        return this._horizontal;\n    }\n\n    set horizontal(v) {\n        if (v !== this._horizontal) {\n            if (!this._started) {\n                this._horizontal = v;\n            }\n        }\n    }\n\n}\n\nimport ObjectListWrapper from \"../tools/ObjectListWrapper.mjs\";\nclass ListItems extends ObjectListWrapper {\n    constructor(list) {\n        let wrap = (item => {\n            let parent = item.stage.createElement();\n            parent.add(item);\n            parent.visible = false;\n            return parent;\n        })\n\n        super(list._wrapper._children, wrap);\n        this.list = list;\n    }\n\n    onAdd(item, index) {\n        super.onAdd(item, index);\n        this.checkStarted(index);\n    }\n\n    checkStarted(index) {\n        this.list._reloadVisibleElements = true;\n        if (!this.list._started) {\n            this.list.start();\n        } else {\n            if (this.list.length === 1) {\n                this.list.setIndex(0, true, true);\n            } else {\n                if (this.list._index >= this.list.length) {\n                    this.list.setIndex(0);\n                }\n            }\n            this.list.update();\n        }\n    }\n\n    onRemove(item, index) {\n        super.onRemove(item, index);\n        let ri = this.list.realIndex;\n        if (ri === index) {\n            if (ri === this.list.length) {\n                ri--;\n            }\n            if (ri >= 0) {\n                this.list.setIndex(ri);\n            }\n        } else if (ri > index) {\n            this.list.setIndex(ri - 1);\n        }\n\n        this.list._reloadVisibleElements = true;\n    }\n\n    onSet(item, index) {\n        super.onSet(item, index);\n        this.checkStarted(index);\n    }\n\n    onSync(removed, added, order) {\n        super.onSync(removed, added, order);\n        this.checkStarted(0);\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n}\n\nimport Utils from \"../tree/Utils.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class LinearBlurShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n\n        this._direction = new Float32Array([1, 0]);\n        this._kernelRadius = 1;\n    }\n\n    get x() {\n        return this._direction[0];\n    }\n\n    set x(v) {\n        this._direction[0] = v;\n        this.redraw();\n    }\n\n    get y() {\n        return this._direction[1];\n    }\n\n    set y(v) {\n        this._direction[1] = v;\n        this.redraw();\n    }\n\n    get kernelRadius() {\n        return this._kernelRadius;\n    }\n\n    set kernelRadius(v) {\n        this._kernelRadius = v;\n        this.redraw();\n    }\n\n\n    useDefault() {\n        return (this._kernelRadius === 0);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"direction\", this._direction, this.gl.uniform2fv);\n        this._setUniform(\"kernelRadius\", this._kernelRadius, this.gl.uniform1i);\n\n        const w = operation.getRenderWidth();\n        const h = operation.getRenderHeight();\n        this._setUniform(\"resolution\", new Float32Array([w, h]), this.gl.uniform2fv);\n    }\n}\n\nLinearBlurShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    uniform vec2 resolution;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform vec2 direction;\n    uniform int kernelRadius;\n    \n    vec4 blur1(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.3333333333333333) * direction;\n        color += texture2D(image, uv) * 0.29411764705882354;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.35294117647058826;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.35294117647058826;\n        return color; \n    }\n    \n    vec4 blur2(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.3846153846) * direction;\n        vec2 off2 = vec2(3.2307692308) * direction;\n        color += texture2D(image, uv) * 0.2270270270;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\n        color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\n        color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\n        return color;\n    }\n    \n    vec4 blur3(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.411764705882353) * direction;\n        vec2 off2 = vec2(3.2941176470588234) * direction;\n        vec2 off3 = vec2(5.176470588235294) * direction;\n        color += texture2D(image, uv) * 0.1964825501511404;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\n        color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\n        color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\n        color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\n        color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\n        return color;\n    }    \n\n    void main(void){\n        if (kernelRadius == 1) {\n            gl_FragColor = blur1(uSampler, vTextureCoord, resolution, direction) * vColor;\n        } else if (kernelRadius == 2) {\n            gl_FragColor = blur2(uSampler, vTextureCoord, resolution, direction) * vColor;\n        } else {\n            gl_FragColor = blur3(uSampler, vTextureCoord, resolution, direction) * vColor;\n        }\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\n/**\n * 4x4 box blur shader which works in conjunction with a 50% rescale.\n */\nexport default class BoxBlurShader extends DefaultShader {\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const dx = 1.0 / operation.getTextureWidth(0);\n        const dy = 1.0 / operation.getTextureHeight(0);\n        this._setUniform(\"stepTextureCoord\", new Float32Array([dx, dy]), this.gl.uniform2fv);\n    }\n\n}\n\nBoxBlurShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    uniform vec2 stepTextureCoord;\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec4 vColor;\n    varying vec2 vTextureCoordUl;\n    varying vec2 vTextureCoordUr;\n    varying vec2 vTextureCoordBl;\n    varying vec2 vTextureCoordBr;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoordUl = aTextureCoord - stepTextureCoord;\n        vTextureCoordBr = aTextureCoord + stepTextureCoord;\n        vTextureCoordUr = vec2(vTextureCoordBr.x, vTextureCoordUl.y);\n        vTextureCoordBl = vec2(vTextureCoordUl.x, vTextureCoordBr.y);\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nBoxBlurShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoordUl;\n    varying vec2 vTextureCoordUr;\n    varying vec2 vTextureCoordBl;\n    varying vec2 vTextureCoordBr;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        vec4 color = 0.25 * (texture2D(uSampler, vTextureCoordUl) + texture2D(uSampler, vTextureCoordUr) + texture2D(uSampler, vTextureCoordBl) + texture2D(uSampler, vTextureCoordBr));\n        gl_FragColor = color * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class BlurShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._kernelRadius = 1;\n    }\n\n    get kernelRadius() {\n        return this._kernelRadius;\n    }\n\n    set kernelRadius(v) {\n        this._kernelRadius = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    _beforeDrawEl({target}) {\n        target.ctx.filter = \"blur(\" + this._kernelRadius + \"px)\";\n    }\n\n    _afterDrawEl({target}) {\n        target.ctx.filter = \"none\";\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\nimport LinearBlurShader from \"../renderer/webgl/shaders/LinearBlurShader.mjs\";\nimport BoxBlurShader from \"../renderer/webgl/shaders/BoxBlurShader.mjs\";\nimport DefaultShader from \"../renderer/webgl/shaders/DefaultShader.mjs\";\nimport C2dBlurShader from \"../renderer/c2d/shaders/BlurShader.mjs\";\nimport Shader from \"../tree/Shader.mjs\";\nimport MultiSpline from \"../tools/MultiSpline.mjs\";\n\nexport default class FastBlurComponent extends Component {\n    static _template() {\n        return {}\n    }\n\n    get wrap() {\n        return this.tag(\"Wrap\");\n    }\n\n    set content(v) {\n        return this.wrap.content = v;\n    }\n\n    get content() {\n        return this.wrap.content;\n    }\n\n    set padding(v) {\n        this.wrap._paddingX = v;\n        this.wrap._paddingY = v;\n        this.wrap._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this.wrap._paddingX = v;\n        this.wrap._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this.wrap._paddingY = v;\n        this.wrap._updateBlurSize();\n    }\n\n    set amount(v) {\n        return this.wrap.amount = v;\n    }\n\n    get amount() {\n        return this.wrap.amount;\n    }\n\n    _onResize() {\n        this.wrap.w = this.renderWidth;\n        this.wrap.h = this.renderHeight;\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    _build() {\n        this.patch({\n            Wrap: {type: this.stage.gl ? WebGLFastBlurComponent : C2dFastBlurComponent}\n        });\n    }\n\n}\n\n\nclass C2dFastBlurComponent extends Component {\n\n    static _template() {\n        return {\n            forceZIndexContext: true,\n            rtt: true,\n            Textwrap: {shader: {type: C2dBlurShader}, Content: {}}\n        }\n    }\n\n    constructor(stage) {\n        super(stage);\n        this._textwrap = this.sel(\"Textwrap\");\n        this._wrapper = this.sel(\"Textwrap>Content\");\n\n        this._amount = 0;\n        this._paddingX = 0;\n        this._paddingY = 0;\n\n    }\n\n    static getSpline() {\n        if (!this._multiSpline) {\n            this._multiSpline = new MultiSpline();\n            this._multiSpline.parse(false, {0: 0, 0.25: 1.5, 0.5: 5.5, 0.75: 18, 1: 39});\n        }\n        return this._multiSpline;\n    }\n\n    get content() {\n        return this.sel('Textwrap>Content');\n    }\n\n    set content(v) {\n        this.sel('Textwrap>Content').patch(v, true);\n    }\n\n    set padding(v) {\n        this._paddingX = v;\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this._paddingX = v;\n        this._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    _updateBlurSize() {\n        let w = this.renderWidth;\n        let h = this.renderHeight;\n\n        let paddingX = this._paddingX;\n        let paddingY = this._paddingY;\n\n        this._wrapper.x = paddingX;\n        this._textwrap.x = -paddingX;\n\n        this._wrapper.y = paddingY;\n        this._textwrap.y = -paddingY;\n\n        this._textwrap.w = w + paddingX * 2;\n        this._textwrap.h = h + paddingY * 2;\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    /**\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\n     * Best results for non-fractional values.\n     * @param v;\n     */\n    set amount(v) {\n        this._amount = v;\n        this._textwrap.shader.kernelRadius = C2dFastBlurComponent._amountToKernelRadius(v);\n    }\n\n    static _amountToKernelRadius(v) {\n        return C2dFastBlurComponent.getSpline().getValue(Math.min(1, v * 0.25));\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n}\n\nclass WebGLFastBlurComponent extends Component {\n\n    static _template() {\n        const onUpdate = function(element, elementCore) {\n            if ((elementCore._recalc & (2 + 128))) {\n                const w = elementCore.w;\n                const h = elementCore.h;\n                let cur = elementCore;\n                do {\n                    cur = cur._children[0];\n                    cur._element.w = w;\n                    cur._element.h = h;\n                } while(cur._children);\n            }\n        };\n\n        return {\n            Textwrap: {rtt: true, forceZIndexContext: true, renderOffscreen: true, Content: {}},\n            Layers: {\n                L0: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L1: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L2: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L3: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}}\n            },\n            Result: {shader: {type: FastBlurOutputShader}, visible: false}\n        }\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    constructor(stage) {\n        super(stage);\n        this._textwrap = this.sel(\"Textwrap\");\n        this._wrapper = this.sel(\"Textwrap>Content\");\n        this._layers = this.sel(\"Layers\");\n        this._output = this.sel(\"Result\");\n\n        this._amount = 0;\n        this._paddingX = 0;\n        this._paddingY = 0;\n    }\n\n    _buildLayers() {\n        const filterShaderSettings = [{x:1,y:0,kernelRadius:1},{x:0,y:1,kernelRadius:1},{x:1.5,y:0,kernelRadius:1},{x:0,y:1.5,kernelRadius:1}];\n        const filterShaders = filterShaderSettings.map(s => {\n            const shader = Shader.create(this.stage, Object.assign({type: LinearBlurShader}, s));\n            return shader;\n        });\n\n        this._setLayerTexture(this.getLayerContents(0), this._textwrap.getTexture(), []);\n        this._setLayerTexture(this.getLayerContents(1), this.getLayer(0).getTexture(), [filterShaders[0], filterShaders[1]]);\n\n        // Notice that 1.5 filters should be applied before 1.0 filters.\n        this._setLayerTexture(this.getLayerContents(2), this.getLayer(1).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n        this._setLayerTexture(this.getLayerContents(3), this.getLayer(2).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n    }\n\n    _setLayerTexture(element, texture, steps) {\n        if (!steps.length) {\n            element.texture = texture;\n        } else {\n            const step = steps.pop();\n            const child = element.stage.c({rtt: true, shader: step});\n\n            // Recurse.\n            this._setLayerTexture(child, texture, steps);\n\n            element.childList.add(child);\n        }\n        return element;\n    }\n\n    get content() {\n        return this.sel('Textwrap>Content');\n    }\n\n    set content(v) {\n        this.sel('Textwrap>Content').patch(v, true);\n    }\n\n    set padding(v) {\n        this._paddingX = v;\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this._paddingX = v;\n        this._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    getLayer(i) {\n        return this._layers.sel(\"L\" + i);\n    }\n\n    getLayerContents(i) {\n        return this.getLayer(i).sel(\"Content\");\n    }\n\n    _onResize() {\n        this._updateBlurSize();\n    }\n\n    _updateBlurSize() {\n        let w = this.renderWidth;\n        let h = this.renderHeight;\n\n        let paddingX = this._paddingX;\n        let paddingY = this._paddingY;\n\n        let fw = w + paddingX * 2;\n        let fh = h + paddingY * 2;\n        this._textwrap.w = fw;\n        this._wrapper.x = paddingX;\n        this.getLayer(0).w = this.getLayerContents(0).w = fw / 2;\n        this.getLayer(1).w = this.getLayerContents(1).w = fw / 4;\n        this.getLayer(2).w = this.getLayerContents(2).w = fw / 8;\n        this.getLayer(3).w = this.getLayerContents(3).w = fw / 16;\n        this._output.x = -paddingX;\n        this._textwrap.x = -paddingX;\n        this._output.w = fw;\n\n        this._textwrap.h = fh;\n        this._wrapper.y = paddingY;\n        this.getLayer(0).h = this.getLayerContents(0).h = fh / 2;\n        this.getLayer(1).h = this.getLayerContents(1).h = fh / 4;\n        this.getLayer(2).h = this.getLayerContents(2).h = fh / 8;\n        this.getLayer(3).h = this.getLayerContents(3).h = fh / 16;\n        this._output.y = -paddingY;\n        this._textwrap.y = -paddingY;\n        this._output.h = fh;\n\n        this.w = w;\n        this.h = h;\n    }\n\n    /**\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\n     * Best results for non-fractional values.\n     * @param v;\n     */\n    set amount(v) {\n        this._amount = v;\n        this._update();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    _update() {\n        let v = Math.min(4, Math.max(0, this._amount));\n        if (v === 0) {\n            this._textwrap.renderToTexture = false;\n            this._output.shader.otherTextureSource = null;\n            this._output.visible = false;\n        } else {\n            this._textwrap.renderToTexture = true;\n            this._output.visible = true;\n\n            this.getLayer(0).visible = (v > 0);\n            this.getLayer(1).visible = (v > 1);\n            this.getLayer(2).visible = (v > 2);\n            this.getLayer(3).visible = (v > 3);\n\n            if (v <= 1) {\n                this._output.texture = this._textwrap.getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(0).getTexture();\n                this._output.shader.a = v;\n            } else if (v <= 2) {\n                this._output.texture = this.getLayer(0).getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(1).getTexture();\n                this._output.shader.a = v - 1;\n            } else if (v <= 3) {\n                this._output.texture = this.getLayer(1).getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(2).getTexture();\n                this._output.shader.a = v - 2;\n            } else if (v <= 4) {\n                this._output.texture = this.getLayer(2).getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(3).getTexture();\n                this._output.shader.a = v - 3;\n            }\n        }\n    }\n\n    set shader(s) {\n        super.shader = s;\n        if (!this.renderToTexture) {\n            console.warn(\"[Lightning] Please enable renderToTexture to use with a shader.\");\n        }\n    }\n\n    _firstActive() {\n        this._buildLayers();\n    }\n\n}\n\n/**\n * Shader that combines two textures into one output.\n */\nclass FastBlurOutputShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._a = 0;\n        this._otherTextureSource = null;\n    }\n\n    get a() {\n        return this._a;\n    }\n\n    set a(v) {\n        this._a = v;\n        this.redraw();\n    }\n\n    set otherTextureSource(v) {\n        this._otherTextureSource = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"a\", this._a, this.gl.uniform1f);\n        this._setUniform(\"uSampler2\", 1, this.gl.uniform1i);\n    }\n\n    beforeDraw(operation) {\n        let glTexture = this._otherTextureSource ? this._otherTextureSource.nativeTexture : null;\n\n        let gl = this.gl;\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n        gl.activeTexture(gl.TEXTURE0);\n    }\n}\n\nFastBlurOutputShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform sampler2D uSampler2;\n    uniform float a;\n    void main(void){\n        if (a == 1.0) {\n            gl_FragColor = texture2D(uSampler2, vTextureCoord) * vColor;\n        } else {\n            gl_FragColor = ((1.0 - a) * texture2D(uSampler, vTextureCoord) + (a * texture2D(uSampler2, vTextureCoord))) * vColor;\n        }\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\nimport LinearBlurShader from \"../renderer/webgl/shaders/LinearBlurShader.mjs\";\nimport BoxBlurShader from \"../renderer/webgl/shaders/BoxBlurShader.mjs\";\nimport DefaultShader from \"../renderer/webgl/shaders/DefaultShader.mjs\";\n\nexport default class BloomComponent extends Component {\n\n    static _template() {\n        const onUpdate = function(element, elementCore) {\n            if ((elementCore._recalc & (2 + 128))) {\n                const w = elementCore.w;\n                const h = elementCore.h;\n                let cur = elementCore;\n                do {\n                    cur = cur._children[0];\n                    cur._element.w = w;\n                    cur._element.h = h;\n                } while(cur._children);\n            }\n        };\n\n        return {\n            Textwrap: {rtt: true, forceZIndexContext: true, renderOffscreen: true,\n                BloomBase: {shader: {type: BloomBaseShader},\n                    Content: {}\n                }\n            },\n            Layers: {\n                L0: {rtt: true, onUpdate: onUpdate, scale: 2, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L1: {rtt: true, onUpdate: onUpdate, scale: 4, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L2: {rtt: true, onUpdate: onUpdate, scale: 8, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L3: {rtt: true, onUpdate: onUpdate, scale: 16, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}}\n            }\n        }\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    constructor(stage) {\n        super(stage);\n        this._textwrap = this.sel(\"Textwrap\");\n        this._wrapper = this.sel(\"Textwrap.Content\");\n        this._layers = this.sel(\"Layers\");\n\n        this._amount = 0;\n        this._paddingX = 0;\n        this._paddingY = 0;\n    }\n\n    _build() {\n        const filterShaderSettings = [{x:1,y:0,kernelRadius:3},{x:0,y:1,kernelRadius:3},{x:1.5,y:0,kernelRadius:3},{x:0,y:1.5,kernelRadius:3}];\n        const filterShaders = filterShaderSettings.map(s => {\n            const shader = this.stage.createShader(Object.assign({type: LinearBlurShader}, s));\n            return shader;\n        });\n\n        this._setLayerTexture(this.getLayerContents(0), this._textwrap.getTexture(), []);\n        this._setLayerTexture(this.getLayerContents(1), this.getLayer(0).getTexture(), [filterShaders[0], filterShaders[1]]);\n\n        // Notice that 1.5 filters should be applied before 1.0 filters.\n        this._setLayerTexture(this.getLayerContents(2), this.getLayer(1).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n        this._setLayerTexture(this.getLayerContents(3), this.getLayer(2).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n    }\n\n    _setLayerTexture(element, texture, steps) {\n        if (!steps.length) {\n            element.texture = texture;\n        } else {\n            const step = steps.pop();\n            const child = element.stage.c({rtt: true, shader: step});\n\n            // Recurse.\n            this._setLayerTexture(child, texture, steps);\n\n            element.childList.add(child);\n        }\n        return element;\n    }\n\n    get content() {\n        return this.sel('Textwrap.Content');\n    }\n\n    set content(v) {\n        this.sel('Textwrap.Content').patch(v);\n    }\n\n    set padding(v) {\n        this._paddingX = v;\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this._paddingX = v;\n        this._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    getLayer(i) {\n        return this._layers.sel(\"L\" + i);\n    }\n\n    getLayerContents(i) {\n        return this.getLayer(i).sel(\"Content\");\n    }\n\n    _onResize() {\n        this._updateBlurSize();\n    }\n\n    _updateBlurSize() {\n        let w = this.renderWidth;\n        let h = this.renderHeight;\n\n        let paddingX = this._paddingX;\n        let paddingY = this._paddingY;\n\n        let fw = w + paddingX * 2;\n        let fh = h + paddingY * 2;\n        this._textwrap.w = fw;\n        this._wrapper.x = paddingX;\n        this.getLayer(0).w = this.getLayerContents(0).w = fw / 2;\n        this.getLayer(1).w = this.getLayerContents(1).w = fw / 4;\n        this.getLayer(2).w = this.getLayerContents(2).w = fw / 8;\n        this.getLayer(3).w = this.getLayerContents(3).w = fw / 16;\n        this._textwrap.x = -paddingX;\n\n        this._textwrap.h = fh;\n        this._wrapper.y = paddingY;\n        this.getLayer(0).h = this.getLayerContents(0).h = fh / 2;\n        this.getLayer(1).h = this.getLayerContents(1).h = fh / 4;\n        this.getLayer(2).h = this.getLayerContents(2).h = fh / 8;\n        this.getLayer(3).h = this.getLayerContents(3).h = fh / 16;\n        this._textwrap.y = -paddingY;\n\n        this.w = w;\n        this.h = h;\n    }\n\n    /**\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\n     * Best results for non-fractional values.\n     * @param v;\n     */\n    set amount(v) {\n        this._amount = v;\n        this._update();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    _update() {\n        let v = Math.min(4, Math.max(0, this._amount));\n        if (v > 0) {\n            this.getLayer(0).visible = (v > 0);\n            this.getLayer(1).visible = (v > 1);\n            this.getLayer(2).visible = (v > 2);\n            this.getLayer(3).visible = (v > 3);\n        }\n    }\n\n    set shader(s) {\n        super.shader = s;\n        if (!this.renderToTexture) {\n            console.warn(\"[Lightning] Please enable renderToTexture to use with a shader.\");\n        }\n    }\n\n    _firstActive() {\n        this._build();\n    }\n\n}\n\nclass BloomBaseShader extends DefaultShader {\n}\n\nBloomBaseShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\n        float m = max(max(color.r, color.g), color.b);\n        float c = max(0.0, (m - 0.80)) * 5.0;\n        color = color * c;\n        gl_FragColor = color;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\n\nexport default class SmoothScaleComponent extends Component {\n\n    static _template() {\n        return {\n            ContentWrap: {renderOffscreen: true, forceZIndexContext: true, onAfterUpdate: SmoothScaleComponent._updateDimensions,\n                Content: {}\n            },\n            Scale: {visible: false}\n        }\n    }\n\n    constructor(stage) {\n        super(stage);\n\n        this._smoothScale = 1;\n        this._iterations = 0;\n    }\n\n    get content() {\n        return this.tag('Content');\n    }\n\n    set content(v) {\n        this.tag('Content').patch(v, true);\n    }\n\n    get smoothScale() {\n        return this._smoothScale;\n    }\n\n    set smoothScale(v) {\n        if (this._smoothScale !== v) {\n            let its = 0;\n            while(v < 0.5 && its < 12) {\n                its++;\n                v = v * 2;\n            }\n\n            this.scale = v;\n            this._setIterations(its);\n\n            this._smoothScale = v;\n        }\n    }\n\n    _setIterations(its) {\n        if (this._iterations !== its) {\n            const scalers = this.sel(\"Scale\").childList;\n            const content = this.sel(\"ContentWrap\");\n            while (scalers.length < its) {\n                const first = scalers.length === 0;\n                const texture = (first ? content.getTexture() : scalers.last.getTexture());\n                scalers.a({rtt: true, renderOffscreen: true, texture: texture});\n            }\n\n            SmoothScaleComponent._updateDimensions(this.tag(\"ContentWrap\"), true);\n\n            const useScalers = (its > 0);\n            this.patch({\n                ContentWrap: {renderToTexture: useScalers},\n                Scale: {visible: useScalers}\n            });\n\n            for (let i = 0, n = scalers.length; i < n; i++) {\n                scalers.getAt(i).patch({\n                    visible: i < its,\n                    renderOffscreen: i !== its - 1\n                });\n            }\n            this._iterations = its;\n        }\n    }\n\n    static _updateDimensions(contentWrap, force) {\n        const content = contentWrap.children[0];\n        let w = content.renderWidth;\n        let h = content.renderHeight;\n        if (w !== contentWrap.w || h !== contentWrap.h || force) {\n            contentWrap.w = w;\n            contentWrap.h = h;\n\n            const scalers = contentWrap.parent.tag(\"Scale\").children;\n            for (let i = 0, n = scalers.length; i < n; i++) {\n                w = w * 0.5;\n                h = h * 0.5;\n                scalers[i].w = w;\n                scalers[i].h = h;\n            }\n        }\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\n\nexport default class BorderComponent extends Component {\n\n    static _template() {\n        return {\n            Content: {},\n            Borders: {\n                Top: {rect: true, visible: false, mountY: 1},\n                Right: {rect: true, visible: false},\n                Bottom: {rect: true, visible: false},\n                Left: {rect: true, visible: false, mountX: 1}\n            }\n        };\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    constructor(stage) {\n        super(stage);\n\n        this._borderTop = this.tag(\"Top\");\n        this._borderRight = this.tag(\"Right\");\n        this._borderBottom = this.tag(\"Bottom\");\n        this._borderLeft = this.tag(\"Left\");\n\n        this.onAfterUpdate = function (element) {\n            const content = element.childList.first;\n            let w = element.core.w || content.renderWidth;\n            let h = element.core.h || content.renderHeight;\n            element._borderTop.w = w;\n            element._borderBottom.y = h;\n            element._borderBottom.w = w;\n            element._borderLeft.h = h + element._borderTop.h + element._borderBottom.h;\n            element._borderLeft.y = -element._borderTop.h;\n            element._borderRight.x = w;\n            element._borderRight.h = h + element._borderTop.h + element._borderBottom.h;\n            element._borderRight.y = -element._borderTop.h;\n        };\n\n        this.borderWidth = 1;\n    }\n\n    get content() {\n        return this.sel('Content');\n    }\n\n    set content(v) {\n        this.sel('Content').patch(v, true);\n    }\n\n    get borderWidth() {\n        return this.borderWidthTop;\n    }\n\n    get borderWidthTop() {\n        return this._borderTop.h;\n    }\n\n    get borderWidthRight() {\n        return this._borderRight.w;\n    }\n\n    get borderWidthBottom() {\n        return this._borderBottom.h;\n    }\n\n    get borderWidthLeft() {\n        return this._borderLeft.w;\n    }\n\n    set borderWidth(v) {\n        this.borderWidthTop = v;\n        this.borderWidthRight = v;\n        this.borderWidthBottom = v;\n        this.borderWidthLeft = v;\n    }\n\n    set borderWidthTop(v) {\n        this._borderTop.h = v;\n        this._borderTop.visible = (v > 0);\n    }\n\n    set borderWidthRight(v) {\n        this._borderRight.w = v;\n        this._borderRight.visible = (v > 0);\n    }\n\n    set borderWidthBottom(v) {\n        this._borderBottom.h = v;\n        this._borderBottom.visible = (v > 0);\n    }\n\n    set borderWidthLeft(v) {\n        this._borderLeft.w = v;\n        this._borderLeft.visible = (v > 0);\n    }\n\n    get colorBorder() {\n        return this.colorBorderTop;\n    }\n\n    get colorBorderTop() {\n        return this._borderTop.color;\n    }\n\n    get colorBorderRight() {\n        return this._borderRight.color;\n    }\n\n    get colorBorderBottom() {\n        return this._borderBottom.color;\n    }\n\n    get colorBorderLeft() {\n        return this._borderLeft.color;\n    }\n\n    set colorBorder(v) {\n        this.colorBorderTop = v;\n        this.colorBorderRight = v;\n        this.colorBorderBottom = v;\n        this.colorBorderLeft = v;\n    }\n\n    set colorBorderTop(v) {\n        this._borderTop.color = v;\n    }\n\n    set colorBorderRight(v) {\n        this._borderRight.color = v;\n    }\n\n    set colorBorderBottom(v) {\n        this._borderBottom.color = v;\n    }\n\n    set colorBorderLeft(v) {\n        this._borderLeft.color = v;\n    }\n\n    get borderTop() {\n        return this._borderTop;\n    }\n\n    set borderTop(settings) {\n        this.borderTop.patch(settings);\n    }\n\n    get borderRight() {\n        return this._borderRight;\n    }\n\n    set borderRight(settings) {\n        this.borderRight.patch(settings);\n    }\n\n    get borderBottom() {\n        return this._borderBottom;\n    }\n\n    set borderBottom(settings) {\n        this.borderBottom.patch(settings);\n    }\n\n    get borderLeft() {\n        return this._borderLeft;\n    }\n\n    set borderLeft(settings) {\n        this.borderLeft.patch(settings);\n    }\n\n    set borders(settings) {\n        this.borderTop = settings;\n        this.borderLeft = settings;\n        this.borderBottom = settings;\n        this.borderRight = settings;\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport C2dDefaultShader from \"../../c2d/shaders/DefaultShader.mjs\";\nimport WebGLDefaultShader from \"../../webgl/shaders/DefaultShader.mjs\";\n\nexport class WebGLGrayscaleShader extends WebGLDefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._amount = 1;\n    }\n\n    static getC2d() {\n        return C2dGrayscaleShader;\n    }\n\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\n    }\n\n}\n\nWebGLGrayscaleShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float amount;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\n        float grayness = 0.2 * color.r + 0.6 * color.g + 0.2 * color.b;\n        gl_FragColor = vec4(amount * vec3(grayness, grayness, grayness) + (1.0 - amount) * color.rgb, color.a);\n    }\n`;\n\nexport class C2dGrayscaleShader extends C2dDefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._amount = 1;\n    }\n\n    static getWebGL() {\n        return WebGLGrayscaleShader;\n    }\n\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    _beforeDrawEl({target}) {\n        target.ctx.filter = \"grayscale(\" + this._amount + \")\";\n    }\n\n    _afterDrawEl({target}) {\n        target.ctx.filter = \"none\";\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport NoiseTexture from \"../../../textures/NoiseTexture.mjs\";\nimport DefaultShader from \"./DefaultShader.mjs\";\n\n/**\n * This shader can be used to fix a problem that is known as 'gradient banding'.\n */\nexport default class DitheringShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._noiseTexture = new NoiseTexture(ctx.stage);\n\n        this._graining = 1/256;\n\n        this._random = false;\n    }\n\n    set graining(v) {\n        this._graining = v;\n        this.redraw();\n    }\n\n    set random(v) {\n        this._random = v;\n        this.redraw();\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        // Make sure that the noise texture is uploaded to the GPU.\n        this._noiseTexture.load();\n\n        let offset = operation.extraAttribsDataByteOffset / 4;\n        let floats = operation.quads.floats;\n\n        let length = operation.length;\n\n        for (let i = 0; i < length; i++) {\n\n            // Calculate noise texture coordinates so that it spans the full element.\n            let brx = operation.getElementWidth(i) / this._noiseTexture.getRenderWidth();\n            let bry = operation.getElementHeight(i) / this._noiseTexture.getRenderHeight();\n\n            let ulx = 0;\n            let uly = 0;\n            if (this._random) {\n                ulx = Math.random();\n                uly = Math.random();\n\n                brx += ulx;\n                bry += uly;\n\n                if (Math.random() < 0.5) {\n                    // Flip for more randomness.\n                    const t = ulx;\n                    ulx = brx;\n                    brx = t;\n                }\n\n                if (Math.random() < 0.5) {\n                    // Flip for more randomness.\n                    const t = uly;\n                    uly = bry;\n                    bry = t;\n                }\n            }\n\n            // Specify all corner points.\n            floats[offset] = ulx;\n            floats[offset + 1] = uly;\n\n            floats[offset + 2] = brx;\n            floats[offset + 3] = uly;\n\n            floats[offset + 4] = brx;\n            floats[offset + 5] = bry;\n\n            floats[offset + 6] = ulx;\n            floats[offset + 7] = bry;\n\n            offset += 8;\n        }\n    }\n\n    beforeDraw(operation) {\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aNoiseTextureCoord\"), 2, gl.FLOAT, false, 8, this.getVertexAttribPointerOffset(operation));\n\n        let glTexture = this._noiseTexture.source.nativeTexture;\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n        gl.activeTexture(gl.TEXTURE0);\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 8;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"uNoiseSampler\", 1, this.gl.uniform1i);\n        this._setUniform(\"graining\", 2 * this._graining, this.gl.uniform1f);\n    }\n\n    enableAttribs() {\n        super.enableAttribs();\n        let gl = this.gl;\n        gl.enableVertexAttribArray(this._attrib(\"aNoiseTextureCoord\"));\n    }\n\n    disableAttribs() {\n        super.disableAttribs();\n        let gl = this.gl;\n        gl.disableVertexAttribArray(this._attrib(\"aNoiseTextureCoord\"));\n    }\n\n    useDefault() {\n        return this._graining === 0;\n    }\n\n    afterDraw(operation) {\n        if (this._random) {\n            this.redraw();\n        }\n    }\n\n}\n\nDitheringShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec2 aNoiseTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec2 vNoiseTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vNoiseTextureCoord = aNoiseTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nDitheringShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec2 vNoiseTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform sampler2D uNoiseSampler;\n    uniform float graining;\n    void main(void){\n        vec4 noise = texture2D(uNoiseSampler, vNoiseTextureCoord);\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        gl_FragColor = (color * vColor) + graining * (noise.r - 0.5);\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../../../tree/Utils.mjs\";\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class CircularPushShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._inputValue = 0;\n\n        this._maxDerivative = 0.01;\n\n        this._normalizedValue = 0;\n\n        // The offset between buckets. A value between 0 and 1.\n        this._offset = 0;\n\n        this._amount = 0.1;\n\n        this._aspectRatio = 1;\n\n        this._offsetX = 0;\n\n        this._offsetY = 0;\n\n        this.buckets = 100;\n    }\n\n    get aspectRatio() {\n        return this._aspectRatio;\n    }\n\n    set aspectRatio(v) {\n        this._aspectRatio = v;\n        this.redraw();\n    }\n\n    get offsetX() {\n        return this._offsetX;\n    }\n\n    set offsetX(v) {\n        this._offsetX = v;\n        this.redraw();\n    }\n\n    get offsetY() {\n        return this._offsetY;\n    }\n\n    set offsetY(v) {\n        this._offsetY = v;\n        this.redraw();\n    }\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    set inputValue(v) {\n        this._inputValue = v;\n    }\n\n    get inputValue() {\n        return this._inputValue;\n    }\n\n    set maxDerivative(v) {\n        this._maxDerivative = v;\n    }\n\n    get maxDerivative() {\n        return this._maxDerivative;\n    }\n\n    set buckets(v) {\n        if (v > 100) {\n            console.warn(\"[Lightning] CircularPushShader: supports max 100 buckets\");\n            v = 100;\n        }\n\n        // This should be set before starting.\n        this._buckets = v;\n\n        // Init values array in the correct length.\n        this._values = new Uint8Array(this._getValues(v));\n\n        this.redraw();\n    }\n\n    get buckets() {\n        return this._buckets;\n    }\n\n    _getValues(n) {\n        const v = [];\n        for (let i = 0; i < n; i++) {\n            v.push(this._inputValue);\n        }\n        return v;\n    }\n\n    /**\n     * Progresses the shader with the specified (fractional) number of buckets.\n     * @param {number} o;\n     *   A number from 0 to 1 (1 = all buckets).\n     */\n    progress(o) {\n        this._offset += o * this._buckets;\n        const full = Math.floor(this._offset);\n        this._offset -= full;\n        this._shiftBuckets(full);\n        this.redraw();\n    }\n\n    _shiftBuckets(n) {\n        for (let i = this._buckets - 1; i >= 0; i--) {\n            const targetIndex = i - n;\n            if (targetIndex < 0) {\n                this._normalizedValue = Math.min(this._normalizedValue + this._maxDerivative, Math.max(this._normalizedValue - this._maxDerivative, this._inputValue));\n                this._values[i] = 255 * this._normalizedValue;\n            } else {\n                this._values[i] = this._values[targetIndex];\n            }\n        }\n    }\n\n    set offset(v) {\n        this._offset = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"aspectRatio\", this._aspectRatio, this.gl.uniform1f);\n        this._setUniform(\"offsetX\", this._offsetX, this.gl.uniform1f);\n        this._setUniform(\"offsetY\", this._offsetY, this.gl.uniform1f);\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\n        this._setUniform(\"offset\", this._offset, this.gl.uniform1f);\n        this._setUniform(\"buckets\", this._buckets, this.gl.uniform1f);\n        this._setUniform(\"uValueSampler\", 1, this.gl.uniform1i);\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    beforeDraw(operation) {\n        const gl = this.gl;\n        gl.activeTexture(gl.TEXTURE1);\n        if (!this._valuesTexture) {\n            this._valuesTexture = gl.createTexture();\n            gl.bindTexture(gl.TEXTURE_2D, this._valuesTexture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            if (Utils.isNode) {\n                gl.pixelStorei(gl.UNPACK_FLIP_BLUE_RED, false);\n            }\n            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n        } else {\n            gl.bindTexture(gl.TEXTURE_2D, this._valuesTexture);\n        }\n\n        // Upload new values.\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.ALPHA, this._buckets, 1, 0, gl.ALPHA, gl.UNSIGNED_BYTE, this._values);\n        gl.activeTexture(gl.TEXTURE0);\n    }\n\n    cleanup() {\n        if (this._valuesTexture) {\n            this.gl.deleteTexture(this._valuesTexture);\n        }\n    }\n\n\n}\n\nCircularPushShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    uniform float offsetX;\n    uniform float offsetY;\n    uniform float aspectRatio;\n    varying vec2 vTextureCoord;\n    varying vec2 vPos;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vPos = vTextureCoord * 2.0 - 1.0;\n        vPos.y = vPos.y * aspectRatio;\n        vPos.y = vPos.y + offsetY;\n        vPos.x = vPos.x + offsetX;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nCircularPushShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vPos;\n    uniform float amount;\n    uniform float offset;\n    uniform float values[100];\n    uniform float buckets;\n    uniform sampler2D uSampler;\n    uniform sampler2D uValueSampler;\n    void main(void){\n        float l = length(vPos);\n        float m = (l * buckets * 0.678 - offset) / buckets;\n        float f = texture2D(uValueSampler, vec2(m, 0.0)).a * amount;\n        vec2 unit = vPos / l;\n        gl_FragColor = texture2D(uSampler, vTextureCoord - f * unit) * vColor;\n    }\n`;\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class InversionShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._amount = 1;\n    }\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\n    }\n\n}\n\nInversionShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float amount;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        color.rgb = color.rgb * (1.0 - amount) + amount * (1.0 * color.a - color.rgb); \n        gl_FragColor = color * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class OutlineShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n        this._width = 5;\n        this._col = 0xFFFFFFFF;\n        this._color = [1,1,1,1];\n    }\n\n    set width(v) {\n        this._width = v;\n        this.redraw();\n    }\n\n    get color() {\n        return this._col;\n    }\n\n    set color(v) {\n        if (this._col !== v) {\n            const col = StageUtils.getRgbaComponentsNormalized(v);\n            col[0] = col[0] * col[3];\n            col[1] = col[1] * col[3];\n            col[2] = col[2] * col[3];\n\n            this._color = col;\n\n            this.redraw();\n\n            this._col = v;\n        }\n    }\n\n    useDefault() {\n        return (this._width === 0 || this._col[3] === 0);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        let gl = this.gl;\n        this._setUniform(\"color\", new Float32Array(this._color), gl.uniform4fv);\n    }\n\n    enableAttribs() {\n        super.enableAttribs();\n        this.gl.enableVertexAttribArray(this._attrib(\"aCorner\"));\n    }\n\n    disableAttribs() {\n        super.disableAttribs();\n        this.gl.disableVertexAttribArray(this._attrib(\"aCorner\"));\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        let offset = operation.extraAttribsDataByteOffset / 4;\n        let floats = operation.quads.floats;\n\n        let length = operation.length;\n\n        for (let i = 0; i < length; i++) {\n\n            const elementCore = operation.getElementCore(i);\n\n            // We are setting attributes such that if the value is < 0 or > 1, a border should be drawn.\n            const ddw = this._width / elementCore.w;\n            const dw = ddw / (1 - 2 * ddw);\n            const ddh = this._width / elementCore.h;\n            const dh = ddh / (1 - 2 * ddh);\n\n            // Specify all corner points.\n            floats[offset] = -dw;\n            floats[offset + 1] = -dh;\n\n            floats[offset + 2] = 1 + dw;\n            floats[offset + 3] = -dh;\n\n            floats[offset + 4] = 1 + dw;\n            floats[offset + 5] = 1 + dh;\n\n            floats[offset + 6] = -dw;\n            floats[offset + 7] = 1 + dh;\n\n            offset += 8;\n        }\n    }\n\n    beforeDraw(operation) {\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aCorner\"), 2, gl.FLOAT, false, 8, this.getVertexAttribPointerOffset(operation));\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 8;\n    }\n\n}\n\nOutlineShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    attribute vec2 aCorner;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec2 vCorner;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vCorner = aCorner;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nOutlineShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vCorner;\n    uniform vec4 color;\n    uniform sampler2D uSampler;\n    void main(void){\n        vec2 m = min(vCorner, 1.0 - vCorner);\n        float value = step(0.0, min(m.x, m.y));\n        gl_FragColor = mix(color, texture2D(uSampler, vTextureCoord) * vColor, value);\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\n/**\n * @see https://github.com/pixijs/pixi-filters/tree/master/filters/pixelate/src\n */\nexport default class PixelateShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._size = new Float32Array([4, 4]);\n    }\n\n    get x() {\n        return this._size[0];\n    }\n\n    set x(v) {\n        this._size[0] = v;\n        this.redraw();\n    }\n\n    get y() {\n        return this._size[1];\n    }\n\n    set y(v) {\n        this._size[1] = v;\n        this.redraw();\n    }\n\n    get size() {\n        return this._size[0];\n    }\n\n    set size(v) {\n        this._size[0] = v;\n        this._size[1] = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return ((this._size[0] === 0) && (this._size[1] === 0));\n    }\n\n    static getWebGLImpl() {\n        return WebGLPixelateShaderImpl;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        let gl = this.gl;\n        this._setUniform(\"size\", new Float32Array(this._size), gl.uniform2fv);\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 8;\n    }\n\n    enableAttribs() {\n        super.enableAttribs();\n        this.gl.enableVertexAttribArray(this._attrib(\"aTextureRes\"));\n    }\n\n    disableAttribs() {\n        super.disableAttribs();\n        this.gl.disableVertexAttribArray(this._attrib(\"aTextureRes\"));\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        let offset = operation.extraAttribsDataByteOffset / 4;\n        let floats = operation.quads.floats;\n\n        let length = operation.length;\n        for (let i = 0; i < length; i++) {\n            let w = operation.quads.getTextureWidth(operation.index + i);\n            let h = operation.quads.getTextureHeight(operation.index + i);\n\n            floats[offset] = w;\n            floats[offset + 1] = h;\n            floats[offset + 2] = w;\n            floats[offset + 3] = h;\n            floats[offset + 4] = w;\n            floats[offset + 5] = h;\n            floats[offset + 6] = w;\n            floats[offset + 7] = h;\n\n            offset += 8;\n        }\n    }\n\n    beforeDraw(operation) {\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aTextureRes\"), 2, gl.FLOAT, false, this.getExtraAttribBytesPerVertex(), this.getVertexAttribPointerOffset(operation));\n    }\n}\n\nPixelateShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    attribute vec2 aTextureRes;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vTextureRes;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        vTextureRes = aTextureRes;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nPixelateShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vTextureRes;\n\n    uniform vec2 size;\n    uniform sampler2D uSampler;\n    \n    vec2 mapCoord( vec2 coord )\n    {\n        coord *= vTextureRes.xy;\n        return coord;\n    }\n    \n    vec2 unmapCoord( vec2 coord )\n    {\n        coord /= vTextureRes.xy;\n        return coord;\n    }\n    \n    vec2 pixelate(vec2 coord, vec2 size)\n    {\n        return floor( coord / size ) * size;\n    }\n    \n    void main(void)\n    {\n        vec2 coord = mapCoord(vTextureCoord);\n        coord = pixelate(coord, size);\n        coord = unmapCoord(coord);\n        gl_FragColor = texture2D(uSampler, coord) * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class RadialFilterShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._radius = 0;\n        this._cutoff = 1;\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    get radius() {\n        return this._radius;\n    }\n\n    set cutoff(v) {\n        this._cutoff = v;\n        this.redraw();\n    }\n\n    get cutoff() {\n        return this._cutoff;\n    }\n    \n    useDefault() {\n        return this._radius === 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        // We substract half a pixel to get a better cutoff effect.\n        this._setUniform(\"radius\", 2 * (this._radius - 0.5) / operation.getRenderWidth(), this.gl.uniform1f);\n        this._setUniform(\"cutoff\", 0.5 * operation.getRenderWidth() / this._cutoff, this.gl.uniform1f);\n    }\n\n}\n\nRadialFilterShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 pos;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n        pos = gl_Position.xy;\n    }\n`;\n\nRadialFilterShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec2 pos;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float radius;\n    uniform float cutoff;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        float f = max(0.0, min(1.0, 1.0 - (length(pos) - radius) * cutoff));\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor * f;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class RoundedRectangleShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._blend = 0;\n        this._radius = [1, 1, 1, 1];\n        this._stroke = 0;\n        this._fc = 0x00ffffff;\n        this._fillColor = this._getNormalizedColor(0xffffffff);\n        this._strokeColor = this._getNormalizedColor(0x00ffffff);\n    }\n\n    set blend(p) {\n        this._blend = Math.min(Math.max(p, 0), 1);\n    }\n\n    get blend() {\n        return this._blend;\n    }\n\n    set radius(v) {\n        if(Array.isArray(v)) {\n            if(v.length === 2) {\n                this._radius = [v[0], v[1], v[0], v[1]];\n            }\n            else if(v.length === 3) {\n                this._radius = [v[0], v[1], v[2], this._radius[3]];\n            }\n            else if (v.length === 4) {\n                this._radius = v;\n            }\n            else {\n                this._radius = [v[0], v[0], v[0], v[0]];\n            }\n        }\n        else {\n            this._radius = [v, v, v, v];\n        }\n        this.redraw();\n    }\n\n    get radius() {\n        return this._radius;\n    }\n\n    set topLeft(num) {\n        this._radius[0] = num;\n        this.redraw();\n    }\n\n    get topLeft() {\n        return this._radius[0];\n    }\n\n    set topRight(num) {\n        this._radius[1] = num;\n        this.redraw();\n    }\n\n    get topRight() {\n        return this._radius[1];\n    }\n\n    set bottomRight(num) {\n        this._radius[2] = num;\n        this.redraw();\n    }\n\n    get bottomRight() {\n        return this._radius[2];\n    }\n\n    set bottomLeft(num) {\n        this._radius[3] = num;\n        this.redraw();\n    }\n\n    get bottomLeft() {\n        return this._radius[3];\n    }\n\n    set strokeColor(argb) {\n        this._sc = argb;\n        this._strokeColor = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    get strokeColor() {\n        return this._sc;\n    }\n\n    set fillColor(argb) {\n        this._fc = argb;\n        this._fillColor = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    get fillColor() {\n        return this._fc;\n    }\n\n    set stroke(num) {\n        this._stroke = num;\n        this.redraw();\n    }\n\n    get stroke() {\n        return this._stroke;\n    }\n\n    _getNormalizedColor(color) {\n        const col = StageUtils.getRgbaComponentsNormalized(color);\n        col[0] *= col[3];\n        col[1] *= col[3];\n        col[2] *= col[3];\n        return new Float32Array(col);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\n        const _radius = this._radius.map((r) => (r + 0.5) * renderPrecision)\n        this._setUniform('radius', new Float32Array(_radius), this.gl.uniform4fv);\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\n        this._setUniform('blend', this._blend, this.gl.uniform1f);\n        this._setUniform('strokeColor', this._strokeColor, this.gl.uniform4fv);\n        this._setUniform('fillColor', this._fillColor, this.gl.uniform4fv);\n        this._setUniform('stroke',  this._stroke * renderPrecision, this.gl.uniform1f);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\n    }\n}\n\nRoundedRectangleShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nRoundedRectangleShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n\n    #define PI 3.14159265359\n\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec4 radius;\n    uniform float stroke;\n    uniform vec4 strokeColor;\n    uniform vec4 fillColor;\n    uniform float alpha;\n    uniform float fill;\n    uniform float blend;\n    \n    float boxDist(vec2 p, vec2 size, float radius){\n        size -= vec2(radius);\n        vec2 d = abs(p) - size;\n        return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\n    }\n    \n    float fillMask(float dist){\n        return clamp(-dist, 0.0, 1.0);\n    }\n    \n    float innerBorderMask(float dist, float width){\n        float alpha1 = clamp(dist + width, 0.0, 1.0);\n        float alpha2 = clamp(dist, 0.0, 1.0);\n        return alpha1 - alpha2;\n    }\n\n    void main() {\n        vec2 halfRes = 0.5 * resolution.xy;\n        float r = 0.0;\n        if (vTextureCoord.x < 0.5 && vTextureCoord.y < 0.5) {\n            r = radius[0];\n        } else if (vTextureCoord.x >= 0.5 && vTextureCoord.y < 0.5) {\n            r = radius[1];\n        } else if (vTextureCoord.x >= 0.5 && vTextureCoord.y >= 0.5) {\n            r = radius[2];\n        } else {\n            r = radius[3];\n        }\n        \n        float b = boxDist(vTextureCoord.xy * resolution - halfRes, halfRes - 0.005, r);\n        vec4 tex = texture2D(uSampler, vTextureCoord) * vColor;\n        vec4 blend = mix(vec4(1.0) * alpha, tex, blend);     \n        vec4 layer1 = mix(vec4(0.0), tex * fillColor, fillMask(b));\n        gl_FragColor = mix(layer1, blend * strokeColor, innerBorderMask(b + 1.0, stroke));\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from './DefaultShader.mjs';\n\nexport default class FadeOutShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._fade = [0, 0, 0, 0];\n    }\n\n    set top(num) {\n        this._fade[0] = num;\n        this.redraw();\n    }\n\n    get top() {\n        return this._fade[0];\n    }\n\n    set right(num) {\n        this._fade[1] = num;\n        this.redraw();\n    }\n\n    get right() {\n        return this._fade[1];\n    }\n\n    set bottom(num) {\n        this._fade[2] = num;\n        this.redraw();\n    }\n\n    get bottom() {\n        return this._fade[2];\n    }\n\n    set left(num) {\n        this._fade[3] = num;\n        this.redraw();\n    }\n\n    get left() {\n        return this._fade[3];\n    }\n\n    set fade(v) {\n        if(Array.isArray(v)) {\n            if(v.length === 2) {\n                this._fade = [v[0], v[1], v[0], v[1]];\n            }\n            else if(v.length === 3) {\n                this._fade = [v[0], v[1], v[2], this._fade[3]];\n            }\n            else if (v.length === 4) {\n                this._fade = v;\n            }\n            else {\n                this._fade = [v[0], v[0], v[0], v[0]];\n            }\n        }\n        else {\n            this._fade = [v, v, v, v];\n        }\n        this.redraw();\n    }\n\n    get fade() {\n        return this._fade;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\n        const fade = this._fade.map((f) => f * renderPrecision);\n        this._setUniform('fade',  new Float32Array(fade), this.gl.uniform4fv);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\n    }\n}\n\nFadeOutShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec4 fade;\n    \n    void main() {\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\n        vec2 halfRes = 0.5 * resolution.xy;\n        vec2 point = vTextureCoord.xy * resolution.xy;\n        \n        vec2 pos1;\n        vec2 pos2;\n        vec2 d;\n        float c;\n        float t = 0.0;\n             \n        if(fade[0] > 0.0) {\n            pos1 = vec2(point.x, point.y);\n            pos2 = vec2(point.x, point.y + fade[0]);\n            d = pos2 - pos1;\n            c = dot(pos1, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        if(fade[1] > 0.0) {\n            vec2 pos1 = vec2(point.x - resolution.x - fade[1], vTextureCoord.y);\n            vec2 pos2 = vec2(point.x - resolution.x, vTextureCoord.y);\n            d = pos1 - pos2;\n            c = dot(pos2, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        if(fade[2] > 0.0) {\n            vec2 pos1 = vec2(vTextureCoord.x, point.y - resolution.y - fade[2]);\n            vec2 pos2 = vec2(vTextureCoord.x, point.y - resolution.y);\n            d = pos1 - pos2;\n            c = dot(pos2, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        if(fade[3] > 0.0) {\n            pos1 = vec2(point.x, point.y);\n            pos2 = vec2(point.x + fade[3], point.y);\n            d = pos2 - pos1;\n            c = dot(pos1, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        gl_FragColor = color;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class VignetteShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._magnitude = 1.3;\n        this._intensity = 0.7;\n        this._pivot = [0.5, 0.5];\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        this._setUniform(\"magnitude\", this._magnitude , this.gl.uniform1f);\n        this._setUniform(\"intensity\", this._intensity, this.gl.uniform1f);\n        this._setUniform('pivot', new Float32Array(this._pivot), this.gl.uniform2fv);\n        this.redraw()\n    }\n\n    set pivot(v) {\n        if(Array.isArray(v)) {\n            this._pivot = v;\n        }\n        else {\n            this._pivot = [v, v];\n        }\n        this.redraw();\n    }\n\n    get pivotX() {\n        return this._pivot[0];\n    }\n\n    set pivotX(v) {\n        this._pivot[0] = v;\n        this.redraw();\n    }\n\n    get pivotY() {\n        return this._pivot[1];\n    }\n\n    set pivotY(v) {\n        this._pivot[1] = v;\n        this.redraw();\n    }\n\n    get intensity() {\n        return this._intensity;\n    }\n\n    set intensity(v) {\n        this._intensity = v;\n        this.redraw();\n    }\n\n    get magnitude() {\n        return this._magnitude;\n\n    }\n\n    set magnitude(v) {\n        this._magnitude = v;\n        this.redraw();\n    }\n}\n\nVignetteShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n\nVignetteShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n\n    uniform float magnitude;\n    uniform float intensity;\n    uniform vec2 pivot;\n\n    void main() {\n        vec2 uv = vTextureCoord.xy - pivot + vec2(0.5);\n        uv.x = clamp(uv.x, 0.0, 1.0);\n        uv.y = clamp(uv.y, 0.0, 1.0);\n   \n        uv *=  1.00 - uv.yx;\n        float vig = uv.x * uv.y * 25.0 * intensity;\n        vig = pow(vig, 0.45 * magnitude);\n        vec4 fragColor = vec4(vig) * vColor;\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * fragColor;\n\n    }\n`\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from '../../../tree/StageUtils.mjs'\n\nexport default class SpinnerShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n        this._radius = 100;\n        this._width = 50;\n        this._period = 1;\n        this._angle = 0.5;\n        this._smooth = 0.005;\n        this._color = 0xffffffff;\n        this._backgroundColor = 0xff000000;\n        this._time = Date.now();\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    set width(v) {\n        this._width = v;\n        this.redraw();\n    }\n\n    set period(v) {\n        this._period = v;\n        this.redraw();\n    }\n\n    set angle(v) {\n        this._angle = v\n        this.redraw();\n    }\n\n    set smooth(v) {\n        this._smooth = v;\n        this.redraw();\n    }\n\n    set color(v) {\n        this._color = v;\n        this.redraw();\n    }\n\n    set backgroundColor(v) {\n        this._backgroundColor = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner\n\n        this._setUniform(\"iTime\", Date.now() - this._time, this.gl.uniform1f);\n\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\n        this._setUniform('radius', this._radius * renderPrecision, this.gl.uniform1f);\n        this._setUniform('width', this._width * renderPrecision, this.gl.uniform1f);\n        this._setUniform('period', this._period, this.gl.uniform1f);\n        this._setUniform('angle', this._angle, this.gl.uniform1f);\n        this._setUniform('smooth', this._smooth, this.gl.uniform1f);\n        this._setUniform('color', new Float32Array(StageUtils.getRgbaComponentsNormalized(this._color)), this.gl.uniform4fv);\n        this._setUniform('backgroundColor', new Float32Array(StageUtils.getRgbaComponentsNormalized(this._backgroundColor)), this.gl.uniform4fv);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv)\n\n        this.redraw()\n    }\n}\n\nSpinnerShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n\nSpinnerShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n\n    uniform float iTime;\n    uniform float radius;\n    uniform float width;\n    uniform float period;\n    uniform float angle;\n    uniform float smooth;\n    uniform vec2 resolution;\n\n    uniform vec4 color;\n    uniform vec4 backgroundColor;\n\n    float ratio = resolution.y / resolution.x;\n\n    vec2 transpose_pos(vec2 pos) {\n        if (ratio < 1.) {\n            float diff = 0.5 - pos.x;\n            pos.x = 0.5 - diff / ratio;\n        } else {\n            float diff = 0.5 - pos.y;\n            pos.y = 0.5 - diff * ratio;\n        }\n        return pos;\n    }\n\n    float get_angle(vec2 pos) {\n        pos = transpose_pos(pos);\n        float a = atan(pos.y - 0.5, pos.x - 0.5);\n        a = (1.0+a/3.14159)/2.0;\n        \n        return a;\n    }\n\n    float dist(vec2 pos1, vec2 pos2) {\n        pos1 = transpose_pos(pos1);\n        return distance(pos1, pos2);\n    }\n\n    void main()\n    {\n        vec2 fragCoord = vTextureCoord;\n        vec4 fragColor = vColor;\n        \n        vec2 st = vTextureCoord;\n        float pct = dist(st, vec2(0.5));\n\n        float a = get_angle(st);\n        float t = iTime / 1000.0 / period;\n\n        float inner = max((radius - width) / resolution.x, (radius - width) / resolution.y);\n        float outer = max(radius / resolution.x, radius / resolution.y);\n\n        float x1 = mod(t, 1.0);\n        float x2 = mod(t + angle, 1.0);\n\n        if (x1 < x2) {\n            if (a > x1 && a < x2) {\n                float val = (1.0 - (x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (x2 - a));\n                fragColor = mix(backgroundColor, color, val);\n            } else {\n                fragColor = backgroundColor;\n            }\n        } else {\n            if (a < x2) {\n                float val = (1.0 - (x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (x2 - a));\n                fragColor = mix(backgroundColor, color, val);\n            } else if (a > x1) {\n                float val = (1.0 - (1.0 + x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (1.0 + x2 - a));\n                fragColor = mix(backgroundColor, color, val);\n            } else {\n                fragColor = backgroundColor;\n            }\n        }\n\n        float s = smoothstep(inner, inner + smooth + 0.00001, pct) * (1.0 - smoothstep(outer, outer + smooth + 0.00001, pct));\n        gl_FragColor = texture2D(uSampler, fragCoord) * vColor * (1. - s * fragColor.a) + fragColor * s;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class HoleShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._x = 0;\n        this._y = 0;\n        this._w = 0;\n        this._h = 0;\n        this._radius = 0;\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    set x(v) {\n        this._x = v;\n        this.redraw();\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set y(v) {\n        this._y = v;\n        this.redraw();\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    set w(v) {\n        this._w = v;\n        this.redraw();\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    set h(v) {\n        this._h = v;\n        this.redraw();\n    }\n\n    get radius() {\n        return this._radius;\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        const owner = operation.shaderOwner;\n        const renderPrecision = this.ctx.stage.getRenderPrecision()\n\n        this._setUniform(\"x\", this._x * renderPrecision, this.gl.uniform1f);\n        this._setUniform(\"y\", this._y * renderPrecision, this.gl.uniform1f);\n        this._setUniform(\"w\", this._w * renderPrecision, this.gl.uniform1f);\n        this._setUniform(\"h\", this._h * renderPrecision, this.gl.uniform1f);\n        this._setUniform('radius',  (this._radius + .5) * renderPrecision, this.gl.uniform1f);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\n    }\n\n    useDefault() {\n        return (this._x === 0 && this._y === 0 && this._w === 0 && this._h === 0)\n    }\n}\n\nHoleShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n\nHoleShader.fragmentShaderSource = `\n   #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float x;\n    uniform float y;\n    uniform float w;\n    uniform float h;\n    uniform vec2 resolution;\n    uniform float radius;\n\n    float roundBox(vec2 p, vec2 b, float r) {\n        float d = length(max(abs(p)-b+r, 0.1))-r;\n        return smoothstep(1.0, 0.0, d);\n    }\n\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        vec2 pos = vTextureCoord.xy * resolution - vec2(x, y) - vec2(w, h) / 2.0;\n        vec2 size = vec2(w, h) / 2.0;\n        float b = roundBox(pos, size, radius);\n        gl_FragColor = mix(color, vec4(0.0), b) * vColor;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class RadialGradientShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._pivot = [0, 0];\n        this._ic = 0xffffffff;\n        this._normalizedIC = this._getNormalizedColor(this._ic);\n        this._oc = 0x00ffffff;\n        this._normalizedOC = this._getNormalizedColor(this._oc);\n        this._radius = 0;\n    }\n\n    set radiusX(v) {\n        this.radius = v;\n    }\n\n    get radiusX() {\n        return this._radius;\n    }\n\n    set radiusY(v) {\n        this._radiusY = v;\n        this.redraw();\n    }\n\n    get radiusY() {\n        return this._radiusY;\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    set innerColor(argb) {\n        this._ic = argb;\n        this._normalizedIC = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    get innerColor() {\n        return this._ic;\n    }\n\n    set outerColor(argb) {\n        this._oc = argb;\n        this._normalizedOC = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    set color(argb) {\n        this.innerColor = argb;\n    }\n\n    get color() {\n        return this.innerColor;\n    }\n\n    get outerColor() {\n        return this._ic;\n    }\n\n    set x(f) {\n        this._x = f;\n        this.redraw();\n    }\n\n    set y(f) {\n        this._y = f;\n        this.redraw();\n    }\n\n    set pivot(v) {\n        if(Array.isArray(v) && v.length === 2) {\n            this._pivot = v;\n        }\n        else if(Array.isArray(v)) {\n            this._pivot = [v[0], v[1] || v[0]];\n        }\n        else {\n            this._pivot = [v, v];\n        }\n        this.redraw();\n    }\n\n    get pivot() {\n        return this._pivot[0];\n    }\n\n    set pivotY(f) {\n        this._pivot[1] = f;\n        this.redraw();\n    }\n\n    get pivotY() {\n        return this._pivot[1];\n    }\n\n    set pivotX(f) {\n        this._pivot[0] = f;\n        this.redraw();\n    }\n\n    get pivotX() {\n        return this._pivot[0];\n    }\n\n    _getNormalizedColor(color) {\n        const col = StageUtils.getRgbaComponentsNormalized(color);\n        col[0] *= col[3];\n        col[1] *= col[3];\n        col[2] *= col[3];\n        return new Float32Array(col);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n\n        if(this._x) {\n            this._pivot[0] = this._x / owner.w;\n        }\n        if(this._y) {\n            this._pivot[1] = this._y / owner.h;\n        }\n\n        if(this._radius === 0) {\n            this._radius = owner.w * 0.5;\n        }\n\n        this._setUniform('innerColor', this._normalizedIC, this.gl.uniform4fv);\n        this._setUniform('fill', StageUtils.getRgbaComponentsNormalized(this._oc)[3], this.gl.uniform1f);\n        this._setUniform('outerColor', this._normalizedOC, this.gl.uniform4fv);\n        this._setUniform('pivot', new Float32Array(this._pivot),  this.gl.uniform2fv);\n        this._setUniform('resolution', new Float32Array([owner._w, owner._h]),  this.gl.uniform2fv);\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\n        this._setUniform('radius',  this._radius, this.gl.uniform1f);\n        this._setUniform('radiusY',  (this._radiusY || this._radius), this.gl.uniform1f);\n    }\n}\n\nRadialGradientShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    \n    #define PI 3.14159265359\n    \n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec2 pivot;\n    uniform vec4 innerColor;\n    uniform vec4 outerColor;\n    uniform float radius;\n    uniform float radiusY;\n    uniform float alpha;\n    uniform float fill;\n    uniform float aspectRatio;\n    \n    void main() {\n        vec2 point = vTextureCoord.xy * resolution;\n        vec2 projection = vec2(pivot.x * resolution.x, pivot.y * resolution.y);\n        float d = length((point - projection) / vec2(radius * 2.0, radiusY * 2.0));\n        vec4 color = mix(texture2D(uSampler, vTextureCoord) * vColor, outerColor * alpha, fill);\n        gl_FragColor = mix(innerColor * alpha, color, smoothstep(0.0, 1.0, d));\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class Light3dShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._strength = 0.5;\n        this._ambient = 0.5;\n        this._fudge = 0.4;\n\n        this._rx = 0;\n        this._ry = 0;\n\n        this._z = 0;\n        this._pivotX = NaN;\n        this._pivotY = NaN;\n        this._pivotZ = 0;\n\n        this._lightY = 0;\n        this._lightZ = 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        let vr = operation.shaderOwner;\n        let element = vr.element;\n\n        let pivotX = isNaN(this._pivotX) ? element.pivotX * vr.w : this._pivotX;\n        let pivotY = isNaN(this._pivotY) ? element.pivotY * vr.h : this._pivotY;\n        let coords = vr.getRenderTextureCoords(pivotX, pivotY);\n\n        // Counter normal rotation.\n\n        let rz = -Math.atan2(vr._renderContext.tc, vr._renderContext.ta);\n\n        let gl = this.gl;\n        this._setUniform(\"pivot\", new Float32Array([coords[0], coords[1], this._pivotZ]), gl.uniform3fv);\n        this._setUniform(\"rot\", new Float32Array([this._rx, this._ry, rz]), gl.uniform3fv);\n\n        this._setUniform(\"z\", this._z, gl.uniform1f);\n        this._setUniform(\"lightY\", this.lightY, gl.uniform1f);\n        this._setUniform(\"lightZ\", this.lightZ, gl.uniform1f);\n        this._setUniform(\"strength\", this._strength, gl.uniform1f);\n        this._setUniform(\"ambient\", this._ambient, gl.uniform1f);\n        this._setUniform(\"fudge\", this._fudge, gl.uniform1f);\n    }\n\n    set strength(v) {\n        this._strength = v;\n        this.redraw();\n    }\n\n    get strength() {\n        return this._strength;\n    }\n\n    set ambient(v) {\n        this._ambient = v;\n        this.redraw();\n    }\n\n    get ambient() {\n        return this._ambient;\n    }\n\n    set fudge(v) {\n        this._fudge = v;\n        this.redraw();\n    }\n\n    get fudge() {\n        return this._fudge;\n    }\n\n    get rx() {\n        return this._rx;\n    }\n\n    set rx(v) {\n        this._rx = v;\n        this.redraw();\n    }\n\n    get ry() {\n        return this._ry;\n    }\n\n    set ry(v) {\n        this._ry = v;\n        this.redraw();\n    }\n\n    get z() {\n        return this._z;\n    }\n\n    set z(v) {\n        this._z = v;\n        this.redraw();\n    }\n\n    get pivotX() {\n        return this._pivotX;\n    }\n\n    set pivotX(v) {\n        this._pivotX = v + 1;\n        this.redraw();\n    }\n\n    get pivotY() {\n        return this._pivotY;\n    }\n\n    set pivotY(v) {\n        this._pivotY = v + 1;\n        this.redraw();\n    }\n\n    get lightY() {\n        return this._lightY;\n    }\n\n    set lightY(v) {\n        this._lightY = v;\n        this.redraw();\n    }\n\n    get pivotZ() {\n        return this._pivotZ;\n    }\n\n    set pivotZ(v) {\n        this._pivotZ = v;\n        this.redraw();\n    }\n\n    get lightZ() {\n        return this._lightZ;\n    }\n\n    set lightZ(v) {\n        this._lightZ = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return (this._rx === 0 && this._ry === 0 && this._z === 0 && this._strength === 0 && this._ambient === 1);\n    }\n\n}\n\nLight3dShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    uniform float fudge;\n    uniform float strength;\n    uniform float ambient;\n    uniform float z;\n    uniform float lightY;\n    uniform float lightZ;\n    uniform vec3 pivot;\n    uniform vec3 rot;\n    varying vec3 pos;\n\n    void main(void) {\n        pos = vec3(aVertexPosition.xy, z);\n        \n        pos -= pivot;\n        \n        // Undo XY rotation\n        mat2 iRotXy = mat2( cos(rot.z), sin(rot.z), \n                           -sin(rot.z), cos(rot.z));\n        pos.xy = iRotXy * pos.xy;\n        \n        // Perform 3d rotations\n        gl_Position.x = cos(rot.x) * pos.x - sin(rot.x) * pos.z;\n        gl_Position.y = pos.y;\n        gl_Position.z = sin(rot.x) * pos.x + cos(rot.x) * pos.z;\n        \n        pos.x = gl_Position.x;\n        pos.y = cos(rot.y) * gl_Position.y - sin(rot.y) * gl_Position.z;\n        pos.z = sin(rot.y) * gl_Position.y + cos(rot.y) * gl_Position.z;\n        \n        // Redo XY rotation\n        iRotXy[0][1] = -iRotXy[0][1];\n        iRotXy[1][0] = -iRotXy[1][0];\n        pos.xy = iRotXy * pos.xy; \n\n        // Undo translate to pivot position\n        pos.xyz += pivot;\n\n        pos = vec3(pos.x * projection.x - 1.0, pos.y * -abs(projection.y) + 1.0, pos.z * projection.x);\n        \n        // Set depth perspective\n        float perspective = 1.0 + fudge * pos.z;\n\n        pos.z += lightZ * projection.x;\n\n        // Map coords to gl coordinate space.\n        // Set z to 0 because we don't want to perform z-clipping\n        gl_Position = vec4(pos.xy, 0.0, perspective);\n\n        // Correct light source position.\n        pos.y += lightY * abs(projection.y);\n\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        \n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nLight3dShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec3 pos;\n    uniform sampler2D uSampler;\n    uniform float ambient;\n    uniform float strength;\n    void main(void){\n        vec4 rgba = texture2D(uSampler, vTextureCoord);\n        float d = length(pos);\n        float n = 1.0 / max(0.1, d);\n        rgba.rgb = rgba.rgb * (strength * n + ambient);\n        gl_FragColor = rgba * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class PerspectiveShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._fudge = 0.2;\n        this._rx = 0;\n        this._ry = 0;\n        this._z = 1.0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        const vr = operation.shaderOwner;\n        const element = vr.element;\n\n        const pivotX = element.pivotX * vr.w;\n        const pivotY = element.pivotY * vr.h;\n        const coords = vr.getRenderTextureCoords(pivotX, pivotY);\n\n        // Counter normal rotation.\n        const rz = -Math.atan2(vr._renderContext.tc, vr._renderContext.ta);\n\n        const gl = this.gl;\n        this._setUniform(\"pivot\", new Float32Array([coords[0], coords[1], 0]), gl.uniform3fv);\n        this._setUniform(\"rot\", new Float32Array([this._rx, this._ry, rz]), gl.uniform3fv);\n        this._setUniform(\"z\", this._z, gl.uniform1f);\n        this._setUniform(\"fudge\", this._fudge, gl.uniform1f);\n    }\n\n    set fudge(v) {\n        this._fudge = v;\n        this.redraw();\n    }\n\n    get fudge() {\n        return this._fudge;\n    }\n\n    get rx() {\n        return this._rx;\n    }\n\n    set rx(v) {\n        this._rx = v;\n        this.redraw();\n    }\n\n    get ry() {\n        return this._ry;\n    }\n\n    set ry(v) {\n        this._ry = v;\n        this.redraw();\n    }\n\n    get z() {\n        return this._z;\n    }\n\n    set z(v) {\n        this._z = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return (this._rx === 0 && this._ry === 0 && this._z === 0);\n    }\n\n}\n\nPerspectiveShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    uniform float z;\n    uniform vec3 pivot;\n    uniform vec3 rot;\n    varying vec3 pos;\n\n    void main(void) {\n        pos = vec3(aVertexPosition.xy, z);\n        \n        pos -= pivot;\n        \n        // Undo XY rotation\n        mat2 iRotXy = mat2( cos(rot.z), sin(rot.z), \n                           -sin(rot.z), cos(rot.z));\n        pos.xy = iRotXy * pos.xy;\n        \n        // Perform 3d rotations\n        gl_Position.x = cos(rot.x) * pos.x - sin(rot.x) * pos.z;\n        gl_Position.y = pos.y;\n        gl_Position.z = sin(rot.x) * pos.x + cos(rot.x) * pos.z;\n        \n        pos.x = gl_Position.x;\n        pos.y = cos(rot.y) * gl_Position.y - sin(rot.y) * gl_Position.z;\n        pos.z = sin(rot.y) * gl_Position.y + cos(rot.y) * gl_Position.z;\n        \n        // Redo XY rotation\n        iRotXy[0][1] = -iRotXy[0][1];\n        iRotXy[1][0] = -iRotXy[1][0];\n        pos.xy = iRotXy * pos.xy; \n\n        // Undo translate to pivot position\n        pos.xyz += pivot;\n\n        pos = vec3(pos.x * projection.x - 1.0, pos.y * -abs(projection.y) + 1.0, pos.z * projection.x);\n        \n        // Map coords to gl coordinate space.\n        // Set z to 0 because we don't want to perform z-clipping\n        gl_Position = vec4(pos.xy, 0.0, z);\n\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        \n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nPerspectiveShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n\n    uniform vec3 rot;\n    uniform float fudge;\n\n    void main(void) {\n        vec2 coords = vTextureCoord;\n\n        coords.xy -= vec2(0.5);\n        coords.y = coords.y + (sign(rot[0]) * 0.5 - coords.x) * sin(rot[0]) * fudge * coords.y;\n        coords.x = coords.x + (sign(rot[1]) * 0.5 - coords.y) * sin(rot[1]) * fudge * coords.x;\n        coords.xy += vec2(0.5);\n\n        if (coords.x < 0.0 || coords.x > 1.0 || coords.y < 0.0 || coords.y > 1.0) {\n            gl_FragColor = vec4(0.0);\n        } else {\n            gl_FragColor = texture2D(uSampler, coords) * vColor;\n        }\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class MagnifierShader extends DefaultShader {\n\tconstructor(context) {\n\t  super(context);\n\t  this._x = 0;\n\t  this._y = 0;\n\t  this._w = 0;\n\t  this._h = 0;\n\t  this._radius = 0;\n\t  this._magnification = 0.6;\n\t}\n  \n\tget x() {\n\t  return this._x;\n\t}\n  \n\tset x(v) {\n\t  this._x = v;\n\t  this.redraw();\n\t}\n  \n\tget y() {\n\t  return this._y;\n\t}\n  \n\tset y(v) {\n\t  this._y = v;\n\t  this.redraw();\n\t}\n  \n\tget w() {\n\t  return this._w;\n\t}\n  \n\tset w(v) {\n\t  this._w = v;\n\t  this.redraw();\n\t}\n  \n\tget h() {\n\t  return this._h;\n\t}\n  \n\tset h(v) {\n\t  this._h = v;\n\t  this.redraw();\n\t}\n  \n\tget magnification() {\n\t  return this._magnification;\n\t}\n  \n\tset magnification(v) {\n\t  this._magnification = v;\n\t  this.redraw();\n\t}\n  \n\tget radius() {\n\t  return this._radius;\n\t}\n  \n\tset radius(v) {\n\t  this._radius = v;\n\t  this.redraw();\n\t}\n  \n\tsetupUniforms(operation) {\n\t  super.setupUniforms(operation);\n  \n\t  const owner = operation.shaderOwner;\n\t  const renderPrecision = this.ctx.stage.getRenderPrecision();\n\t  this._setUniform('x', this._x * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('y', this._y * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('w', this._w * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('h', this._h * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('magnification', this._magnification, this.gl.uniform1f);\n\t  this._setUniform(\n\t\t'radius',\n\t\t(this._radius + 0.5) * renderPrecision,\n\t\tthis.gl.uniform1f\n\t  );\n\t  this._setUniform(\n\t\t'resolution',\n\t\tnew Float32Array([\n\t\t  owner._w * renderPrecision,\n\t\t  owner._h * renderPrecision\n\t\t]),\n\t\tthis.gl.uniform2fv\n\t  );\n\t}\n \n\tuseDefault() {\n\t  return this._w === 0 && this._h === 0;\n\t}\n  }\n  \n  MagnifierShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n  \n  MagnifierShader.fragmentShaderSource = `\n\t  #ifdef GL_ES\n\t\t# ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\tprecision highp float;\n\t\t# else\n\t\tprecision lowp float;\n\t\t# endif\n\t  #endif\n\n\t  varying vec2 vTextureCoord;\n\t  varying vec4 vColor;\n\t  uniform sampler2D uSampler;\n\t  uniform float x;\n\t  uniform float y;\n\t  uniform float w;\n\t  uniform float h;\n\t  uniform vec2 resolution;\n\t  uniform float radius;\n\t  uniform float magnification;\n  \n\t  float roundBox(vec2 p, vec2 b, float r) {\n\t\t  float d = length(max(abs(p)-b+r, 0.1))-r;\n\t\t  return smoothstep(1.0, 0.0, d);\n\t  }\n\n\t  float inside(vec2 v) {\n\t\tvec2 s = step(vec2(0.0, 0.0), v) - step(vec2(1.0, 1.0), v);\n\t\treturn s.x * s.y;   \n      }\n  \n\t  void main(void) {\n\t\tvec4 color = texture2D(uSampler, vTextureCoord);\n\t\tvec2 pos = vTextureCoord.xy * resolution - vec2(x, y) - vec2(w, h) / 2.0;\n\t\tvec2 size = vec2(w, h) / 2.0;\n\t\tfloat b = roundBox(pos, size, radius);\n\t\tvec2 pos2 = (vTextureCoord.xy * magnification * resolution + vec2(x, y) * magnification) / resolution;\n\t\tgl_FragColor = mix(color, texture2D(uSampler, pos2) * inside(pos2), b) * vColor;\n\t  }\n  `;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class SpinnerShader2 extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._period = 1;\n        this._stroke = 0;\n        this._showDot = true;\n        this._clockwise = true;\n        this._bc = 0xff000000;\n        this._normalizedBC = this._getNormalizedColor(this._bc);\n        this._c = 0xffffffff;\n        this._normalizedC = this._getNormalizedColor(this._c);\n    }\n\n    set radius(v) {\n        if(v === 0) {\n            v = 1;\n        }\n        this._radius = v;\n    }\n\n    set stroke(value) {\n        this._stroke = Math.abs(value);\n    }\n\n    get stroke() {\n        return this._stroke;\n    }\n\n    set color(argb) {\n        this._c = argb;\n        this._normalizedC = this._getNormalizedColor(argb);\n    }\n\n    get color() {\n        return this._c;\n    }\n\n    set backgroundColor(argb) {\n        this._bc = argb;\n        this._normalizedBC = this._getNormalizedColor(argb);\n    }\n\n    get backgroundColor() {\n        return this._sc;\n    }\n\n    set showDot(bool) {\n        this._showDot = bool;\n    }\n\n    get showDot() {\n        return this._showDot;\n    }\n\n    set clockwise(bool) {\n        this._clockwise = bool;\n    }\n\n    get clockwise() {\n        return this._clockwise;\n    }\n\n    set period(v) {\n        this._period = v;\n    }\n\n    get period() {\n        return this._period;\n    }\n\n    _getNormalizedColor(color) {\n        const col = StageUtils.getRgbaComponentsNormalized(color);\n        col[0] *= col[3];\n        col[1] *= col[3];\n        col[2] *= col[3];\n        return new Float32Array(col);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n        const radius = this._radius || (owner._w / 2);\n\n        if(this._stroke === 0) {\n            this._stroke = radius * 0.33;\n        }\n\n        this._setUniform('resolution', new Float32Array([owner._w, owner._h]),  this.gl.uniform2fv);\n        this._setUniform('color', this._normalizedC, this.gl.uniform4fv);\n        this._setUniform('backgroundColor', this._normalizedBC, this.gl.uniform4fv);\n        this._setUniform('stroke',  this._stroke, this.gl.uniform1f);\n        this._setUniform('radius',  radius, this.gl.uniform1f);\n        this._setUniform('direction',  this._clockwise ? -1 : 1, this.gl.uniform1f);\n        this._setUniform('showDot', !!this._showDot, this.gl.uniform1f);\n        this._setUniform('time', Date.now() - SpinnerShader2.spinSync, this.gl.uniform1f);\n        this._setUniform('period', this._period, this.gl.uniform1f);\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\n\n        if(this._sc !== this._bc || this._stroke !== radius * 0.5) {\n            this.redraw();\n        }\n    }\n}\n\nSpinnerShader2.spinSync = Date.now();\n\nSpinnerShader2.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    \n    #define PI 3.14159265359\n    \n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    \n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec4 color;\n    uniform vec4 backgroundColor;\n    uniform float direction;\n    uniform float radius;\n    uniform float time;\n    uniform float stroke;\n    uniform float showDot;\n    uniform float period;\n    uniform float alpha;\n    \n    float circleDist(vec2 p, float radius){\n        return length(p) - radius;\n    }\n    \n    float fillMask(float dist){\n        return clamp(-dist, 0.0, 1.0);\n    }\n    \n    void main() {\n        vec2 halfRes = 0.5 * resolution.xy;\n        vec2 center = vTextureCoord.xy * resolution - halfRes;\n        \n        float c = max(-circleDist(center, radius - stroke), circleDist(center, radius));\n        float rot = -(time / 1000.0 / period) * 6.0 * direction;\n        center *= mat2(cos(rot), sin(rot), -sin(rot), cos(rot));\n        \n        float a = direction * atan(center.x, center.y) * PI * 0.05 + 0.45;\n        \n        float strokeRad = stroke * 0.5;\n        a = mix(a, max(a, fillMask(circleDist(vec2(center.x, center.y + (radius - strokeRad)), strokeRad))), showDot);\n        vec4 base = mix(vec4(0.0), backgroundColor * alpha, fillMask(c));\n        gl_FragColor = mix(base, color * alpha, fillMask(c) * a);\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Application from \"./application/Application.mjs\";\nimport Component from \"./application/Component.mjs\";\nimport Base from \"./tree/Base.mjs\";\nimport Utils from \"./tree/Utils.mjs\";\nimport StageUtils from \"./tree/StageUtils.mjs\";\nimport Element from \"./tree/Element.mjs\";\nimport ElementCore from \"./tree/core/ElementCore.mjs\";\nimport ElementTexturizer from \"./tree/core/ElementTexturizer.mjs\";\nimport Texture from \"./tree/Texture.mjs\";\n\nimport Tools from \"./tools/Tools.mjs\";\nimport ObjMerger from \"./tools/ObjMerger.mjs\";\nimport ObjectListProxy from \"./tools/ObjectListProxy.mjs\";\nimport ObjectListWrapper from \"./tools/ObjectListWrapper.mjs\";\n\nimport RectangleTexture from \"./textures/RectangleTexture.mjs\";\nimport NoiseTexture from \"./textures/NoiseTexture.mjs\";\nimport TextTexture from \"./textures/TextTexture.mjs\";\nimport ImageTexture from \"./textures/ImageTexture.mjs\";\nimport HtmlTexture from \"./textures/HtmlTexture.mjs\";\nimport StaticTexture from \"./textures/StaticTexture.mjs\";\nimport StaticCanvasTexture from \"./textures/StaticCanvasTexture.mjs\";\nimport SourceTexture from \"./textures/SourceTexture.mjs\";\n\nimport ListComponent from \"./components/ListComponent.mjs\";\nimport FastBlurComponent from \"./components/FastBlurComponent.mjs\";\nimport BloomComponent from \"./components/BloomComponent.mjs\";\nimport SmoothScaleComponent from \"./components/SmoothScaleComponent.mjs\";\nimport BorderComponent from \"./components/BorderComponent.mjs\";\nimport EventEmitter from \"./EventEmitter.mjs\";\n\nimport WebGLShader from \"./renderer/webgl/WebGLShader.mjs\";\nimport WebGLDefaultShader from \"./renderer/webgl/shaders/DefaultShader.mjs\";\nimport { WebGLGrayscaleShader } from \"./renderer/common/shaders/GrayscaleShader.mjs\";\nimport BoxBlurShader from \"./renderer/webgl/shaders/BoxBlurShader.mjs\";\nimport DitheringShader from \"./renderer/webgl/shaders/DitheringShader.mjs\";\nimport CircularPushShader from \"./renderer/webgl/shaders/CircularPushShader.mjs\";\nimport InversionShader from \"./renderer/webgl/shaders/InversionShader.mjs\";\nimport LinearBlurShader from \"./renderer/webgl/shaders/LinearBlurShader.mjs\";\nimport OutlineShader from \"./renderer/webgl/shaders/OutlineShader.mjs\";\nimport PixelateShader from \"./renderer/webgl/shaders/PixelateShader.mjs\";\nimport RadialFilterShader from \"./renderer/webgl/shaders/RadialFilterShader.mjs\";\nimport RoundedRectangleShader from \"./renderer/webgl/shaders/RoundedRectangleShader.mjs\";\nimport FadeOutShader from \"./renderer/webgl/shaders/FadeOutShader.mjs\";\nimport VignetteShader from \"./renderer/webgl/shaders/VignetteShader.mjs\";\nimport SpinnerShader from \"./renderer/webgl/shaders/SpinnerShader.mjs\";\nimport HoleShader from \"./renderer/webgl/shaders/HoleShader.mjs\";\nimport RadialGradientShader from \"./renderer/webgl/shaders/RadialGradientShader.mjs\";\nimport Light3dShader from \"./renderer/webgl/shaders/Light3dShader.mjs\";\nimport PerspectiveShader from \"./renderer/webgl/shaders/PerspectiveShader.mjs\";\nimport MagnifierShader from \"./renderer/webgl/shaders/MagnifierShader.mjs\";\n\nimport C2dShader from \"./renderer/c2d/C2dShader.mjs\";\nimport C2dDefaultShader from \"./renderer/c2d/shaders/DefaultShader.mjs\";\nimport { C2dGrayscaleShader } from \"./renderer/common/shaders/GrayscaleShader.mjs\";\nimport C2dBlurShader from \"./renderer/c2d/shaders/BlurShader.mjs\";\n\nimport Stage from \"./tree/Stage.mjs\";\nimport SpinnerShader2 from './renderer/webgl/shaders/SpinnerShader2.mjs';\n\nconst lightning = {\n    Application,\n    Component,\n    Base,\n    Utils,\n    StageUtils,\n    Element,\n    Tools,\n    Stage,\n    ElementCore,\n    ElementTexturizer,\n    Texture,\n    EventEmitter,\n    shaders: {\n        Grayscale: WebGLGrayscaleShader,\n        BoxBlur: BoxBlurShader,\n        Dithering: DitheringShader,\n        CircularPush: CircularPushShader,\n        Inversion: InversionShader,\n        LinearBlur: LinearBlurShader,\n        Outline: OutlineShader,\n        Pixelate: PixelateShader,\n        RadialFilter: RadialFilterShader,\n        RoundedRectangle: RoundedRectangleShader,\n        Spinner2: SpinnerShader2,\n        FadeOut: FadeOutShader,\n        Hole: HoleShader,\n        Vignette: VignetteShader,\n        Spinner: SpinnerShader,\n        RadialGradient: RadialGradientShader,\n        Light3d: Light3dShader,\n        Perspective: PerspectiveShader,\n        Magnifier: MagnifierShader,\n        WebGLShader,\n        WebGLDefaultShader,\n        C2dShader,\n        C2dDefaultShader,\n        c2d: {\n            Grayscale: C2dGrayscaleShader,\n            Blur: C2dBlurShader\n        }\n    },\n    textures: {\n        RectangleTexture,\n        NoiseTexture,\n        TextTexture,\n        ImageTexture,\n        HtmlTexture,\n        StaticTexture,\n        StaticCanvasTexture,\n        SourceTexture\n    },\n    components: {\n        FastBlurComponent,\n        BloomComponent,\n        SmoothScaleComponent,\n        BorderComponent,\n        ListComponent\n    },\n    tools: {\n        ObjMerger,\n        ObjectListProxy,\n        ObjectListWrapper\n    }\n};\n\nif (Utils.isWeb) {\n    window.lng = lightning;\n}\n\nexport default lightning;\n"],"names":["StageUtils","_classCallCheck","_createClass","key","value","mergeNumbers","v1","v2","p","rgb","r","g","b","rgba","a","getRgbString","color","getRgbaString","toFixed","getRgbaStringFromArray","Math","floor","getRgbaComponentsNormalized","argb","getRgbComponentsNormalized","getRgbaComponents","getArgbNumber","max","min","v","mergeColors","c1","c2","r1","g1","b1","a1","r2","g2","b2","a2","round","mergeMultiColors","c","t","n","length","i","mergeMultiColorsEqual","mergeColorAlpha","alpha","rad","deg","PI","getTimingBezier","d","xc","xb","xa","yc","yb","ya","time","cbx","cbxd","dx","it","minT","maxT","getTimingFunction","str","s","indexOf","parts","substr","split","console","warn","parseFloat","isNaN","Utils","isFunction","isNumber","isInteger","isBoolean","isString","clone","isObjectLiteral","Array","isArray","getDeepClone","cloneObjShallow","obj","keys","Object","merge","obj1","obj2","isObject","type","isPlainObject","constructor","getArrayIndex","index","arr","getModuloIndex","len","ceil","equalValues","equalObjectLiterals","equalArrays","keys1","keys2","k1","k2","setToArray","result","forEach","push","iteratorToArray","iterator","iteratorResult","next","done","isUcChar","charcode","isWeb","window","sparkscene","isWPE","navigator","userAgent","isSpark","isNode","isPS4","isZiggo","Base","defaultSetter","name","patchObject","settings","error","names","patchObjectProperty","setter","setSetting","charAt","__local","local","func","SpacingCalculator","getSpacing","mode","numberOfItems","remainingSpace","itemGaps","spacePerGap","spacingBefore","spacingBetween","Error","ContentAligner","layout","_layout","_totalCrossAxisSize","get","_lines","init","_getTotalCrossAxisSize","align","crossAxisSize","_this$_getSpacing","_getSpacing","lines","_flexContainer","alignContent","growSize","currentPos","crossAxisLayoutOffset","aligner","createItemAligner","finalCrossAxisLayoutSize","crossAxisLayoutSize","setCrossAxisLayoutSize","setCrossAxisLayoutOffset","recursiveResizeOccured","setItemPositions","total","line","FlexUtils","getParentAxisSizeWithPadding","item","horizontal","target","parent","getParent","flexParent","getAxisLayoutSize","getTotalPadding","w","h","getRelAxisSize","funcW","_allowRelAxisSizeFunction","originalWidth","funcH","originalHeight","_flex","isAxisFitToContents","isZeroAxisSize","getAxisLayoutPos","x","y","setAxisLayoutPos","pos","setAxisLayoutSize","size","getAxisMinSize","minSize","getPlainAxisMinSize","flexItemMinSize","isFlexItemEnabled","_flexItem","_getMinSizeSetting","hasLimitedMinSize","isFlexEnabled","isShrinkable","flexItem","shrink","resizeAxis","isMainAxis","_horizontal","resizeMainAxis","resizeCrossAxis","getPaddingOffset","flex","paddingLeft","paddingTop","paddingRight","paddingBottom","getMarginOffset","marginLeft","marginTop","getTotalMargin","marginRight","marginBottom","SizeShrinker","_line","_amountRemaining","_shrunkSize","amount","totalShrinkAmount","_getTotalShrinkAmount","items","amountPerShrink","startIndex","endIndex","shrinkAmount","isShrinkableItem","_getMainAxisMinSize","_getMainAxisLayoutSize","maxShrink","isFullyShrunk","finalSize","_resizeMainAxis","abs","getShrunkSize","SizeGrower","_grownSize","grow","totalGrowAmount","_getTotalGrowAmount","amountPerGrow","growAmount","isGrowableItem","maxSize","_getMainAxisMaxSizeSetting","maxGrow","isFullyGrown","getGrownSize","ItemPositioner","lineLayout","position","_setMainAxisLayoutPos","_getMainAxisLayoutSizeWithPaddingAndMargin","_availableSpace","justifyContent","ItemAligner","_crossAxisLayoutSize","_crossAxisLayoutOffset","_alignItemsSetting","_recursiveResizeOccured","_isCrossAxisFitToContents","offset","alignItems","_alignItem","alignSelf","_preventStretch","_hasRelCrossAxisSize","_resetCrossAxisLayoutSize","_alignItemFlexStart","_alignItemFlexEnd","_alignItemFlexCenter","_alignItemStretch","_setCrossAxisLayoutPos","itemCrossAxisSize","_getCrossAxisLayoutSizeWithPaddingAndMargin","center","mainAxisLayoutSizeBeforeResize","_getCrossAxisMargin","_getCrossAxisPadding","crossAxisMinSizeSetting","_getCrossAxisMinSizeSetting","crossAxisMaxSizeSetting","_getCrossAxisMaxSizeSetting","crossAxisMaxSizeSettingEnabled","_resizeCrossAxis","mainAxisLayoutSizeAfterResize","recursiveResize","hasFixedCrossAxisSize","_hasFixedCrossAxisSize","forceStretch","LineLayout","availableSpace","performLayout","_setItemSizes","_calcLayoutInfo","_growItemSizes","_shrinkItemSizes","grower","shrinker","positioner","_calcCrossAxisMaxLayoutSize","getMainAxisMinSize","mainAxisMinSize","_getMainAxisMinSizeWithPaddingAndMargin","noSpecifiedCrossAxisSize","isCrossAxisFitToContents","resizingCrossAxis","shouldFitToContents","isWrapping","_crossAxisMaxLayoutSize","_getCrossAxisMaxLayoutSize","crossAxisMaxSize","LineLayouter","_mainAxisMinSize","_crossAxisMinSize","_mainAxisContentSize","_getCrossAxisMinSize","layoutLines","_setup","wrap","_layoutFlexItem","itemMainAxisSize","isOverflowing","_curMainAxisPos","_mainAxisSize","_layoutLine","_addToMainAxisPos","flexLayout","updateTreeLayout","_resetLayoutSize","mainAxisSize","_maxMainAxisPos","_getAvailableMainAxisLayoutSpace","resizingMainAxis","isMainAxisFitToContents","crossAxisMinSize","itemCrossAxisMinSize","_getCrossAxisMinSizeWithPaddingAndMargin","ItemCoordinatesUpdater","_isReverse","_reverse","_horizontalPaddingOffset","_getHorizontalPaddingOffset","_verticalPaddingOffset","_getVerticalPaddingOffset","finalize","parentFlex","getParentFlexContainer","updater","_finalizeItemAndChildren","_finalizeRoot","_finalizeItems","_getHorizontalPadding","_getVerticalPadding","clearRecalcFlag","setLayout","validCache","_validateItemCache","_finalizeItem","_finalizeItemChildren","recalc","dimensionsMatchPreviousResult","performResizeMainAxis","performResizeCrossAxis","_reverseMainAxisLayoutPos","_getHorizontalMarginOffset","_getVerticalMarginOffset","endPos","_getMainAxisLayoutPos","reversedPos","FlexLayout","flexContainer","_lineLayouter","_resizingMainAxis","_resizingCrossAxis","_cachedMainAxisSizeAfterLayout","_cachedCrossAxisSizeAfterLayout","_shrunk","layoutTree","isSubTree","_updateSubTreeLayout","updateItemCoords","_performUpdateLayoutTree","_performUpdateLayoutTreeFromCache","_setInitialAxisSizes","_layoutAxes","_refreshLayoutCache","sizeMightHaveChanged","enableLocalRecalcFlag","_layoutMainAxis","_getMainAxisBasis","_getCrossAxisBasis","_layoutCrossAxis","_layoutLines","_fitMainAxisSizeToContents","mainAxisContentSize","totalCrossAxisSize","_fitCrossAxisSizeToContents","_hasFixedMainAxisBasis","_hasFixedCrossAxisBasis","_checkValidCacheMainAxisResize","isFinalMainAxisSize","targetMainAxisSize","canIgnoreCacheMiss","isShrinking","ctr","set","FlexContainer","_item","Layout","_wrap","_alignItems","_justifyContent","_alignContent","_paddingLeft","_paddingTop","_paddingRight","_paddingBottom","_changedDimensions","changedDimensions","_changedContents","changedContents","f","direction","ALIGN_ITEMS","join","ALIGN_CONTENT","JUSTIFY_CONTENT","patch","FlexItem","_ctr","_grow","_shrink","SHRINK_AUTO","_alignSelf","undefined","_minWidth","_minHeight","_maxWidth","_maxHeight","_marginLeft","_marginTop","_marginRight","_marginBottom","parseInt","_changed","_getDefaultShrink","_resetHorizontalAxisLayoutSize","_resetVerticalAxisLayoutSize","_getMaxSizeSetting","_getCrossAxisLayoutSize","_getMainAxisPadding","_getMainAxisMargin","FlexTarget","_target","_recalc","_enabled","_originalX","_originalY","_originalWidth","_originalHeight","_flexItemDisabled","_items","layoutFlexTree","isChanged","_disableFlex","_enableFlex","_ensureFlexItem","_checkEnabled","_clearFlexItemsCache","_enableChildrenAsFlexItems","_disableChildrenAsFlexItems","children","_children","child","_enableFlexItem","_disableFlexItem","_parent","_resetOffsets","enabled","isEnabled","_enable","_disable","_setupTargetForFlex","enableFlexLayout","_restoreTargetToNonFlex","disableFlexLayout","setDimensions","_x","_y","_w","_h","setParent","from","to","isFlexContainer","_changedChildren","setVisible","_getFlexItems","visible","isFlexItem","originalX","originalY","funcX","funcY","changeWidth","arguments","changeHeight","_updateRecalc","forceLayout","changeExternalWidth","changeExternalHeight","newRecalcFlags","getNewRecalcFlags","_updateRecalcBottomUp","triggerLayout","flags","childRecalc","newRecalc","_getRecalcFromChangedChildRecalc","mainAxisRecalcFlag","crossAxisRecalcFlag","crossAxisDimensionsChangedInChild","mainAxisDimensionsChangedInChild","mainAxisIsWrapping","crossAxisIsFitToContents","isWidthDynamic","isHeightDynamic","shrunk","localRecalc","combinedRecalc","setOriginalXWithoutUpdatingLayout","setOriginalYWithoutUpdatingLayout","TextureSource","manager","loader","id","stage","textures","Set","_activeTextureCount","lookupId","_cancelCb","loadingSince","_nativeTexture","permanent","renderInfo","_isResultTexture","_loadError","_imageRef","_hasAlpha","addTexture","has","add","removeTexture","delete","incActiveTextureCount","becomesUsed","decActiveTextureCount","becomesUnused","forEachEnabledElement","cb","_this","texture","_newArrowCheck","elements","bind","hasEnabledElements","forEachActiveElement","_this2","_this3","element","active","getRenderWidth","getRenderHeight","allowCleanup","isUsed","load","cancel","isLoading","isLoaded","isError","reload","free","_this4","forceSync","isResultTexture","Date","getTime","err","options","destroyed","onError","source","isUpdatingFrame","throttle","textureThrottler","genericCancelCb","processLoadedSource","setSource","hasAlpha","width","height","imageRef","flipTextureY","_flipTextureY","_isNativeTexture","hasOwnProperty","uploadTextureSource","onLoad","_this5","forceRenderUpdate","update","frameCounter","forceUpdateRenderCoords","_updateTextureCoords","clearNativeTexture","replaceNativeTexture","newNativeTexture","_this6","prevNativeTexture","onTextureSourceLoaded","_setDisplayedTexture","_updateDimensions","e","_this7","onTextureSourceLoadError","freeTextureSource","WebGLTexture","prototype","isTextureSource","ElementTexturizer","elementCore","_element","_core","ctx","lazy","_colorize","_renderTexture","_renderTextureReused","_resultTextureSource","_renderOffscreen","empty","updateRenderToTextureEnabled","setHasRenderUpdates","_setRecalc","_getTextureSource","textureManager","updateResultTexture","hasResultTexture","resultTextureInUse","resultTexture","getResultTexture","nativeTexture","core","mustRenderToTexture","_hasRenderUpdates","deactivate","release","releaseRenderTexture","reuseTextureAsRenderTexture","hasRenderTexture","getRenderTexture","allocateRenderTexture","ElementCore","_onUpdate","_pRecalc","_worldContext","ElementCoreContext","_hasUpdates","_localAlpha","_onAfterCalcs","_onAfterUpdate","_localPx","_localPy","_localTa","_localTb","_localTc","_localTd","_isComplex","_dimsUnknown","_clipping","_zSort","_outOfBounds","_displayedTextureSource","_zContextUsage","_zIndexedChildren","_renderContext","renderState","_scissor","_shaderOwner","_updateTreeOrder","_colorUl","_colorUr","_colorBl","_colorBr","_optFlags","_funcX","_funcY","_funcW","_funcH","_scaleX","_scaleY","_pivotX","_pivotY","_mountX","_mountY","_rotation","_alpha","_visible","_ulx","_uly","_brx","_bry","_zIndex","_forceZIndexContext","_zParent","_isRoot","_zIndexResort","_shader","_renderToTextureEnabled","_texturizer","_useRenderToTexture","_boundsMargin","_recBoundsMargin","_withinBoundsMargin","_viewport","_clipbox","render","_renderSimple","hasFlexLayout","_disableFuncX","_updateLocalTranslateDelta","_triggerRecalcTranslate","_disableFuncY","disableFuncW","disableFuncH","_updateLocalTransform","scaleX","_updateLocalTranslate","prev","_updateLocalAlpha","_updateEnabledFlag","_sr","sin","_cr","cos","_setLocalTransform","_recalcLocalTranslate","pivotXMul","pivotYMul","px","py","dy","_addLocalTranslate","_setLocalAlpha","_setHasUpdates","prevIsZContext","isZContext","prevParent","setZParent","findZContext","disableZContext","enableZContext","enableZSort","newShaderOwner","_setShaderOwnerRecursive","force","forceZSort","addChildAt","splice","setChildAt","removeChildAt","removeChildren","syncChildren","removed","added","order","moveChild","fromIndex","toIndex","isEstimate","setTextureCoords","ulx","uly","brx","bry","setDisplayedTextureSource","textureSource","setAsRoot","root","coordsWidth","coordsHeight","isAncestorOf","newZParent","decZContextUsage","hadZContextUsage","incZContextUsage","zIndex","prevZContext","results","_getZIndexedDescs","_getZIndexedDescsRec","sortZIndexedChildren","slice","prevShader","shader","defaultShader","_setShaderOwnerChildrenRecursive","_hasRenderContext","texturizer","_enableRenderToTexture","_disableRenderToTexture","_renderAdvanced","isWhite","hasSimpleTexCoords","_stashTexCoords","_stashedTexCoords","_unstashTexCoords","_stashColors","_stashedColors","_unstashColors","isVisible","_applyRelativeDimFuncs","pw","ta","td","tb","tc","pr","updateTreeOrder","useRenderToTexture","bboxW","bboxH","sx","sy","ex","ey","rComplex","nx","ny","isSquare","area","lx","ly","_disableWithinBoundsMargin","withinMargin","renderOffscreen","_enableWithinBoundsMargin","isIdentity","IDENTITY","updateOutOfBounds","changedDims","onDimensionsChanged","setShader","activeShader","setScissor","addQuad","hasRenderUpdates","mustRenderChildren","renderTextureInfo","prevRenderTextureInfo","renderToTextureCount","cleared","ignore","cache","isCachingTexturizer","setRenderTextureInfo","finishedRenderTexture","renderTextureReused","setTexturizer","colorize","ptr","m","j","sort","mergeResult","getCornerPoints","getRenderTextureCoords","relX","relY","getAbsoluteCoords","collectAtCoord","inBound","inScissor","tx","ty","sc","_ensureLayout","EventEmitter","_hasEventListeners","on","listener","_eventFunction","_eventListeners","current","combiner","once","wrapper","arg1","arg2","arg3","off","__originalFunc","listeners","_iterator","_createForOfIteratorHelper","_step","l","map","removeListener","emit","listenerCount","removeAllListeners","object","_i","_arr","_toConsumableArray","addAsMixin","cls","Shader","coreContext","_initialized","_elements","addElement","removeElement","cleanup","redraw","useDefault","addEmpty","create","renderer","createShader","isShader","isValidShaderType","getWebGL","getC2d","Texture","_activeCount","_source","_resizeMode","_precision","mw","mh","clipping","_mustUpdate","hasUpdateSourceTexture","_performUpdateSource","removeUpdateSourceTexture","incActiveCount","decActiveCount","_checkForNewerReusableTextureSource","_applyResizeMode","reusable","_getReusableTextureSource","_replaceTextureSource","_getLookupId","_getSourceLoader","_getIsValid","_updateSource","addUpdateSourceTexture","getTextureSource","getReusableTextureSource","newSource","oldSource","loadError","_ref","_ref$type","_ref$w","_ref$h","_ref$clipX","clipX","_ref$clipY","clipY","_clearResizeMode","_applyResizeCover","_applyResizeContain","_updatePrecision","_updateClipping","scaleY","scale","desiredSize","choppedOffPixels","enableClipping","disableClipping","self","displayedTexture","onDisplayedTextureClippingChanged","onPrecisionChanged","getNonDefaults","nonDefaults","precision","isAutosizeTexture","isTexture","ImageTexture","_Texture","_inherits","_super","_createSuper","call","_src","src","getOption","fc","charCodeAt","platform","loadSrcTexture","_get","_getPrototypeOf","TextTextureRenderer","canvas","_stage","_canvas","_context","getContext","_settings","getPrecision","setFontProperties","font","getFontSetting","fontFace","fontStyle","fontSize","textBaseline","rtl","_load","document","fonts","fontSetting","check","text","catch","then","draw","loadPromise","drawText","_draw","_calculateRenderInfo","offsetY","lineHeight","wordWrapWidth","cutSx","cutEx","cutSy","cutEy","letterSpacing","textIndent","innerWidth","textOverflow","wordWrap","suffix","maxLinesSuffix","wrapWord","linesInfo","wrapText","maxLines","usedLines","otherLines","measureText","al","remainingText","moreTextLines","maxLineWidth","lineWidths","lineWidth","baselineOffset","globalAlpha","fillRect","translate","linePositionX","linePositionY","drawLines","verticalAlign","textAlign","highlight","highlightColor","hlHeight","highlightHeight","highlightOffset","hlPaddingLeft","highlightPaddingLeft","hlPaddingRight","highlightPaddingRight","fillStyle","drawLine","prevShadowSettings","shadow","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","textColor","fillText","textSplit","word","suffixWidth","wordLen","wordWidth","cutoffIndex","truncWordWidth","substring","indent","space","TextTextureRendererAdvanced","baseFont","fontBaselineRatio","wordBreak","wrapWidth","tokenize","parse","measure","reduce","acc","concat","resetFontStyle","lineNo","lineNum","baselineOffsetInPx","vaOffset","_iterator2","_step2","_iterator3","_step3","firstWord","lastWord","shift","isSpace","pop","_iterator4","_step4","apply","lastLineText","filter","_iterator5","_step5","spl","alignLine","_iterator6","_step6","_iterator7","_step7","canvasWidth","canvasHeight","hlColor","hlOffset","defaultColor","currentColor","_iterator8","_step8","_iterator9","_step9","letters","_iterator10","_step10","tokenizeString","tokens","italic","bold","colorStack","colorRegexp","test","matched","exec","o","applyFontStyle","parsed","_iterator11","_step11","_iterator12","_step12","_getBreakIndex","breakIndex","_this$_getBreakIndex","_objectSpread","totalWidth","_iterator13","_step13","initialX","prevWidth","prevX","_iterator14","_step14","TextTexture","_text","_fontStyle","_fontBaselineRatio","_fontSize","_fontFace","_wordWrap","_wordWrapWidth","_wordBreak","_textOverflow","_lineHeight","_textBaseline","_textAlign","_verticalAlign","_offsetY","_maxLines","_maxLinesSuffix","_textColor","_shadow","_shadowColor","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_highlight","_highlightHeight","_highlightColor","_highlightOffset","_highlightPaddingLeft","_highlightPaddingRight","_cutSx","_cutEx","_cutSy","_cutEy","_advancedRenderer","_letterSpacing","_textIndent","_rtl","_set","toString","advancedRenderer","args","cloneArgs","gl","getDrawingCanvas","texParams","sharpCfg","sharpen","getRenderPrecision","TEXTURE_MAG_FILTER","NEAREST","assign","getTextureOptionsForDrawingCanvas","proto","SourceTexture","_textureSource","Transition","_EventEmitter","property","_getter","getGetter","_setter","getSetter","_merger","merger","getMerger","_startValue","_targetValue","_p","_delayLeft","start","targetValue","isAttached","_updateDrawValue","reset","delay","finish","stop","removeActive","pause","play","addActive","getDrawValue","attached","isRunning","progress","dt","delayLeft","duration","invokeListeners","updateTargetValue","timingFunctionImpl","_timingFunctionImpl","startValue","skipDelay","isTransition","ObjectList","_refs","addAt","currentIndex","createItem","setAt","ref","onAdd","replaceByRef","existingItem","getByRef","replace","prevItem","getIndex","onMove","onSet","getAt","remove","removeAt","onRemove","clear","onSync","isItem","_getRefs","clearRef","setRef","_setByObject","_setByArray","refs","crefs","cref","idx","_equalsArray","array","same","marker","newItems","_setItems","prevItems","ElementChildList","_ObjectList","_connectParent","prevChildList","childList","_setParent","gc","createElement","isElement","Element","__id","__start","__core","__ref","__attached","__enabled","__active","__parent","__texture","__displayedTexture","__tags","__treeTags","__tagRoot","__childList","_throwError","removeTag","_addTag","_updateAttachedFlag","isRoot","_unsetTagsParent","_setTagsParent","_updateCollision","getDepth","depth","getAncestor","getAncestors","getAncestorAtDepth","levels","getSharedAncestor","o1","o2","l1","l2","_isAttached","_isEnabled","_isActive","withinBoundsMargin","newAttached","_onSetup","_onAttach","_onDetach","newEnabled","_onEnabled","_setEnabledFlag","_onDisabled","_unsetEnabledFlag","_setActiveFlag","_unsetActiveFlag","filters","_enableTexture","_onActive","_disableTexture","_hasTexturizer","_onInactive","_onResize","_getRenderWidth","_getRenderHeight","textureIsLoaded","loadTexture","_enableTextureError","prevTexture","prevSource","displayedTextureSource","sourceChanged","unknownSize","tx1","ty1","tx2","ty2","iw","ih","rw","rh","ph","tempty","tag","parentTreeTags","tags","tagSet","_loop","comp","_ret","Map","_loop2","_getByTag","getTags","setTags","removes","adds","hasTag","currentTags","addTag","list","_tag","mtag","values","res","level","resn","stag","sel","path","select","selectors","_select","pointIdx","arrowIdx","isRef","_selectChilds","subPath","getLocationString","localTags","getSettings","getPrettyString","childArray","missing","pivotX","pivotY","pivot","mountX","mountY","mount","rotation","colorUl","colorUr","colorBl","colorBr","forceZIndexContext","clipbox","tnd","renderToTexture","renderToTextureLazy","colorizeResultTexture","boundsMargin","offsetX","_collision","collision","_allowChildrenAccess","hasChildren","rectangleTexture","enableTextTexture","onUpdate","onAfterCalcs","onAfterUpdate","forceUpdate","rtt","getTexture","paths","firstCharCode","message","animation","animations","createAnimation","transition","_getTransition","_setTransition","setSmooth","fastForward","_transitions","transitions","defaultTransitionSettings","isTransitionSettings","_removeTransition","createSettings","getSmooth","toJSON","tree","collectChildren","getProperties","colorKeys","JSON","stringify","k","childStr","isEmpty","propertyPath","getter","PROP_GETTERS","Function","PROP_SETTERS","isColorProperty","toLowerCase","properties","props","getBoolean","StateMachine","setupStateMachine","fire","event","_hasMethod","_len","_key","_getState","_state","__path","_inState","statePath","currentStatePath","state","_sm","getStateByPath","currentState","__level","stateAtLevel","_getStateAtLevel","_hasMember","member","_setState","setStateId","_setStateCounter","_setStateId","newState","_stateMap","prevState","hasDifferentEnterMethod","$enter","hasDifferentExitMethod","$exit","sharedState","_getSharedState","context","sharedLevel","exitStates","_getStatesUntilLevel","__setState","_callExit","stateChangeOverridden","enterStates","reverse","_callEnter","_changedState","_onStateChange","hasParent","_stateIndex","__index","_initStateMachine","_routedType","_getMostSpecificHandledMember","memberNames","cur","memberName","alias","StateMachineType","getStateMemberAlias","targetConstructor","router","setPrototypeOf","stateMachineType","states","state1","state2","state1Array","_getAncestorStates","state2Array","_type","_router","_createRouter","_getStateMap","_addStateMemberDelegatorsToRouter","StateMachineRouter","_isRouter","original","_mixinStateMachineMethods","getOwnPropertyNames","descriptor","getOwnPropertyDescriptor","defineProperty","members","_getAllMemberNames","_addMemberRouter","statePaths","descriptors","aliases","_getDescriptor","descType","_getDescriptorType","_addMethodRouter","_addGetterSetterRouters","isValid","curState","getPrototypeOf","code","supportsSpread","_supportsSpread","functionBody","_getGetterRouter","_getSetterRouter","_this8","_this9","stateMap","_this10","_getStateMemberNames","_this11","_getStateMemberNamesForType","_this12","_isStateLocalMember","_createStateMap","_addState","parentState","_this13","__state","__name","_addStaticStateProperty","parentPath","_states","isInheritedFromParent","subStates","subState","stateName","_getStateName","isClassStateLevel","__supportsSpread","Component","_Element","tagRoot","_assertThisInitialized","__initialized","__firstActive","__firstEnable","__signals","__passSignals","__construct","getTemplateFunc","_build","__onStateChange","application","updateFocusPath","_refocus","__bindProperty","propObj","targetObj","targetProp","prop","propDependencies","propName","__func","__obj","__prop","_step$value","__init","_attach","_detach","_firstEnable","_firstActive","_active","_inactive","_construct","_init","_focus","newTarget","prevTarget","_unfocus","_focusChange","_getFocused","_setFocusSettings","_handleFocusSettings","hasFinalFocus","_focusPath","hasFocus","seekAncestorByType","cparent","getSharedAncestorComponent","ancestor","isComponent","signal","_signal","signalParent","_getParentSignalHandler","fireEvent","passSignal","_getSignalHandler","_signalProxy","fireAncestors","startsWith","_len2","_key2","_doFireAncestors","bindProp","__propertyBinding","hasName","parseTemplate","_template","loc","store","rid","parseTemplateRec","cursor","childCursor","propKey","parseTemplatePropRec","shaderCursor","parsePropertyBindings","collectSubComponents","subs","getComponent","CoreQuadList","quadTextures","quadElements","dataLength","getElement","getElementCore","getTextureWidth","getTextureHeight","WebGLCoreQuadList","_CoreQuadList","byteSize","data","ArrayBuffer","floats","Float32Array","uints","Uint32Array","getAttribsDataByteOffset","getQuadContents","CoreQuadOperation","shaderOwner","scissor","quads","getElementWidth","renderWidth","getElementHeight","renderHeight","WebGLCoreQuadOperation","_CoreQuadOperation","extraAttribsDataByteOffset","getNormalRenderTextureCoords","coords","getProjection","renderExec","_projection","projection","CoreRenderExecutor","destroy","_reset","_bindRenderTexture","_setScissor","_clearRenderTexture","execute","qops","quadOperations","_processQuadOperation","quadOperation","_setupQuadOperation","_execQuadOperation","op","_renderQuadOperation","renderTexture","WebGLCoreRenderExecutor","_CoreRenderExecutor","_attribsBuffer","createBuffer","maxQuads","byteLength","allIndices","Uint16Array","_quadsBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","STATIC_DRAW","deleteBuffer","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","enable","BLEND","disable","DEPTH_TEST","_stopShaderProgram","_setupBuffers","ARRAY_BUFFER","DYNAMIC_DRAW","_useShaderProgram","beforeDraw","afterDraw","operation","hasSameProgram","_currentShaderProgram","stopProgram","useProgram","setupUniforms","bindFramebuffer","FRAMEBUFFER","viewport","framebuffer","glClearColor","getClearColor","clearColor","COLOR_BUFFER_BIT","SCISSOR_TEST","CoreRenderState","getDefaultShader","createCoreQuadList","_renderTextureInfo","_realShader","_check","_texturizerTemporary","_quadOperation","_temporaryTexturizers","_isCachingTexturizer","owner","getScissor","_cacheTexturizer","_createQuadOperation","_hasChanges","_finishQuadOperation","_isRenderTextureReusable","isRenderTextureReusable","q","createCoreQuadOperation","finishRenderState","WebGLShaderProgram","vertexShaderSource","fragmentShaderSource","_program","_uniformLocations","_attributeLocations","_currentUniformValues","compile","createProgram","glVertShader","_glCompile","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","VALIDATE_STATUS","getError","getProgramInfoLog","deleteProgram","deleteShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getUniformLocation","location","getAttribLocation","_valueEquals","_valueClone","setUniformValue","glFunction","clonedValue","isMatrix","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","WebGLShader","_Shader","shaderPrograms","glProgram","initialize","_uniform","_attrib","_setUniform","beforeUsage","enableAttribs","afterUsage","disableAttribs","other","getExtraAttribBytesPerVertex","getVertexAttribPointerOffset","setExtraAttribsInBuffer","_getProjection","getFlipY","DefaultShader","_WebGLShader","vertexAttribPointer","FLOAT","enableVertexAttribArray","UNSIGNED_BYTE","disableVertexAttribArray","uniform2fv","glTexture","bindTexture","TEXTURE_2D","drawElements","TRIANGLES","UNSIGNED_SHORT","Renderer","_defaultShader","aggressive","_createDefaultShader","shaderType","_getShaderBaseType","convertedShaderType","_getShaderAlternative","copyRenderTexture","WebGLRenderer","_Renderer","_compressedTextureExtensions","astc","getExtension","etc1","s3tc","pvrtc","getCompressedTextureExtensions","shaderProgram","createCoreRenderExecutor","createCoreRenderState","createRenderTexture","createTexture","texImage2D","RGBA","texParameteri","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","params","format","internalFormat","createFramebuffer","framebufferTexture2D","COLOR_ATTACHMENT0","freeRenderTexture","deleteFramebuffer","deleteTexture","_getBytesPerPixel","fmt","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","RGB","UNSIGNED_BYTE_5_6_5","compressed","premultiplyAlpha","flipBlueRed","texOptions","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_FLIP_BLUE_RED","uploadCompressedGlTexture","uploadGlTexture","bytesPerPixel","mca","cx","cy","extra","copyTexSubImage2D","ow","oh","C2dCoreQuadList","renderContexts","modes","setRenderContext","setSimpleTc","setWhite","getRenderContext","getSimpleTc","getWhite","C2dCoreQuadOperation","C2dCoreRenderExecutor","_mainRenderTexture","getCanvas","_getContext","setTransform","clearRect","globalCompositeOperation","beginPath","rect","closePath","fill","_restoreContext","restore","save","_equalScissorAreas","clip","C2dShader","_C2dShader","_rectangleTexture","_tintManager","tintManager","vc","rc","white","stc","info","_setColorGradient","_beforeDrawEl","_afterDrawEl","sourceX","sourceY","sourceW","sourceH","tintTexture","getTintTexture","drawImage","transparency","gradient","createLinearGradient","addColorStop","C2dTextureTintManager","_usedMemory","_cachedNativeTextures","_addMemoryUsage","delta","addMemoryUsage","_delete","_hasCache","_getCache","prevMemUsage","memoryUsage","frame","lf","u","_tintTexture","before","reuseTexture","after","col","_tintCache","C2dTintCache","releaseBlancoTextures","_tx","_colors","_blancoTextures","_lastCleanupFrame","_memTextures","C2dRenderer","TextureTintManager","setupC2d","c2d","buffer","imageData","ImageData","Uint8ClampedArray","putImageData","SparkShader","elementPostion","paint","SparkRenderer","_WebGLRenderer","global","beginDrawing","ret","endDrawing","ImageWorker","_id","_initWorker","_worker","terminate","createWorker","blob","Blob","blobURL","URL","webkitURL","createObjectURL","Worker","postMessage","config","href","protocol","onmessage","ImageWorkerImage","image","_manager","_onError","_onLoad","ImageWorkerServer","_receiveMessage","isPathAbsolute","base","hasHashPath","_relativeBase","ImageWorkerServerItem","onFinish","imageBitmap","hasAlphaChannel","_ref2","isWPEBrowser","_onFinish","_xhr","_mimeType","_canceled","XMLHttpRequest","open","responseType","onerror","oEvent","onload","response","_createImageBitmap","send","createImageBitmap","colorSpaceConversion","imageOrientation","_hasAlphaChannel","abort","WebPlatform","_looping","_awaitingLoop","_loopHandler","_idleLoopCounter","_idleLoopDelay","_onIdle","_imageWorker","_registerVisibilityChangeHandler","clearInterval","_removeKeyHandler","_removeClickHandler","_removeHoverHandler","_removeScrollWheelHandler","_removeVisibilityChangeHandler","startLoop","loop","stopLoop","switchLoop","onIdle","setInterval","updateFrame","idleFrame","lp","renderFrame","requestAnimationFrame","view","pvr","DataView","mipmaps","compressedTexImage2D","glInternalFormat","pixelWidth","pixelHeight","HTMLImageElement","HTMLVideoElement","ImageBitmap","HTMLCanvasElement","getImageData","handleKtxLoad","arraybuffer","targetIdentifier","getUint32","littleEndian","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","numberOfFaces","numberOfMipmapLevels","bytesOfKeyValueData","kvps","formats","includes","imageSize","handlePvrLoad","pvrHeaderLength","pvrFormatEtc1","pvrWidth","pvrHeight","pvrMipmapCount","pvrMetadata","arrayBuffer","header","Int32Array","dataOffset","pvrtcData","Uint8Array","byteOffset","cancelCb","isPng","isKtx","isPvr","request","addEventListener","separatorPos","Image","crossOrigin","removeAttribute","createWebGLContext","opts","antialias","premultipliedAlpha","stencil","preserveDrawingBuffer","createCanvasContext","getHrTime","performance","now","nextFrame","changes","registerKeydownHandler","keyhandler","_keydownListener","registerKeyupHandler","_keyupListener","removeEventListener","registerClickHandler","clickHandler","_clickListener","registerHoverHandler","hoverHandler","_hoverListener","registerScrollWheelHandler","_scrollWheelListener","_visibilityChangeHandler","visibilityState","PlatformLoader","WebGLState","_gl","_buffers","_framebuffers","_renderbuffers","_vertexAttribs","_nonDefaultFlags","_textures","_maxTexture","_activeTexture","TEXTURE0","_pixelStorei","_getDefaultFlag","cap","DITHER","setFlag","def","setBuffer","change","setFramebuffer","setRenderbuffer","setProgram","program","va","equal","setActiveTexture","changed","activeIndex","_getTextureIndex","targetIndex","_getTextureTargetIndex","setPixelStorei","pname","param","_getPixelStoreiIndex","migrate","_migrateFlags","_useProgram","_migrateFramebuffers","_migrateRenderbuffers","buffersChanged","_migrateBuffers","_migrateAttributes","_migrateSettings","_migratePixelStorei","_migrateTextures","_getDefaultPixelStoreiByIndex","_getPixelStoreiByIndex","activeTexture","sTargets","tTargets","textureNumb","_getTextureByIndex","targetMax","_getTextureTargetByIndex","_bindTexture","_bindBuffer","_bindFramebuffer","fb","renderbuffer","_bindRenderbuffer","attrib","_disableVertexAttribArray","_vertexAttribPointer","_enableVertexAttribArray","defaults","getDefaultSettings","xname","tValue","setting","_defaultSettings","WebGLRenderingContext","FUNC_ADD","ZERO","BACK","LESS","CCW","ALWAYS","KEEP","_textureTargetIndices","_pixelStoreiIndices","_pixelStoreiDefaults","BROWSER_DEFAULT_WEBGL","WebGLStateManager","_initStateManager","switchState","$useProgram","$bindBuffer","$bindFramebuffer","$bindRenderbuffer","$enable","$disable","$viewport","$scissor","$disableVertexAttribArray","$enableVertexAttribArray","$vertexAttribPointer","normalized","stride","$activeTexture","$bindTexture","$pixelStorei","$stencilFuncSeparate","face","mask","FRONT","_stencilFuncSeparateFront","_stencilFuncSeparateBack","FRONT_AND_BACK","_stencilFuncSeparateFrontAndBack","_stencilFuncSeparate","$stencilMaskSeparate","_stencilMaskSeparateFront","_stencilMaskSeparateBack","_stencilMaskSeparateFrontAndBack","_stencilMaskSeparate","$stencilOpSeparate","fail","zfail","zpass","_stencilOpSeparateFront","_stencilOpSeparateBack","_stencilOpSeparateFrontAndBack","_stencilOpSeparate","$blendColor","red","green","blue","_blendColor","$blendEquation","_blendEquation","$blendEquationSeparate","modeRGB","modeAlpha","_blendEquationSeparate","$blendFunc","sfactor","dfactor","_blendFunc","$blendFuncSeparate","srcRGB","dstRGB","srcAlpha","dstAlpha","_blendFuncSeparate","$clearColor","_clearColor","$clearDepth","_clearDepth","$clearStencil","_clearStencil","$colorMask","_colorMask","$cullFace","_cullFace","$depthFunc","_depthFunc","$depthMask","flag","_depthMask","$depthRange","zNear","zFar","_depthRange","$frontFace","_frontFace","$lineWidth","_lineWidth","$polygonOffset","factor","units","_polygonOffset","$sampleCoverage","invert","_sampleCoverage","$stencilFunc","_stencilFunc","$stencilMask","_stencilMask","$stencilOp","_stencilOp","$vertexAttrib1f","indx","_vertexAttrib1f","$vertexAttrib1fv","_vertexAttrib1fv","$vertexAttrib2f","_vertexAttrib2f","$vertexAttrib2fv","_vertexAttrib2fv","$vertexAttrib3f","z","_vertexAttrib3f","$vertexAttrib3fv","_vertexAttrib3fv","$vertexAttrib4f","_vertexAttrib4f","$vertexAttrib4fv","_vertexAttrib4fv","__proto__","method","TextureManager","_uploadedTextureSources","textureSourceHashmap","_nativeFreeTextureSource","_nativeUploadTextureSource","addToLookupMap","_updateVramUsage","sign","usage","Stage","isWebglSupported","addVramUsage","freeUnusedTextureSources","remainingTextureSources","ts","_freeManagedTextureSource","_cleanupLookupMap","managed","TextureThrottler","_remove","_sources","_data","processSome","_processItem","MAX_UPLOAD_TIME_PER_FRAME","CoreContext","_renderTexturePool","_renderTextureId","_zSorts","_freeRenderTexture","_render","_update","_performForcedZSorts","zSort","debugFrame","_fillRenderState","_readPixels","_performRender","log","pixels","readPixels","prec","_createRenderTexture","freeUnusedRenderTextures","maxAge","limit","TransitionSettings","_timingFunction","TransitionManager","transitionSettings","MultiSpline","_clear","_pe","_idp","_f","_v","_lv","_s","_ve","_sme","_se","_length","defaultSmoothness","lv","last","pe","idp","sm","pi","ni","nc","pc","ve","sme","se","getSplineRgbaValueFunction","getSplineValueFunction","_add","_getItem","getValue","p1","p2","i2","s1","s2","dp","helpers","getSplineHelpers","calculateSpline","cv1","cv2","csx","csy","cex","cey","yd","AnimationActionSettings","animationSettings","_selector","_props","_propSetters","_resetValue","_hasResetValue","_hasColorProperty","getResetValue","getAnimatedElements","sv","hasColorProperty","selector","resetValue","isAnimationActionSettings","AnimationSettings","_actions","repeat","repeatOffset","repeatDelay","autostop","stopMethod","STOP_METHODS","FADE","_stopTimingFunction","_stopTimingFunctionImpl","stopDuration","stopDelay","aas","action","REVERSE","FORWARD","IMMEDIATE","ONETOTWO","Animation","STATES","IDLE","_repeatsLeft","_stopDelayLeft","_stopP","PLAYING","checkActive","PAUSED","STOPPING","FINISHED","replay","STOPPED","stopNow","isPaused","isPlaying","isStopping","isFinished","isActive","_progress","_stopProgress","_getStopDuration","_progressStopTransition","stopTimingFunctionImpl","AnimationManager","RectangleTexture","whitePixel","_setOptions","_lastGcFrame","_usedVramAlpha","_usedVramNonAlpha","platformType","_mode","ratio","style","_options","_renderer","setClearColor","startTime","currentTime","_updateSourceTextures","isWebgl","isC2d","opt","setApplication","app","resume","_updatingFrame","_calculateDt","fixedDt","drawFrame","memoryUsageBefore","gcTextureMemory","gcRenderTextureMemory","usedMemory","addServiceProvider","serviceprovider","getChildrenByPosition","Application","_Component","_temp_options","booting","__updateFocusCounter","__keypressTimers","__hoveredChild","updateFocusSettings","__keymap","_receiveKeydown","_receiveKeyup","_receiveClick","_receiveHover","_recieveScrollWheel","__options","__updateFocus","notOverridden","__updateFocusRec","updateFocusId","__updateFocusId","newFocusPath","__getFocusPath","newFocusedComponent","prevFocusedComponent","focusOverridden","unfocusedElement","focusedComponent","focusSettings","defaultSetFocusSettings","defaultHandleFocusSettings","__prevFocusSettings","prevSettings","focused","prevFocused","nextFocus","newParts","focusTopDownEvent","events","focusPath","_path$i","returnValue","focusBottomUpEvent","_path$i2","keyCode","hasTimer","longpress","consumer","_startLongpressTimer","clearTimeout","lookup","timeout","setTimeout","clientX","clientY","fireTopDownScrollWheelHandler","fireBottomUpScrollWheelHandler","affected","_findChildren","_captureScroll","_getTargetChild","_handleScroll","fireBottomUpClickHandler","_child$core$_worldCon","localCoords","_handleClick","fireBottomUpHoverHandler","hoveredBranch","newHoveredBranch","elem","_handleUnhover","diffBranch","_handleHover","lastElement","hoverableChildren","_withinClickableRange","bucket","affectedChildren","cursorX","cursorY","candidates","cw","finalW","ch","finalH","_testCollision","_destroyed","_destroy","timer","StaticCanvasTexture","_factory","_lookupId","factory","_ref$lookupId","Tools","getCanvasTexture","canvasFactory","content","getRoundRect","radius","strokeWidth","strokeColor","fillColor","createRoundRect","imageSmoothingEnabled","moveTo","lineTo","arcTo","strokeStyle","stroke","getShadowRect","blur","margin","createShadowRect","getSvgTexture","url","createSvg","img","ObjMerger","isMf","__mf","mf","aks","bks","ai","bi","aksl","aIndex","curIndex","akey","bv","av","ObjectListProxy","ObjectListWrapper","_ObjectListProxy","_wrapper","NoiseTexture","noise","random","REPEAT","HtmlTexture","_htmlElement","_scale","innerHTML","htmlElement","firstElementChild","html2canvas","getPreloadArea","appendChild","backgroundColor","removeChild","_preloadArea","attachShadow","opacity","pointerEvents","display","top","overflow","body","StaticTexture","ListComponent","_thisSuper","_reloadVisibleElements","_visibleItems","_index","_started","_scrollTransitionSettings","_itemSize","_viewportScrollOffset","_itemScrollOffset","_roll","_rollMin","_rollMax","_progressAnimation","_invertDirection","itemList","ListItems","_scrollTransition","setIndex","immediate","closest","nElements","realIndex","diff","viewportSize","scrollDelta","getAxisPosition","ps","wasVisible","invisibleItem","getWrapper","setPrevious","setNext","_ObjectListWrapper","_super2","checkStarted","ri","LinearBlurShader","_DefaultShader","_direction","_kernelRadius","uniform1i","BoxBlurShader","BlurShader","_amount","FastBlurComponent","_paddingX","_paddingY","_updateBlurSize","Wrap","WebGLFastBlurComponent","C2dFastBlurComponent","_Component2","_textwrap","paddingX","paddingY","kernelRadius","_amountToKernelRadius","Textwrap","C2dBlurShader","Content","getSpline","_multiSpline","_Component3","_super3","_layers","_output","_buildLayers","filterShaderSettings","filterShaders","_setLayerTexture","getLayerContents","getLayer","steps","step","fw","fh","otherTextureSource","Layers","L0","L1","L2","L3","Result","FastBlurOutputShader","_super4","_a","_otherTextureSource","uniform1f","TEXTURE1","BloomComponent","BloomBase","BloomBaseShader","SmoothScaleComponent","_smoothScale","_iterations","its","_setIterations","scalers","first","useScalers","ContentWrap","Scale","contentWrap","BorderComponent","_borderTop","_borderRight","_borderBottom","_borderLeft","borderWidth","borderWidthTop","borderWidthRight","borderWidthBottom","borderWidthLeft","colorBorderTop","colorBorderRight","colorBorderBottom","colorBorderLeft","borderTop","borderRight","borderBottom","borderLeft","Borders","Top","Right","Bottom","Left","WebGLGrayscaleShader","_WebGLDefaultShader","C2dGrayscaleShader","WebGLDefaultShader","_C2dDefaultShader","C2dDefaultShader","DitheringShader","_noiseTexture","_graining","_random","CircularPushShader","_inputValue","_maxDerivative","_normalizedValue","_offset","_aspectRatio","_offsetX","buckets","_buckets","_values","_getValues","full","_shiftBuckets","_valuesTexture","ALPHA","InversionShader","OutlineShader","_width","_col","_color","uniform4fv","ddw","dw","ddh","dh","PixelateShader","_size","getWebGLImpl","WebGLPixelateShaderImpl","RadialFilterShader","_radius","_cutoff","RoundedRectangleShader","_blend","_stroke","_fc","_fillColor","_getNormalizedColor","_strokeColor","num","_sc","renderPrecision","renderContext","FadeOutShader","_fade","fade","VignetteShader","_magnitude","_intensity","_pivot","SpinnerShader","_period","_angle","_smooth","_backgroundColor","_time","HoleShader","RadialGradientShader","_ic","_normalizedIC","_oc","_normalizedOC","_radiusY","innerColor","Light3dShader","_strength","_ambient","_fudge","_rx","_ry","_z","NaN","_pivotZ","_lightY","_lightZ","vr","rz","atan2","uniform3fv","lightY","lightZ","PerspectiveShader","MagnifierShader","_magnification","SpinnerShader2","_showDot","_clockwise","_bc","_normalizedBC","_c","_normalizedC","bool","spinSync","lightning","shaders","Grayscale","BoxBlur","Dithering","CircularPush","Inversion","LinearBlur","Outline","Pixelate","RadialFilter","RoundedRectangle","Spinner2","FadeOut","Hole","Vignette","Spinner","RadialGradient","Light3d","Perspective","Magnifier","Blur","components","tools","lng"],"mappings":"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"}